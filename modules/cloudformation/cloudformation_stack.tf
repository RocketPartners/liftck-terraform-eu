resource "aws_cloudformation_stack" "tfer--StackSet-wiz-io-d1a9932e-a3cf-40d1-a967-1ef4312b6966" {
  capabilities      = ["CAPABILITY_NAMED_IAM"]
  disable_rollback  = "false"
  name              = "StackSet-wiz-io-d1a9932e-a3cf-40d1-a967-1ef4312b6966"
  notification_arns = ["arn:aws:sns:us-east-1:500917015339:CfnNotificationSNSTopic"]

  tags = {
    Created_by   = "cezzi"
    Environment  = "root"
    Owner        = "CEC"
    Project      = "ckapps"
    Stack_source = "git@github.com:circlekeurope/cec-na-shared-infrastucture.git"
  }

  tags_all = {
    Created_by   = "cezzi"
    Environment  = "root"
    Owner        = "CEC"
    Project      = "ckapps"
    Stack_source = "git@github.com:circlekeurope/cec-na-shared-infrastucture.git"
  }

  template_body      = "{\"AWSTemplateFormatVersion\":\"2010-09-09\",\"Description\":\"Wiz AWS standard deployment\",\"Outputs\":{\"ExternalID\":{\"Description\":\"Your External ID\",\"Value\":{\"Ref\":\"ExternalId\"}},\"RoleARNID\":{\"Description\":\"Your Role ARN ID\",\"Value\":{\"Fn::GetAtt\":[\"Role\",\"Arn\"]}}},\"Parameters\":{\"ExternalId\":{\"AllowedPattern\":\"\\\\S{8}-\\\\S{4}-\\\\S{4}-\\\\S{4}-\\\\S{12}\",\"Description\":\"Enter External ID, this is a nonce that will be used by our service to assume the role\",\"Type\":\"String\"},\"WizRoleName\":{\"Default\":\"WizAccess-Role\",\"Description\":\"Enter the role name that will be installed on your account, the default is WizAccess-Role\",\"Type\":\"String\"}},\"Resources\":{\"Role\":{\"Properties\":{\"AssumeRolePolicyDocument\":{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":{\"Ref\":\"ExternalId\"}}},\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::197171649850:root\"}}],\"Version\":\"2012-10-17\"},\"ManagedPolicyArns\":[\"arn:aws:iam::aws:policy/SecurityAudit\",\"arn:aws:iam::aws:policy/job-function/ViewOnlyAccess\"],\"RoleName\":{\"Ref\":\"WizRoleName\"}},\"Type\":\"AWS::IAM::Role\"},\"WizFullPolicy\":{\"Properties\":{\"PolicyDocument\":{\"Statement\":[{\"Action\":[\"acm:GetCertificate\",\"apigateway:GET\",\"backup:DescribeGlobalSettings\",\"backup:GetBackupVaultAccessPolicy\",\"backup:GetBackupVaultNotifications\",\"backup:ListBackupVaults\",\"backup:ListTags\",\"cloudtrail:GetInsightSelectors\",\"cloudtrail:ListTrails\",\"codebuild:BatchGetProjects\",\"codebuild:GetResourcePolicy\",\"codebuild:ListProjects\",\"cognito-identity:DescribeIdentityPool\",\"dynamodb:DescribeExport\",\"dynamodb:DescribeKinesisStreamingDestination\",\"dynamodb:ListExports\",\"ec2:GetEbsEncryptionByDefault\",\"ec2:SearchTransitGatewayRoutes\",\"ecr:BatchGetImage\",\"ecr:GetAuthorizationToken\",\"ecr:GetDownloadUrlForLayer\",\"ecr:GetRegistryPolicy\",\"eks:ListTagsForResource\",\"elasticfilesystem:DescribeAccessPoints\",\"elasticfilesystem:DescribeFileSystemPolicy\",\"elasticmapreduce:GetAutoTerminationPolicy\",\"elasticmapreduce:GetManagedScalingPolicy\",\"glacier:GetDataRetrievalPolicy\",\"glacier:GetVaultLock\",\"glue:GetConnection\",\"glue:GetSecurityConfiguration\",\"glue:GetTags\",\"health:DescribeAffectedAccountsForOrganization\",\"health:DescribeAffectedEntities\",\"health:DescribeAffectedEntitiesForOrganization\",\"health:DescribeEntityAggregates\",\"health:DescribeEventAggregates\",\"health:DescribeEventDetails\",\"health:DescribeEventDetailsForOrganization\",\"health:DescribeEventTypes\",\"health:DescribeEvents\",\"health:DescribeEventsForOrganization\",\"health:DescribeHealthServiceStatusForOrganization\",\"kafka:ListClusters\",\"kendra:DescribeDataSource\",\"kendra:DescribeIndex\",\"kendra:ListDataSources\",\"kendra:ListIndices\",\"kendra:ListTagsForResource\",\"kms:GetKeyRotationStatus\",\"kms:ListResourceTags\",\"lambda:GetFunction\",\"lambda:GetLayerVersion\",\"ses:DescribeActiveReceiptRuleSet\",\"ses:GetAccount\",\"ses:GetConfigurationSet\",\"ses:GetConfigurationSetEventDestinations\",\"ses:GetDedicatedIps\",\"ses:GetEmailIdentity\",\"ses:ListConfigurationSets\",\"ses:ListDedicatedIpPools\",\"ses:ListReceiptFilters\",\"wafv2:GetLoggingConfiguration\",\"wafv2:GetWebACLForResource\"],\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"ec2:CopySnapshot\",\"ec2:CreateSnapshot\",\"kms:CreateKey\"],\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"ec2:CreateTags\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:ec2:*::snapshot/*\"},{\"Action\":\"kms:CreateAlias\",\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:kms:*:*:alias/wizKey\",\"arn:aws:kms:*:*:key/*\"]},{\"Action\":[\"kms:CreateGrant\",\"kms:ReEncryptFrom\"],\"Condition\":{\"StringLike\":{\"kms:ViaService\":\"ec2.*.amazonaws.com\"}},\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"kms:GetKeyPolicy\",\"kms:PutKeyPolicy\"],\"Condition\":{\"StringEquals\":{\"aws:ResourceTag/wiz\":\"auto-gen-cmk\"}},\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"ec2:DeleteSnapshot\",\"ec2:ModifySnapshotAttribute\"],\"Condition\":{\"StringEquals\":{\"ec2:ResourceTag/wiz\":\"auto-gen-snapshot\"}},\"Effect\":\"Allow\",\"Resource\":\"*\"},{\"Action\":[\"s3:GetObject\",\"s3:GetBucketLocation\",\"s3:GetObjectTagging\",\"s3:ListBucket\"],\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:s3:::*terraform*\",\"arn:aws:s3:::*tfstate*\",\"arn:aws:s3:::*tf?state*\",\"arn:aws:s3:::*cloudtrail*\",\"arn:aws:s3:::elasticbeanstalk-*\"],\"Sid\":\"WizAccessS3\"}],\"Version\":\"2012-10-17\"},\"PolicyName\":\"WizFullPolicy\",\"Roles\":[{\"Ref\":\"Role\"}]},\"Type\":\"AWS::IAM::Policy\"}}}"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--age-verification-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "age-verification-pipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  apiKeys:\n    AllowedValues:\n      - dev123,ngrp_9zk2iflapd83bv\n      - 23e6bd75-1a64-4fa4-a9d1-c6793a7b650f\n    Description: Comma separated list API keys\n    Type: String\n\n  certificateArn:\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n    Type: String\n\n  domainName:\n    AllowedValues:\n      - circlekliftdev.com\n      - circleklift.com\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  getLoyaltyUri:\n    AllowedValues:\n      - https://qa-apm-ap-lift-api-us-e.azure-api.net/consumers/\n      - https://lift.allpoints.io/consumers/\n    Description: URL for PDI API\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: cirk_age_verification_microsite_api\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  lexisNexisMode:\n    AllowedValues:\n      - testing\n      - live\n    Description: The mode for requests to LexisNexis\n    Type: String\n\n  lexisNexisPassword:\n    AllowedValues:\n      - Rk!3vl4L8x\n      - Rk!3vl4L8x\n    Description: The password for LexisNexis Age Verification API requests\n    Type: String\n\n  lexisNexisUri:\n    AllowedValues:\n      - https://staging.ws.idms.lexisnexis.com/restws/identity/v3/accounts/57339/workflows/customers.circlek.verify.age.workflow/conversations\n      - https://ws.idms.lexisnexis.com/restws/identity/v3/accounts/35665/workflows/customers.circlek.verify.age.workflow/conversations\n    Description: The URI for LexisNexis Age Verification API requests\n    Type: String\n\n  lexisNexisUserId:\n    AllowedValues:\n      - CircleK_Integ_Stg\n      - CircleK_Integ\n    Description: The user for LexisNexis Age Verification API requests\n    Type: String\n\n  pdiXRetailerGuid:\n    AllowedValues:\n      - CC0C3C80-7774-4EA6-AF20-E544EC51CB19\n    Description: Used for request headers\n    Type: String\n\n  pdiOcpApimSubscriptionKey:\n    AllowedValues:\n      - 4494ce5e498d415d826e2def800de831\n      - 7de5d5cba0284519bd8529d22404a339\n    Description: Used for request headers\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: age-verification\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - dynamodb:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutMetricFilter\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: '*'\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: '*'\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: '*'\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"apiKeys\": \"$${apiKeys}\", \"certificateArn\": \"$${certificateArn}\", \"domainName\": \"$${domainName}\", \"environment\": \"$${environment}\", \"getLoyaltyUri\": \"$${getLoyaltyUri}\", \"lexisNexisMode\": \"$${lexisNexisMode}\", \"lexisNexisPassword\": \"$${lexisNexisPassword}\", \"lexisNexisUri\": \"$${lexisNexisUri}\", \"lexisNexisUserId\": \"$${lexisNexisUserId}\", \"pdiXRetailerGuid\": \"$${pdiXRetailerGuid}\", \"pdiOcpApimSubscriptionKey\": \"$${pdiOcpApimSubscriptionKey}\", \"resourcePrefix\": \"$${resourcePrefix}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--age-verification-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/age-verification-lambda-role"
  name               = "age-verification-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: Creates serverless resources for the age verification service\nMappings:\n  EnvironmentType:\n    dev:\n      securityGroup: sg-0e70ce312f8483004\n      subnet1: subnet-0c19ac58c5589ceba\n      subnet2: subnet-09ee6eface6276819\n    prod:\n      securityGroup: sg-065260779a3d2cbda\n      subnet1: subnet-0f592478c6198fa9e\n      subnet2: subnet-017cb385e5acdbec2\nParameters:\n  apiKeys:\n    Type: String\n  certificateArn:\n    Type: String\n  domainName:\n    Type: String\n  dynamoTable:\n    Default: customer-details\n    Type: String\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  getLoyaltyUri:\n    Type: String\n  lexisNexisMode:\n    Type: String\n  lexisNexisPassword:\n    Type: String\n  lexisNexisUri:\n    Type: String\n  lexisNexisUserId:\n    Type: String\n  metricNamespace:\n    Default: Age Verification\n    Type: String\n  pdiOcpApimSubscriptionKey:\n    Type: String\n  pdiXRetailerGuid:\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\nResources:\n  AgeUnverifiedMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.AGE_UNVERIFIED\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: AgeUnverified\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  AgeVerified18MetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.AGE_VERIFIED_18\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: AgeVerified18\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  AgeVerified21MetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.AGE_VERIFIED_21\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: AgeVerified21\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  ApiBasePathMapping:\n    DependsOn:\n    - ApiDomainName\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainName\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n    Type: AWS::ApiGateway::BasePathMapping\n  ApiDomainName:\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Fn::Sub: $${resourcePrefix}.$${domainName}\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n    Type: AWS::ApiGateway::DomainName\n  ApiGateway:\n    Properties:\n      Name:\n        Fn::Sub: $${resourcePrefix}-api\n      StageName:\n        Ref: environment\n    Type: AWS::Serverless::Api\n  CustomerUnverifiedMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.ERROR.CUSTOMER_RECORD_NOT_FOUND\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: CustomerUnverified\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  CustomerVerifiedMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.CUSTOMER_RECORD_FOUND\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: CustomerVerified\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  Lambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/age-verification-pipeline-build/825e2f4669db82470627107c619f08d4\n      Description: Age Verification Service Api\n      Environment:\n        Variables:\n          AGE_VERIFY_URI:\n            Ref: lexisNexisUri\n          API_KEYS:\n            Ref: apiKeys\n          DEBUG: true\n          GET_LOYALTY_URI:\n            Ref: getLoyaltyUri\n          MODE:\n            Ref: lexisNexisMode\n          PASSWORD:\n            Ref: lexisNexisPassword\n          PDI_OCP_APIM_SUBSCRIPTION_KEY:\n            Ref: pdiOcpApimSubscriptionKey\n          PDI_X_RETAILER_GUID:\n            Ref: pdiXRetailerGuid\n          TABLE_NAME:\n            Ref: dynamoTable\n          USER_ID:\n            Ref: lexisNexisUserId\n      Events:\n        ApiGateway:\n          Properties:\n            Method: any\n            Path: /{proxy+}\n            RestApiId:\n              Ref: ApiGateway\n          Type: Api\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: com.liftck.ageverification.LambdaHandler::handleRequest\n      MemorySize: 2048\n      Policies:\n      - Statement:\n        - Action:\n          - dynamodb:BatchGetItem\n          - dynamodb:BatchWriteItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Query\n          - dynamodb:UpdateItem\n          Effect: Allow\n          Resource:\n            Fn::Join:\n            - ''\n            - - 'arn:aws:dynamodb:'\n              - Ref: AWS::Region\n              - ':'\n              - Ref: AWS::AccountId\n              - :table/\n              - Ref: dynamoTable\n        Version: 2012-10-17\n      Runtime: java8\n      Timeout: 30\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\n  LexisNexisErrorMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.ERROR.LEXIS_NEXIS_ERROR\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: LexisNexisError\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  LexisNexisSuccessMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.LEXIS_NEXIS_SUCCESS\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: LexisNexisSuccess\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--age-verification-webapp" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "age-verification-webapp"
  template_body      = "Description: >\n  Codepipeline, Build, and Deployment of Age Verification App front end code\n\nParameters:\n  awsAccountId:\n    AllowedValues:\n      - 627729951075\n      - 799611636099\n    Type: String\n\n  distributionId:\n    AllowedValues:\n      - E1ULYSXNF61CM\n      - E2EORLV92POETZ\n    Description: CloudFront distribution ID\n    Type: String\n\n  environment:\n    AllowedValues:\n      - staging\n      - production\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Type: String\n    Description: The branch of the repo to continuously deploy. (dev)\n\n  githubRepo:\n    Default: cirk_age_verification_microsite\n    Type: String\n\n  githubToken:\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Type: String\n\n  resourcePrefix:\n    Default: age-verification-webapp\n    Type: String\n\n  s3BucketName:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  s3SourceBucket:\n    AllowedValues:\n      - age-verify.circlekliftdev.com\n      - age-verify.circleklift.com\n    Type: String\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}/*\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:DeleteObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource:\n                  - !Sub arn:aws:cloudfront::$${awsAccountId}:distribution/$${distributionId}\n                Effect: Allow\n                Action:\n                  - cloudfront:CreateInvalidation\n                  - cloudfront:UpdateDistribution\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: buildspec.yml\n      Environment:\n        ComputeType: BUILD_GENERAL1_MEDIUM\n        EnvironmentVariables:\n          - Name: ENVIRONMENT\n            Type: PLAINTEXT\n            Value: !Ref environment\n        Image: aws/codebuild/standard:4.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: false\n      Name: !Sub $${resourcePrefix}-pipeline\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 2\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--alarm-lambdas-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "alarm-lambdas-prod"
  template_body      = "AWSTemplateFormatVersion: '2010-09-09'\r\nDescription: \"Alarm Lambda Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: \"The VPC that the lambda should use\"\r\n    Type: AWS::EC2::VPC::Id\r\n    \r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n    \r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n  \r\n  monitorBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"alarm-lambda/liftck_monitor.zip\"\r\n    \r\n  notifyBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"alarm-lambda/liftck_notify.zip\"\r\n    \r\n  schedulerBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"alarm-lambda/liftck_scheduler.zip\"\r\n    \r\n  monitorFunctionName:\r\n    Type: \"String\"\r\n    Default: \"prod-monitor\"\r\n    Description: \"This has to match the name of the monitor lambda function in the db.\"\r\n    \r\n  notifyFunctionName:\r\n    Type: \"String\"\r\n    Default: \"prod-notify\"\r\n    Description: \"This has to match the name of the notify lambda function in the db.\"\r\n    \r\n  schedulerFunctionName:\r\n    Type: \"String\"\r\n    Default: \"prod-scheduler\"\r\n    \r\n  databaseUrl:\r\n    Type: \"String\"\r\n    Default: \"cirk-prod.cluster-cwmhmb7mi9yp.us-east-1.rds.amazonaws.com\"\r\n    \r\n  databaseUser:\r\n    Type: \"String\"\r\n    Default: \"cirkadmin\"\r\n    \r\n  databasePass:\r\n    Type: \"String\"\r\n    \r\n  tablePrefix:\r\n    Type: \"String\"\r\n    Default: \"Alarm\"\r\n    \r\nResources:\r\n  monitorLambda:\r\n    Type: 'AWS::Lambda::Function'\r\n    DependsOn:\r\n      - MonitorLogGroup\r\n    Properties:\r\n      FunctionName: !Ref \"monitorFunctionName\"\r\n      Handler: 'io.rcktapp.cron.monitor.MonitorLambdaHandler::handleRequest'\r\n      Runtime: java8\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"monitorBuildFileKey\"\r\n      Description: ''\r\n      MemorySize: 512\r\n      Timeout: 600\r\n      Role: !GetAtt \"alarmLambdaRole.Arn\"\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n          - !Ref alarmLambdaSg\r\n        SubnetIds: !Ref serviceSubnets\r\n        \r\n  notifyLambda:\r\n    Type: 'AWS::Lambda::Function'\r\n    DependsOn:\r\n      - NotifyLogGroup\r\n    Properties:\r\n      FunctionName: !Ref \"notifyFunctionName\"\r\n      Handler: 'io.rcktapp.cron.monitor.NotifyLambdaHandler::handleRequest'\r\n      Runtime: java8\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"notifyBuildFileKey\"\r\n      Description: ''\r\n      MemorySize: 256\r\n      Timeout: 300\r\n      Role: !GetAtt \"alarmLambdaRole.Arn\"\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n          - !Ref alarmLambdaSg\r\n        SubnetIds: !Ref serviceSubnets\r\n        \r\n  schedulerLambda:\r\n    Type: 'AWS::Lambda::Function'\r\n    DependsOn:\r\n      - SchedulerLogGroup\r\n    Properties:\r\n      FunctionName: !Ref \"schedulerFunctionName\"\r\n      Handler: 'io.rcktapp.cron.SchedulerLambdaHandler::handleRequest'\r\n      Runtime: java8\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"schedulerBuildFileKey\"\r\n      Description: ''\r\n      MemorySize: 256\r\n      Timeout: 300\r\n      Role: !GetAtt \"schedulerLambdaRole.Arn\"\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n          - !Ref alarmLambdaSg\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          config: !Sub \"{ \\t\\\"jdbcDriver\\\": \\\"com.mysql.cj.jdbc.Driver\\\", \\t\\\"jdbcUrl\\\": \\\"jdbc:mysql://$${databaseUrl}:3306/lift?useServerPrepStmts=false\u0026rewriteBatchedStatements=true\u0026autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026connectTimeout=5000\u0026useSSL=false\\\", \\t\\\"jdbcUsername\\\": \\\"$${databaseUser}\\\", \\t\\\"jdbcPassword\\\": \\\"$${databasePass}\\\", \\t\\\"tablePrefix\\\": \\\"$${tablePrefix}\\\" }\"\r\n          \r\n  alarmLambdaRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      RoleName: 'alarm-lambda-role'\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      ManagedPolicyArns:\r\n        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'\r\n      Policies:\r\n        - PolicyName: 'AWSLambdaVPCAccessExecutionRole'\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              -\r\n                Effect: \"Allow\"\r\n                Action:\r\n                  - \"ec2:CreateNetworkInterface\"\r\n                  - \"ec2:DeleteNetworkInterface\"\r\n                  - \"ec2:DescribeNetworkInterfaces\"\r\n                Resource: \"*\"\r\n        - PolicyName: 'AWSLambdaBasicExecutionRole'\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              - Effect: \"Allow\"\r\n                Action:\r\n                  - \"logs:CreateLogGroup\"\r\n                  - \"logs:CreateLogStream\"\r\n                  - \"logs:PutLogEvents\"\r\n                Resource: \r\n                  - !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${monitorFunctionName}:*\r\n                  - !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${notifyFunctionName}:*\r\n                  - !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${schedulerFunctionName}:*\r\n        - PolicyName: \"AdditionalNeededLambdaPerms\"\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement: \r\n              - Effect: \"Allow\"\r\n                Action: \"ses:SendEmail\"\r\n                Resource: \"*\"\r\n              - Effect: \"Allow\"\r\n                Action: \"s3:GetObject\"\r\n                Resource:\r\n                  - !Sub \"arn:aws:s3:::$${lambdaBuildBucket}/*\"\r\n                  \r\n  schedulerLambdaRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      RoleName: 'scheduler-lambda-role'\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      ManagedPolicyArns:\r\n        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'\r\n      Policies:\r\n        - PolicyName: 'AWSLambdaVPCAccessExecutionRole'\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              -\r\n                Effect: \"Allow\"\r\n                Action:\r\n                  - \"ec2:CreateNetworkInterface\"\r\n                  - \"ec2:DeleteNetworkInterface\"\r\n                  - \"ec2:DescribeNetworkInterfaces\"\r\n                Resource: \"*\"\r\n        - PolicyName: 'AWSLambdaBasicExecutionRole'\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              - Effect: \"Allow\"\r\n                Action:\r\n                  - \"logs:CreateLogGroup\"\r\n                  - \"logs:CreateLogStream\"\r\n                  - \"logs:PutLogEvents\"\r\n                Resource: \r\n                  - !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${schedulerFunctionName}:*\r\n        - PolicyName: \"InvokeAlarmLambdas\"\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement: \r\n              - Effect: \"Allow\"\r\n                Action: \"lambda:InvokeFunction\"\r\n                Resource:\r\n                  - !GetAtt \"monitorLambda.Arn\" \r\n                  - !GetAtt \"notifyLambda.Arn\"\r\n              - Effect: \"Allow\"\r\n                Action: \"s3:GetObject\"\r\n                Resource:\r\n                  - !Sub \"arn:aws:s3:::$${lambdaBuildBucket}/*\"\r\n                  \r\n  MonitorLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${monitorFunctionName}\r\n      RetentionInDays: 30\r\n      \r\n  NotifyLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${notifyFunctionName}\r\n      RetentionInDays: 30\r\n      \r\n  SchedulerLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${schedulerFunctionName}\r\n      RetentionInDays: 30\r\n                \r\n  alarmLambdaSg:\r\n    Type: \"AWS::EC2::SecurityGroup\"\r\n    Properties:\r\n      GroupName: \"alarm-lambda-sg\"\r\n      GroupDescription: \"alarm-lambda-sg\"\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: \"alarm-lambda-sg\"\r\n          \r\n  cron:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Description: Runs the scheduler lambda every minute\r\n      Name: \"alarm-scheduler-every-minute\"\r\n      ScheduleExpression: \"cron(0/1 * * * ? *)\"\r\n      State: \"ENABLED\"\r\n      Targets:\r\n        - Arn: !GetAtt \"schedulerLambda.Arn\"\r\n          Id: \"alarm-scheduler\""
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-basket" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-basket"
  template_body      = "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Stack to set up KinesisFirehose to Redshift\n\nParameters:\n  BucketARN:\n    Description: ARN of S3 Bucket\n    Type: String\n    Default : arn:aws:s3:::circlek-prod-firehose\n  ClusterJDBCURL:\n    Description: URL to connect to Redshift cluster\n    Type: String\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\n  Username:\n    Description: Database Username\n    Type: String\n    Default : firehose\n  Password:\n    Description: Database Password\n    Type: String\n    NoEcho: 'true'\n  DataTableName:\n    Description: Name of the redshift table to populate data\n    Type: String\n    Default : table_name\n  DataTableColumns:\n    Description: Comma-separated list of column names to populate data\n    Type: String\n  S3Prefix:\n    Description: Name of the Prefix for S3 Bucket\n    Type: String\n    Default: prefix\n    \nResources:\n  RootRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"firehose.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: kinesis\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - redshift:GetClusterCredentials\n                  - redshift:ListSchemas\n                  - redshift:ListTables\n                  - redshift:ListDatabases\n                  - redshift:ExecuteQuery\n                  - redshift:FetchResults\n                  - redshift:CancelQuery\n                  - redshift:DescribeClusters\n                  - redshift:DescribeQuery\n                  - redshift:DescribeTable\n                  - redshift:ViewQueriesFromConsole\n                  - redshift:DescribeSavedQueries\n                  - redshift:CreateSavedQuery\n                  - redshift:DeleteSavedQueries\n                  - redshift:ModifySavedQuery\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: '*'\n  FireHoseStreamLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\n      RetentionInDays: 7\n  FirehoseStreamLogS3:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: S3Delivery\n  FirehoseStreamLogRS:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: RedshiftDelivery\n  KinesisFirehoseDeliveryStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties:\n      DeliveryStreamName: !Ref \"AWS::StackName\"\n      RedshiftDestinationConfiguration:\n        ClusterJDBCURL:\n          Ref: ClusterJDBCURL\n        CopyCommand:\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns ROUNDEC GZIP\n          DataTableColumns:\n            Ref: DataTableColumns\n          DataTableName:\n            Ref: DataTableName\n        Password:\n          Ref: Password\n        RoleARN: !GetAtt RootRole.Arn\n        S3Configuration:\n          BucketARN:\n            Ref: BucketARN\n          BufferingHints:\n            IntervalInSeconds: '60'\n            SizeInMBs: '5'\n          CompressionFormat: GZIP\n          Prefix:\n            Ref: S3Prefix\n          RoleARN: !GetAtt RootRole.Arn\n          CloudWatchLoggingOptions:\n            Enabled: true\n            LogGroupName:\n              Ref: FireHoseStreamLogGroup\n            LogStreamName:\n              Ref: FirehoseStreamLogS3\n        Username:\n          Ref: Username\n        CloudWatchLoggingOptions:\n          Enabled: true\n          LogGroupName:\n            Ref: FireHoseStreamLogGroup\n          LogStreamName:\n            Ref: FirehoseStreamLogRS\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-event" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-event"
  template_body      = "---\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nDescription: Stack to set up KinesisFirehose to Redshift\r\nParameters:\r\n  BucketARN:\r\n    Description: ARN of S3 Bucket\r\n    Type: String\r\n    Default : arn:aws:s3:::circlek-prod-firehose\r\n  ClusterJDBCURL:\r\n    Description: URL to connect to Redshift cluster\r\n    Type: String\r\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\r\n  Username:\r\n    Description: Database Username\r\n    Type: String\r\n    Default : firehose\r\n  Password:\r\n    Description: Database Password\r\n    Type: String\r\n    NoEcho: 'true'\r\n  DataTableName:\r\n    Description: Name of the redshift table to populate data\r\n    Type: String\r\n    Default : table_name\r\n  DataTableColumns:\r\n    Description: Comma-separated list of column names to populate data\r\n    Type: String\r\n  S3Prefix:\r\n    Description: Name of the Prefix for S3 Bucket\r\n    Type: String\r\n    Default: prefix\r\nResources:\r\n  RootRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          -\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"firehose.amazonaws.com\"\r\n            Action:\r\n              - \"sts:AssumeRole\"\r\n      Policies:\r\n        - PolicyName: kinesis\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - redshift:GetClusterCredentials\r\n                  - redshift:ListSchemas\r\n                  - redshift:ListTables\r\n                  - redshift:ListDatabases\r\n                  - redshift:ExecuteQuery\r\n                  - redshift:FetchResults\r\n                  - redshift:CancelQuery\r\n                  - redshift:DescribeClusters\r\n                  - redshift:DescribeQuery\r\n                  - redshift:DescribeTable\r\n                  - redshift:ViewQueriesFromConsole\r\n                  - redshift:DescribeSavedQueries\r\n                  - redshift:CreateSavedQuery\r\n                  - redshift:DeleteSavedQueries\r\n                  - redshift:ModifySavedQuery\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Action:\r\n                  - s3:*\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                Effect: Allow\r\n                Resource: '*'\r\n  FireHoseStreamLogGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\r\n      RetentionInDays: 7\r\n  FirehoseStreamLogS3:\r\n    Type: AWS::Logs::LogStream\r\n    Properties:\r\n      LogGroupName:\r\n        Ref: FireHoseStreamLogGroup\r\n      LogStreamName: S3Delivery\r\n  FirehoseStreamLogRS:\r\n    Type: AWS::Logs::LogStream\r\n    Properties:\r\n      LogGroupName:\r\n        Ref: FireHoseStreamLogGroup\r\n      LogStreamName: RedshiftDelivery\r\n  KinesisFirehoseDeliveryStream:\r\n    Type: AWS::KinesisFirehose::DeliveryStream\r\n    Properties:\r\n      DeliveryStreamName: !Ref \"AWS::StackName\"\r\n      RedshiftDestinationConfiguration:\r\n        ClusterJDBCURL:\r\n          Ref: ClusterJDBCURL\r\n        CopyCommand:\r\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns GZIP\r\n          DataTableColumns:\r\n            Ref: DataTableColumns\r\n          DataTableName:\r\n            Ref: DataTableName\r\n        Password:\r\n          Ref: Password\r\n        RoleARN: !GetAtt RootRole.Arn\r\n        S3Configuration:\r\n          BucketARN:\r\n            Ref: BucketARN\r\n          BufferingHints:\r\n            IntervalInSeconds: '60'\r\n            SizeInMBs: '5'\r\n          CompressionFormat: GZIP\r\n          Prefix:\r\n            Ref: S3Prefix\r\n          RoleARN: !GetAtt RootRole.Arn\r\n          CloudWatchLoggingOptions:\r\n            Enabled: true\r\n            LogGroupName:\r\n              Ref: FireHoseStreamLogGroup\r\n            LogStreamName:\r\n              Ref: FirehoseStreamLogS3\r\n        Username:\r\n          Ref: Username\r\n        CloudWatchLoggingOptions:\r\n          Enabled: true\r\n          LogGroupName:\r\n            Ref: FireHoseStreamLogGroup\r\n          LogStreamName:\r\n            Ref: FirehoseStreamLogRS\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-impression" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-impression"
  template_body      = "---\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nDescription: Stack to set up KinesisFirehose to Redshift\r\nParameters:\r\n  BucketARN:\r\n    Description: ARN of S3 Bucket\r\n    Type: String\r\n    Default : arn:aws:s3:::circlek-prod-firehose\r\n  ClusterJDBCURL:\r\n    Description: URL to connect to Redshift cluster\r\n    Type: String\r\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\r\n  Username:\r\n    Description: Database Username\r\n    Type: String\r\n    Default : firehose\r\n  Password:\r\n    Description: Database Password\r\n    Type: String\r\n    NoEcho: 'true'\r\n  DataTableName:\r\n    Description: Name of the redshift table to populate data\r\n    Type: String\r\n    Default : table_name\r\n  DataTableColumns:\r\n    Description: Comma-separated list of column names to populate data\r\n    Type: String\r\n  S3Prefix:\r\n    Description: Name of the Prefix for S3 Bucket\r\n    Type: String\r\n    Default: prefix\r\nResources:\r\n  RootRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          -\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"firehose.amazonaws.com\"\r\n            Action:\r\n              - \"sts:AssumeRole\"\r\n      Policies:\r\n        - PolicyName: kinesis\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - redshift:GetClusterCredentials\r\n                  - redshift:ListSchemas\r\n                  - redshift:ListTables\r\n                  - redshift:ListDatabases\r\n                  - redshift:ExecuteQuery\r\n                  - redshift:FetchResults\r\n                  - redshift:CancelQuery\r\n                  - redshift:DescribeClusters\r\n                  - redshift:DescribeQuery\r\n                  - redshift:DescribeTable\r\n                  - redshift:ViewQueriesFromConsole\r\n                  - redshift:DescribeSavedQueries\r\n                  - redshift:CreateSavedQuery\r\n                  - redshift:DeleteSavedQueries\r\n                  - redshift:ModifySavedQuery\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Action:\r\n                  - s3:*\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                Effect: Allow\r\n                Resource: '*'\r\n  FireHoseStreamLogGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\r\n      RetentionInDays: 7\r\n  FirehoseStreamLogS3:\r\n    Type: AWS::Logs::LogStream\r\n    Properties:\r\n      LogGroupName:\r\n        Ref: FireHoseStreamLogGroup\r\n      LogStreamName: S3Delivery\r\n  FirehoseStreamLogRS:\r\n    Type: AWS::Logs::LogStream\r\n    Properties:\r\n      LogGroupName:\r\n        Ref: FireHoseStreamLogGroup\r\n      LogStreamName: RedshiftDelivery\r\n  KinesisFirehoseDeliveryStream:\r\n    Type: AWS::KinesisFirehose::DeliveryStream\r\n    Properties:\r\n      DeliveryStreamName: !Ref \"AWS::StackName\"\r\n      RedshiftDestinationConfiguration:\r\n        ClusterJDBCURL:\r\n          Ref: ClusterJDBCURL\r\n        CopyCommand:\r\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns GZIP\r\n          DataTableColumns:\r\n            Ref: DataTableColumns\r\n          DataTableName:\r\n            Ref: DataTableName\r\n        Password:\r\n          Ref: Password\r\n        RoleARN: !GetAtt RootRole.Arn\r\n        S3Configuration:\r\n          BucketARN:\r\n            Ref: BucketARN\r\n          BufferingHints:\r\n            IntervalInSeconds: '60'\r\n            SizeInMBs: '5'\r\n          CompressionFormat: GZIP\r\n          Prefix:\r\n            Ref: S3Prefix\r\n          RoleARN: !GetAtt RootRole.Arn\r\n          CloudWatchLoggingOptions:\r\n            Enabled: true\r\n            LogGroupName:\r\n              Ref: FireHoseStreamLogGroup\r\n            LogStreamName:\r\n              Ref: FirehoseStreamLogS3\r\n        Username:\r\n          Ref: Username\r\n        CloudWatchLoggingOptions:\r\n          Enabled: true\r\n          LogGroupName:\r\n            Ref: FireHoseStreamLogGroup\r\n          LogStreamName:\r\n            Ref: FirehoseStreamLogRS\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-input" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-input"
  template_body      = "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Stack to set up KinesisFirehose to Redshift\n\nParameters:\n  BucketARN:\n    Description: ARN of S3 Bucket\n    Type: String\n    Default : arn:aws:s3:::circlek-prod-firehose\n  ClusterJDBCURL:\n    Description: URL to connect to Redshift cluster\n    Type: String\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\n  Username:\n    Description: Database Username\n    Type: String\n    Default : firehose\n  Password:\n    Description: Database Password\n    Type: String\n    NoEcho: 'true'\n  DataTableName:\n    Description: Name of the redshift table to populate data\n    Type: String\n    Default : table_name\n  DataTableColumns:\n    Description: Comma-separated list of column names to populate data\n    Type: String\n  S3Prefix:\n    Description: Name of the Prefix for S3 Bucket\n    Type: String\n    Default: prefix\n    \nResources:\n  RootRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"firehose.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: kinesis\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - redshift:GetClusterCredentials\n                  - redshift:ListSchemas\n                  - redshift:ListTables\n                  - redshift:ListDatabases\n                  - redshift:ExecuteQuery\n                  - redshift:FetchResults\n                  - redshift:CancelQuery\n                  - redshift:DescribeClusters\n                  - redshift:DescribeQuery\n                  - redshift:DescribeTable\n                  - redshift:ViewQueriesFromConsole\n                  - redshift:DescribeSavedQueries\n                  - redshift:CreateSavedQuery\n                  - redshift:DeleteSavedQueries\n                  - redshift:ModifySavedQuery\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: '*'\n  FireHoseStreamLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\n      RetentionInDays: 7\n  FirehoseStreamLogS3:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: S3Delivery\n  FirehoseStreamLogRS:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: RedshiftDelivery\n  KinesisFirehoseDeliveryStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties:\n      DeliveryStreamName: !Ref \"AWS::StackName\"\n      RedshiftDestinationConfiguration:\n        ClusterJDBCURL:\n          Ref: ClusterJDBCURL\n        CopyCommand:\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns ROUNDEC GZIP\n          DataTableColumns:\n            Ref: DataTableColumns\n          DataTableName:\n            Ref: DataTableName\n        Password:\n          Ref: Password\n        RoleARN: !GetAtt RootRole.Arn\n        S3Configuration:\n          BucketARN:\n            Ref: BucketARN\n          BufferingHints:\n            IntervalInSeconds: '60'\n            SizeInMBs: '5'\n          CompressionFormat: GZIP\n          Prefix:\n            Ref: S3Prefix\n          RoleARN: !GetAtt RootRole.Arn\n          CloudWatchLoggingOptions:\n            Enabled: true\n            LogGroupName:\n              Ref: FireHoseStreamLogGroup\n            LogStreamName:\n              Ref: FirehoseStreamLogS3\n        Username:\n          Ref: Username\n        CloudWatchLoggingOptions:\n          Enabled: true\n          LogGroupName:\n            Ref: FireHoseStreamLogGroup\n          LogStreamName:\n            Ref: FirehoseStreamLogRS\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-lineitem" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-lineitem"
  template_body      = "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Stack to set up KinesisFirehose to Redshift\n\nParameters:\n  BucketARN:\n    Description: ARN of S3 Bucket\n    Type: String\n    Default : arn:aws:s3:::circlek-prod-firehose\n  ClusterJDBCURL:\n    Description: URL to connect to Redshift cluster\n    Type: String\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\n  Username:\n    Description: Database Username\n    Type: String\n    Default : firehose\n  Password:\n    Description: Database Password\n    Type: String\n    NoEcho: 'true'\n  DataTableName:\n    Description: Name of the redshift table to populate data\n    Type: String\n    Default : table_name\n  DataTableColumns:\n    Description: Comma-separated list of column names to populate data\n    Type: String\n  S3Prefix:\n    Description: Name of the Prefix for S3 Bucket\n    Type: String\n    Default: prefix\n    \nResources:\n  RootRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"firehose.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: kinesis\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - redshift:GetClusterCredentials\n                  - redshift:ListSchemas\n                  - redshift:ListTables\n                  - redshift:ListDatabases\n                  - redshift:ExecuteQuery\n                  - redshift:FetchResults\n                  - redshift:CancelQuery\n                  - redshift:DescribeClusters\n                  - redshift:DescribeQuery\n                  - redshift:DescribeTable\n                  - redshift:ViewQueriesFromConsole\n                  - redshift:DescribeSavedQueries\n                  - redshift:CreateSavedQuery\n                  - redshift:DeleteSavedQueries\n                  - redshift:ModifySavedQuery\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: '*'\n  FireHoseStreamLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\n      RetentionInDays: 7\n  FirehoseStreamLogS3:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: S3Delivery\n  FirehoseStreamLogRS:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: RedshiftDelivery\n  KinesisFirehoseDeliveryStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties:\n      DeliveryStreamName: !Ref \"AWS::StackName\"\n      RedshiftDestinationConfiguration:\n        ClusterJDBCURL:\n          Ref: ClusterJDBCURL\n        CopyCommand:\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns ROUNDEC GZIP\n          DataTableColumns:\n            Ref: DataTableColumns\n          DataTableName:\n            Ref: DataTableName\n        Password:\n          Ref: Password\n        RoleARN: !GetAtt RootRole.Arn\n        S3Configuration:\n          BucketARN:\n            Ref: BucketARN\n          BufferingHints:\n            IntervalInSeconds: '60'\n            SizeInMBs: '5'\n          CompressionFormat: GZIP\n          Prefix:\n            Ref: S3Prefix\n          RoleARN: !GetAtt RootRole.Arn\n          CloudWatchLoggingOptions:\n            Enabled: true\n            LogGroupName:\n              Ref: FireHoseStreamLogGroup\n            LogStreamName:\n              Ref: FirehoseStreamLogS3\n        Username:\n          Ref: Username\n        CloudWatchLoggingOptions:\n          Enabled: true\n          LogGroupName:\n            Ref: FireHoseStreamLogGroup\n          LogStreamName:\n            Ref: FirehoseStreamLogRS\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-message" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-message"
  template_body      = "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Stack to set up KinesisFirehose to Redshift\n\nParameters:\n  BucketARN:\n    Description: ARN of S3 Bucket\n    Type: String\n    Default : arn:aws:s3:::circlek-prod-firehose\n  ClusterJDBCURL:\n    Description: URL to connect to Redshift cluster\n    Type: String\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\n  Username:\n    Description: Database Username\n    Type: String\n    Default : firehose\n  Password:\n    Description: Database Password\n    Type: String\n    NoEcho: 'true'\n  DataTableName:\n    Description: Name of the redshift table to populate data\n    Type: String\n    Default : table_name\n  DataTableColumns:\n    Description: Comma-separated list of column names to populate data\n    Type: String\n  S3Prefix:\n    Description: Name of the Prefix for S3 Bucket\n    Type: String\n    Default: prefix\n    \nResources:\n  RootRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"firehose.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: kinesis\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - redshift:GetClusterCredentials\n                  - redshift:ListSchemas\n                  - redshift:ListTables\n                  - redshift:ListDatabases\n                  - redshift:ExecuteQuery\n                  - redshift:FetchResults\n                  - redshift:CancelQuery\n                  - redshift:DescribeClusters\n                  - redshift:DescribeQuery\n                  - redshift:DescribeTable\n                  - redshift:ViewQueriesFromConsole\n                  - redshift:DescribeSavedQueries\n                  - redshift:CreateSavedQuery\n                  - redshift:DeleteSavedQueries\n                  - redshift:ModifySavedQuery\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: '*'\n  FireHoseStreamLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\n      RetentionInDays: 7\n  FirehoseStreamLogS3:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: S3Delivery\n  FirehoseStreamLogRS:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: RedshiftDelivery\n  KinesisFirehoseDeliveryStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties:\n      DeliveryStreamName: !Ref \"AWS::StackName\"\n      RedshiftDestinationConfiguration:\n        ClusterJDBCURL:\n          Ref: ClusterJDBCURL\n        CopyCommand:\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns ROUNDEC GZIP\n          DataTableColumns:\n            Ref: DataTableColumns\n          DataTableName:\n            Ref: DataTableName\n        Password:\n          Ref: Password\n        RoleARN: !GetAtt RootRole.Arn\n        S3Configuration:\n          BucketARN:\n            Ref: BucketARN\n          BufferingHints:\n            IntervalInSeconds: '60'\n            SizeInMBs: '5'\n          CompressionFormat: GZIP\n          Prefix:\n            Ref: S3Prefix\n          RoleARN: !GetAtt RootRole.Arn\n          CloudWatchLoggingOptions:\n            Enabled: true\n            LogGroupName:\n              Ref: FireHoseStreamLogGroup\n            LogStreamName:\n              Ref: FirehoseStreamLogS3\n        Username:\n          Ref: Username\n        CloudWatchLoggingOptions:\n          Enabled: true\n          LogGroupName:\n            Ref: FireHoseStreamLogGroup\n          LogStreamName:\n            Ref: FirehoseStreamLogRS\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--circleklift-offer" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "circleklift-offer"
  template_body      = "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Stack to set up KinesisFirehose to Redshift\n\nParameters:\n  BucketARN:\n    Description: ARN of S3 Bucket\n    Type: String\n    Default : arn:aws:s3:::circlek-prod-firehose\n  ClusterJDBCURL:\n    Description: URL to connect to Redshift cluster\n    Type: String\n    Default : jdbc:redshift://redshift-cluster-1.clop9hztymwk.us-east-1.redshift.amazonaws.com:5439/warehouse\n  Username:\n    Description: Database Username\n    Type: String\n    Default : firehose\n  Password:\n    Description: Database Password\n    Type: String\n    NoEcho: 'true'\n  DataTableName:\n    Description: Name of the redshift table to populate data\n    Type: String\n    Default : table_name\n  DataTableColumns:\n    Description: Comma-separated list of column names to populate data\n    Type: String\n  S3Prefix:\n    Description: Name of the Prefix for S3 Bucket\n    Type: String\n    Default: prefix\n    \nResources:\n  RootRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub \"$${AWS::StackName}-kinesis-stream-role\"\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          -\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"firehose.amazonaws.com\"\n            Action:\n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: kinesis\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - redshift:GetClusterCredentials\n                  - redshift:ListSchemas\n                  - redshift:ListTables\n                  - redshift:ListDatabases\n                  - redshift:ExecuteQuery\n                  - redshift:FetchResults\n                  - redshift:CancelQuery\n                  - redshift:DescribeClusters\n                  - redshift:DescribeQuery\n                  - redshift:DescribeTable\n                  - redshift:ViewQueriesFromConsole\n                  - redshift:DescribeSavedQueries\n                  - redshift:CreateSavedQuery\n                  - redshift:DeleteSavedQueries\n                  - redshift:ModifySavedQuery\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: '*'\n  FireHoseStreamLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Join [ \"\", [ \"Log-\", !Ref \"AWS::StackName\"] ]\n      RetentionInDays: 7\n  FirehoseStreamLogS3:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: S3Delivery\n  FirehoseStreamLogRS:\n    Type: AWS::Logs::LogStream\n    Properties:\n      LogGroupName:\n        Ref: FireHoseStreamLogGroup\n      LogStreamName: RedshiftDelivery\n  KinesisFirehoseDeliveryStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties:\n      DeliveryStreamName: !Ref \"AWS::StackName\"\n      RedshiftDestinationConfiguration:\n        ClusterJDBCURL:\n          Ref: ClusterJDBCURL\n        CopyCommand:\n          CopyOptions: format as json 'auto' emptyasnull blanksasnull truncatecolumns ROUNDEC GZIP\n          DataTableColumns:\n            Ref: DataTableColumns\n          DataTableName:\n            Ref: DataTableName\n        Password:\n          Ref: Password\n        RoleARN: !GetAtt RootRole.Arn\n        S3Configuration:\n          BucketARN:\n            Ref: BucketARN\n          BufferingHints:\n            IntervalInSeconds: '60'\n            SizeInMBs: '5'\n          CompressionFormat: GZIP\n          Prefix:\n            Ref: S3Prefix\n          RoleARN: !GetAtt RootRole.Arn\n          CloudWatchLoggingOptions:\n            Enabled: true\n            LogGroupName:\n              Ref: FireHoseStreamLogGroup\n            LogStreamName:\n              Ref: FirehoseStreamLogS3\n        Username:\n          Ref: Username\n        CloudWatchLoggingOptions:\n          Enabled: true\n          LogGroupName:\n            Ref: FireHoseStreamLogGroup\n          LogStreamName:\n            Ref: FirehoseStreamLogRS\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--cirk-vpc" {
  disable_rollback   = "false"
  name               = "cirk-vpc"
  template_body      = "Description: >-\r\n  This template deploys a VPC, with a pair of public and private subnets spread\r\n  across two Availability Zones. It deploys an Internet Gateway, with a default\r\n  route on the public subnets. It deploys a pair of NAT Gateways (one in each\r\n  AZ), and default routes for them in the private subnets.\r\nParameters:\r\n  EnvironmentName:\r\n    Description: An environment name that will be prefixed to resource names\r\n    Type: String\r\n  VpcCIDR:\r\n    Description: Please enter the IP range (CIDR notation) for this VPC\r\n    Type: String\r\n    Default: 10.192.0.0/16\r\n  PublicSubnet1CIDR:\r\n    Description: >-\r\n      Please enter the IP range (CIDR notation) for the public subnet in the\r\n      first Availability Zone\r\n    Type: String\r\n    Default: 10.192.10.0/24\r\n  PublicSubnet2CIDR:\r\n    Description: >-\r\n      Please enter the IP range (CIDR notation) for the public subnet in the\r\n      second Availability Zone\r\n    Type: String\r\n    Default: 10.192.11.0/24\r\n  PrivateSubnet1CIDR:\r\n    Description: >-\r\n      Please enter the IP range (CIDR notation) for the private subnet in the\r\n      first Availability Zone\r\n    Type: String\r\n    Default: 10.192.20.0/24\r\n  PrivateSubnet2CIDR:\r\n    Description: >-\r\n      Please enter the IP range (CIDR notation) for the private subnet in the\r\n      second Availability Zone\r\n    Type: String\r\n    Default: 10.192.21.0/24\r\nResources:\r\n  VPC:\r\n    Type: 'AWS::EC2::VPC'\r\n    Properties:\r\n      CidrBlock: !Ref VpcCIDR\r\n      EnableDnsSupport: true\r\n      EnableDnsHostnames: true\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Ref EnvironmentName\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n  InternetGateway:\r\n    Type: 'AWS::EC2::InternetGateway'\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Ref EnvironmentName\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 5b870c20-5d7c-4c83-8aa1-971291ce3a20\r\n  InternetGatewayAttachment:\r\n    Type: 'AWS::EC2::VPCGatewayAttachment'\r\n    Properties:\r\n      InternetGatewayId: !Ref InternetGateway\r\n      VpcId: !Ref VPC\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: f92a000d-dc19-4db6-a464-b4d6bb87cd9a\r\n  PublicSubnet1:\r\n    Type: 'AWS::EC2::Subnet'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      AvailabilityZone: !Select \r\n        - 0\r\n        - !GetAZs ''\r\n      CidrBlock: !Ref PublicSubnet1CIDR\r\n      MapPublicIpOnLaunch: true\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Public Subnet (AZ1)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 0b6d97a0-fa97-4637-85d9-f5a5ba384874\r\n  PublicSubnet2:\r\n    Type: 'AWS::EC2::Subnet'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      AvailabilityZone: !Select \r\n        - 1\r\n        - !GetAZs ''\r\n      CidrBlock: !Ref PublicSubnet2CIDR\r\n      MapPublicIpOnLaunch: true\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Public Subnet (AZ2)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: f2560340-8053-46cf-8c90-d6baa1abb209\r\n  PrivateSubnet1:\r\n    Type: 'AWS::EC2::Subnet'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      AvailabilityZone: !Select \r\n        - 0\r\n        - !GetAZs ''\r\n      CidrBlock: !Ref PrivateSubnet1CIDR\r\n      MapPublicIpOnLaunch: false\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Private Subnet (AZ1)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 7266bf5f-ead0-44d6-befd-840ca1355430\r\n  PrivateSubnet2:\r\n    Type: 'AWS::EC2::Subnet'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      AvailabilityZone: !Select \r\n        - 1\r\n        - !GetAZs ''\r\n      CidrBlock: !Ref PrivateSubnet2CIDR\r\n      MapPublicIpOnLaunch: false\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Private Subnet (AZ2)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 781ab9ce-c761-48e7-b7f9-9bc204f5518e\r\n  NatGateway1EIP:\r\n    Type: 'AWS::EC2::EIP'\r\n    DependsOn: InternetGatewayAttachment\r\n    Properties:\r\n      Domain: vpc\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 1919d7e5-d744-4eb2-9090-2e22e4776acd\r\n  NatGateway2EIP:\r\n    Type: 'AWS::EC2::EIP'\r\n    DependsOn: InternetGatewayAttachment\r\n    Properties:\r\n      Domain: vpc\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: fe137e26-f4b8-407a-a762-431dfb3f6063\r\n  NatGateway1:\r\n    Type: 'AWS::EC2::NatGateway'\r\n    Properties:\r\n      AllocationId: !GetAtt NatGateway1EIP.AllocationId\r\n      SubnetId: !Ref PublicSubnet1\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: e60ad603-7bf9-46cc-8aac-e6eece2d2c5c\r\n  NatGateway2:\r\n    Type: 'AWS::EC2::NatGateway'\r\n    Properties:\r\n      AllocationId: !GetAtt NatGateway2EIP.AllocationId\r\n      SubnetId: !Ref PublicSubnet2\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: e12d2a65-420d-495e-a534-74c9c709b4ae\r\n  PublicRouteTable:\r\n    Type: 'AWS::EC2::RouteTable'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Public Routes'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: e0628709-f81c-4578-bb93-bbf18ed5d700\r\n  DefaultPublicRoute:\r\n    Type: 'AWS::EC2::Route'\r\n    DependsOn: InternetGatewayAttachment\r\n    Properties:\r\n      RouteTableId: !Ref PublicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref InternetGateway\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 1cace25f-a0e2-4771-bc44-e0d86140434c\r\n  PublicSubnet1RouteTableAssociation:\r\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\r\n    Properties:\r\n      RouteTableId: !Ref PublicRouteTable\r\n      SubnetId: !Ref PublicSubnet1\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: c6fc9a0b-c874-4662-860d-b96f588f0a48\r\n  PublicSubnet2RouteTableAssociation:\r\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\r\n    Properties:\r\n      RouteTableId: !Ref PublicRouteTable\r\n      SubnetId: !Ref PublicSubnet2\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 50c511c3-12ae-4b7c-b718-56b0971dc5e7\r\n  PrivateRouteTable1:\r\n    Type: 'AWS::EC2::RouteTable'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Private Routes (AZ1)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 9179394d-b1ba-4ebd-837a-317b48ee09d9\r\n  DefaultPrivateRoute1:\r\n    Type: 'AWS::EC2::Route'\r\n    Properties:\r\n      RouteTableId: !Ref PrivateRouteTable1\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      NatGatewayId: !Ref NatGateway1\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: d7e485fc-b279-4aff-b19c-d5841724b2e0\r\n  PrivateSubnet1RouteTableAssociation:\r\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\r\n    Properties:\r\n      RouteTableId: !Ref PrivateRouteTable1\r\n      SubnetId: !Ref PrivateSubnet1\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 39c3d1d4-dfe5-4ec1-b47f-81e3c514e1d4\r\n  PrivateRouteTable2:\r\n    Type: 'AWS::EC2::RouteTable'\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub '$${EnvironmentName} Private Routes (AZ2)'\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 91c6ddaf-c075-4486-805d-df2680e9828f\r\n  DefaultPrivateRoute2:\r\n    Type: 'AWS::EC2::Route'\r\n    Properties:\r\n      RouteTableId: !Ref PrivateRouteTable2\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      NatGatewayId: !Ref NatGateway2\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: 1b2fa960-e8e6-4c5c-9d04-8ff877fd048a\r\n  PrivateSubnet2RouteTableAssociation:\r\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\r\n    Properties:\r\n      RouteTableId: !Ref PrivateRouteTable2\r\n      SubnetId: !Ref PrivateSubnet2\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: df1176f8-8020-4b70-9830-579379969d7b\r\n  NoIngressSecurityGroup:\r\n    Type: 'AWS::EC2::SecurityGroup'\r\n    Properties:\r\n      GroupName: no-ingress-sg\r\n      GroupDescription: Security group with no ingress rule\r\n      VpcId: !Ref VPC\r\n    Metadata:\r\n      'AWS::CloudFormation::Designer':\r\n        id: b9f3afe6-556d-453e-b965-1f978a8bbdc6\r\nOutputs:\r\n  VPC:\r\n    Description: A reference to the created VPC\r\n    Value: !Ref VPC\r\n  PublicSubnets:\r\n    Description: A list of the public subnets\r\n    Value: !Join \r\n      - ','\r\n      - - !Ref PublicSubnet1\r\n        - !Ref PublicSubnet2\r\n  PrivateSubnets:\r\n    Description: A list of the private subnets\r\n    Value: !Join \r\n      - ','\r\n      - - !Ref PrivateSubnet1\r\n        - !Ref PrivateSubnet2\r\n  PublicSubnet1:\r\n    Description: A reference to the public subnet in the 1st Availability Zone\r\n    Value: !Ref PublicSubnet1\r\n  PublicSubnet2:\r\n    Description: A reference to the public subnet in the 2nd Availability Zone\r\n    Value: !Ref PublicSubnet2\r\n  PrivateSubnet1:\r\n    Description: A reference to the private subnet in the 1st Availability Zone\r\n    Value: !Ref PrivateSubnet1\r\n  PrivateSubnet2:\r\n    Description: A reference to the private subnet in the 2nd Availability Zone\r\n    Value: !Ref PrivateSubnet2\r\n  NoIngressSecurityGroup:\r\n    Description: Security group with no ingress rule\r\n    Value: !Ref NoIngressSecurityGroup\r\nMetadata:\r\n  'AWS::CloudFormation::Designer':\r\n    5b870c20-5d7c-4c83-8aa1-971291ce3a20:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: 60\r\n        'y': 1020\r\n      z: 1\r\n      embeds: []\r\n    cea281f9-7527-4737-88ec-fe2f2ec61729:\r\n      size:\r\n        width: 960\r\n        height: 870\r\n      position:\r\n        x: -390\r\n        'y': -230\r\n      z: 1\r\n      embeds:\r\n        - b9f3afe6-556d-453e-b965-1f978a8bbdc6\r\n        - 91c6ddaf-c075-4486-805d-df2680e9828f\r\n        - 9179394d-b1ba-4ebd-837a-317b48ee09d9\r\n        - e0628709-f81c-4578-bb93-bbf18ed5d700\r\n        - 781ab9ce-c761-48e7-b7f9-9bc204f5518e\r\n        - 7266bf5f-ead0-44d6-befd-840ca1355430\r\n        - f2560340-8053-46cf-8c90-d6baa1abb209\r\n        - 0b6d97a0-fa97-4637-85d9-f5a5ba384874\r\n    b9f3afe6-556d-453e-b965-1f978a8bbdc6:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: -360\r\n        'y': 430\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds: []\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    91c6ddaf-c075-4486-805d-df2680e9828f:\r\n      size:\r\n        width: 240\r\n        height: 240\r\n      position:\r\n        x: 240\r\n        'y': -170\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds:\r\n        - 1b2fa960-e8e6-4c5c-9d04-8ff877fd048a\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    9179394d-b1ba-4ebd-837a-317b48ee09d9:\r\n      size:\r\n        width: 240\r\n        height: 240\r\n      position:\r\n        x: -60\r\n        'y': 130\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds:\r\n        - d7e485fc-b279-4aff-b19c-d5841724b2e0\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    e0628709-f81c-4578-bb93-bbf18ed5d700:\r\n      size:\r\n        width: 240\r\n        height: 240\r\n      position:\r\n        x: -360\r\n        'y': 130\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds:\r\n        - 1cace25f-a0e2-4771-bc44-e0d86140434c\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    781ab9ce-c761-48e7-b7f9-9bc204f5518e:\r\n      size:\r\n        width: 150\r\n        height: 150\r\n      position:\r\n        x: 240\r\n        'y': 340\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds: []\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    df1176f8-8020-4b70-9830-579379969d7b:\r\n      source:\r\n        id: 91c6ddaf-c075-4486-805d-df2680e9828f\r\n      target:\r\n        id: 781ab9ce-c761-48e7-b7f9-9bc204f5518e\r\n    7266bf5f-ead0-44d6-befd-840ca1355430:\r\n      size:\r\n        width: 150\r\n        height: 150\r\n      position:\r\n        x: 240\r\n        'y': 130\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds: []\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    39c3d1d4-dfe5-4ec1-b47f-81e3c514e1d4:\r\n      source:\r\n        id: 9179394d-b1ba-4ebd-837a-317b48ee09d9\r\n      target:\r\n        id: 7266bf5f-ead0-44d6-befd-840ca1355430\r\n    f2560340-8053-46cf-8c90-d6baa1abb209:\r\n      size:\r\n        width: 240\r\n        height: 240\r\n      position:\r\n        x: -60\r\n        'y': -170\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds:\r\n        - e12d2a65-420d-495e-a534-74c9c709b4ae\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    50c511c3-12ae-4b7c-b718-56b0971dc5e7:\r\n      source:\r\n        id: e0628709-f81c-4578-bb93-bbf18ed5d700\r\n      target:\r\n        id: f2560340-8053-46cf-8c90-d6baa1abb209\r\n    0b6d97a0-fa97-4637-85d9-f5a5ba384874:\r\n      size:\r\n        width: 240\r\n        height: 240\r\n      position:\r\n        x: -360\r\n        'y': -170\r\n      z: 2\r\n      parent: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      embeds:\r\n        - e60ad603-7bf9-46cc-8aac-e6eece2d2c5c\r\n      iscontainedinside:\r\n        - cea281f9-7527-4737-88ec-fe2f2ec61729\r\n    c6fc9a0b-c874-4662-860d-b96f588f0a48:\r\n      source:\r\n        id: e0628709-f81c-4578-bb93-bbf18ed5d700\r\n      target:\r\n        id: 0b6d97a0-fa97-4637-85d9-f5a5ba384874\r\n    f92a000d-dc19-4db6-a464-b4d6bb87cd9a:\r\n      source:\r\n        id: cea281f9-7527-4737-88ec-fe2f2ec61729\r\n      target:\r\n        id: 5b870c20-5d7c-4c83-8aa1-971291ce3a20\r\n    1cace25f-a0e2-4771-bc44-e0d86140434c:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: -330\r\n        'y': 190\r\n      z: 3\r\n      parent: e0628709-f81c-4578-bb93-bbf18ed5d700\r\n      embeds: []\r\n      isassociatedwith:\r\n        - 5b870c20-5d7c-4c83-8aa1-971291ce3a20\r\n      iscontainedinside:\r\n        - e0628709-f81c-4578-bb93-bbf18ed5d700\r\n      dependson:\r\n        - f92a000d-dc19-4db6-a464-b4d6bb87cd9a\r\n    fe137e26-f4b8-407a-a762-431dfb3f6063:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: 180\r\n        'y': 1020\r\n      z: 1\r\n      embeds: []\r\n      dependson:\r\n        - f92a000d-dc19-4db6-a464-b4d6bb87cd9a\r\n    e12d2a65-420d-495e-a534-74c9c709b4ae:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: -30\r\n        'y': -110\r\n      z: 3\r\n      parent: f2560340-8053-46cf-8c90-d6baa1abb209\r\n      embeds: []\r\n      iscontainedinside:\r\n        - f2560340-8053-46cf-8c90-d6baa1abb209\r\n    1b2fa960-e8e6-4c5c-9d04-8ff877fd048a:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: 270\r\n        'y': -110\r\n      z: 3\r\n      parent: 91c6ddaf-c075-4486-805d-df2680e9828f\r\n      embeds: []\r\n      isassociatedwith:\r\n        - e12d2a65-420d-495e-a534-74c9c709b4ae\r\n      iscontainedinside:\r\n        - 91c6ddaf-c075-4486-805d-df2680e9828f\r\n    1919d7e5-d744-4eb2-9090-2e22e4776acd:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: 300\r\n        'y': 1020\r\n      z: 1\r\n      embeds: []\r\n      dependson:\r\n        - f92a000d-dc19-4db6-a464-b4d6bb87cd9a\r\n    e60ad603-7bf9-46cc-8aac-e6eece2d2c5c:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: -330\r\n        'y': -110\r\n      z: 3\r\n      parent: 0b6d97a0-fa97-4637-85d9-f5a5ba384874\r\n      embeds: []\r\n      iscontainedinside:\r\n        - 0b6d97a0-fa97-4637-85d9-f5a5ba384874\r\n    d7e485fc-b279-4aff-b19c-d5841724b2e0:\r\n      size:\r\n        width: 60\r\n        height: 60\r\n      position:\r\n        x: -30\r\n        'y': 190\r\n      z: 3\r\n      parent: 9179394d-b1ba-4ebd-837a-317b48ee09d9\r\n      embeds: []\r\n      isassociatedwith:\r\n        - e60ad603-7bf9-46cc-8aac-e6eece2d2c5c\r\n      iscontainedinside:\r\n        - 9179394d-b1ba-4ebd-837a-317b48ee09d9\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--clear-tunnel-connection" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "clear-tunnel-connection"
  template_body      = "---\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nParameters:\r\n\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"sql-runner-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"sql_runner/rckt_cron-0.2.0.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"sql_runner-x-prod\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n\r\n  config:\r\n    Type: \"String\"\r\n    Default: \"REPLACE WITH VALID JSON!!!\"\r\n    Description: \"json config for the lambda\"\r\n\r\nResources:\r\n  SqlRunnerCronLambda:\r\n    Type: AWS::Lambda::Function\r\n    DependsOn:\r\n      - SqlRunnerCronLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: LambdaFunction for SqlRunner\r\n      FunctionName: !Sub $${resourcePrefix}-sqlrunnercron\r\n      Handler: \"io.rcktapp.cron.sql.SqlRunnerLambdaHandler::handleRequest\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"SqlRunnerCronRole.Arn\"\r\n      Timeout: 900\r\n      Runtime: \"java8\"\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref LambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          config: !Ref \"config\"\r\n\r\n  SqlRunnerCronRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}-sql-runner-cron\r\n      AssumeRolePolicyDocument:\r\n          Version: \"2012-10-17\"\r\n          Statement:\r\n            - Action:\r\n                - \"sts:AssumeRole\"\r\n              Effect: \"Allow\"\r\n              Principal:\r\n                Service:\r\n                  - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-sql-runner-cron:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n\r\n  SqlRunnerCronLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-sql-runner-cron-log\r\n      RetentionInDays: 7\r\n\r\n  SqlRunnerCronEvent:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-sql-runner-cron-event\r\n      Description: 'Run the SqlRunnerCron Lambda 8:10am UTC'\r\n      ScheduleExpression: cron(10 8 * * ? *)\r\n      Targets:\r\n        - Id: !Sub $${resourcePrefix}-sql-runner-cron-event-target\r\n          Arn: !GetAtt \"SqlRunnerCronLambda.Arn\"\r\n\r\n  SqlRunnerCronEventPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      SourceArn: !GetAtt \"SqlRunnerCronEvent.Arn\"\r\n      FunctionName: !GetAtt \"SqlRunnerCronLambda.Arn\"\r\n      Action: lambda:InvokeFunction\r\n      Principal: events.amazonaws.com\r\n\r\n  LambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg\r\n      GroupDescription: !Sub \"Security Group for Lambda\"\r\n      VpcId: !Ref vpcId\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--client-logger-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "client-logger-pipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  apiKeys:\n    AllowedValues:\n      - dev123\n      - todoprod\n    Type: String\n\n  certificateArn:\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n    Type: String\n\n  domainName:\n    AllowedValues:\n      - circlekliftdev.com\n      - circleklift.com\n    Type: String\n\n  environment:\n    AllowedValues:\n      - development\n      - production\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_client_logging\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified below\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: client-logger\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - cloudwatch:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/standard:5.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n          - Name: ENVIRONMENT\n            Value: !Ref environment\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"apiKeys\": \"$${apiKeys}\", \"certificateArn\": \"$${certificateArn}\", \"domainName\": \"$${domainName}\", \"environment\": \"$${environment}\", \"resourcePrefix\": \"$${resourcePrefix}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--client-logger-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/client-logger-lambda-role"
  name               = "client-logger-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: Creates serverless resources for client logging service\nParameters:\n  apiKeys:\n    Type: String\n  certificateArn:\n    Type: String\n  domainName:\n    Type: String\n  environment:\n    Type: String\n  resourcePrefix:\n    Type: String\nResources:\n  ApiBasePathMapping:\n    Type: AWS::ApiGateway::BasePathMapping\n    DependsOn:\n    - ApiDomainName\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainName\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n  ApiDomainName:\n    Type: AWS::ApiGateway::DomainName\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Fn::Sub: $${resourcePrefix}.$${domainName}\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n  ApiGateway:\n    Type: AWS::Serverless::Api\n    Properties:\n      Name:\n        Fn::Sub: $${resourcePrefix}-api\n      StageName:\n        Ref: environment\n  LambdaLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 30\n  TobaccoDealsLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: /client/tobacco-deals\n      RetentionInDays: 30\n  Lambda:\n    Type: AWS::Serverless::Function\n    DependsOn:\n    - LambdaLogGroup\n    - TobaccoDealsLogGroup\n    Properties:\n      Description: Client Logger API\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: build/index.main\n      MemorySize: 512\n      Runtime: nodejs12.x\n      Timeout: 30\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/client-logger-pipeline-build/643e5a76b3c8db501d0ecefc36af50b6\n      Environment:\n        Variables:\n          API_KEYS:\n            Ref: apiKeys\n          ENVIRONMENT:\n            Ref: environment\n      Policies:\n      - Version: 2012-10-17\n        Statement:\n        - Effect: Allow\n          Action:\n          - logs:*\n          Resource:\n            Fn::GetAtt:\n            - TobaccoDealsLogGroup\n            - Arn\n      Events:\n        ApiGateway:\n          Type: Api\n          Properties:\n            RestApiId:\n              Ref: ApiGateway\n            Path: /{proxy+}\n            Method: any"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--cors-proxy-prod" {
  capabilities     = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback = "false"
  name             = "cors-proxy-prod"

  tags = {
    STAGE = "prod"
  }

  tags_all = {
    STAGE = "prod"
  }

  template_body      = "{\"AWSTemplateFormatVersion\":\"2010-09-09\",\"Description\":\"The AWS CloudFormation template for this Serverless application\",\"Outputs\":{\"LambdaLambdaFunctionQualifiedArn\":{\"Description\":\"Current Lambda function version\",\"Value\":{\"Ref\":\"LambdaLambdaVersiona5r3TWEf9cIYRi0Q1wxGy29zMPL8lGbSsOPGdMiUA\"}},\"ServerlessDeploymentBucketName\":{\"Value\":{\"Ref\":\"ServerlessDeploymentBucket\"}},\"ServiceEndpoint\":{\"Description\":\"URL of the service endpoint\",\"Value\":{\"Fn::Join\":[\"\",[\"https://\",{\"Ref\":\"ApiGatewayRestApi\"},\".execute-api.us-east-1.\",{\"Ref\":\"AWS::URLSuffix\"},\"/prod\"]]}}},\"Resources\":{\"ApiGatewayDeployment1556044783550\":{\"DependsOn\":[\"ApiGatewayMethodOptions\",\"ApiGatewayMethodGet\",\"ApiGatewayMethodPost\"],\"Properties\":{\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"},\"StageName\":\"prod\"},\"Type\":\"AWS::ApiGateway::Deployment\"},\"ApiGatewayMethodGet\":{\"Properties\":{\"ApiKeyRequired\":false,\"AuthorizationType\":\"NONE\",\"HttpMethod\":\"GET\",\"Integration\":{\"IntegrationHttpMethod\":\"POST\",\"Type\":\"AWS_PROXY\",\"Uri\":{\"Fn::Join\":[\"\",[\"arn:\",{\"Ref\":\"AWS::Partition\"},\":apigateway:\",{\"Ref\":\"AWS::Region\"},\":lambda:path/2015-03-31/functions/\",{\"Fn::GetAtt\":[\"LambdaLambdaFunction\",\"Arn\"]},\"/invocations\"]]}},\"MethodResponses\":[],\"RequestParameters\":{},\"ResourceId\":{\"Fn::GetAtt\":[\"ApiGatewayRestApi\",\"RootResourceId\"]},\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"}},\"Type\":\"AWS::ApiGateway::Method\"},\"ApiGatewayMethodOptions\":{\"Properties\":{\"AuthorizationType\":\"NONE\",\"HttpMethod\":\"OPTIONS\",\"Integration\":{\"ContentHandling\":\"CONVERT_TO_TEXT\",\"IntegrationResponses\":[{\"ResponseParameters\":{\"method.response.header.Access-Control-Allow-Credentials\":\"'false'\",\"method.response.header.Access-Control-Allow-Headers\":\"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'\",\"method.response.header.Access-Control-Allow-Methods\":\"'OPTIONS,POST,GET'\",\"method.response.header.Access-Control-Allow-Origin\":\"'*'\"},\"ResponseTemplates\":{\"application/json\":\"#set($origin = $input.params(\\\"Origin\\\"))\\n#if($origin == \\\"\\\") #set($origin = $input.params(\\\"origin\\\")) #end\\n#if($origin == \\\"*\\\") #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end\"},\"StatusCode\":\"200\"}],\"RequestTemplates\":{\"application/json\":\"{statusCode:200}\"},\"Type\":\"MOCK\"},\"MethodResponses\":[{\"ResponseModels\":{},\"ResponseParameters\":{\"method.response.header.Access-Control-Allow-Credentials\":true,\"method.response.header.Access-Control-Allow-Headers\":true,\"method.response.header.Access-Control-Allow-Methods\":true,\"method.response.header.Access-Control-Allow-Origin\":true},\"StatusCode\":\"200\"}],\"RequestParameters\":{},\"ResourceId\":{\"Fn::GetAtt\":[\"ApiGatewayRestApi\",\"RootResourceId\"]},\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"}},\"Type\":\"AWS::ApiGateway::Method\"},\"ApiGatewayMethodPost\":{\"Properties\":{\"ApiKeyRequired\":false,\"AuthorizationType\":\"NONE\",\"HttpMethod\":\"POST\",\"Integration\":{\"IntegrationHttpMethod\":\"POST\",\"Type\":\"AWS_PROXY\",\"Uri\":{\"Fn::Join\":[\"\",[\"arn:\",{\"Ref\":\"AWS::Partition\"},\":apigateway:\",{\"Ref\":\"AWS::Region\"},\":lambda:path/2015-03-31/functions/\",{\"Fn::GetAtt\":[\"LambdaLambdaFunction\",\"Arn\"]},\"/invocations\"]]}},\"MethodResponses\":[],\"RequestParameters\":{},\"ResourceId\":{\"Fn::GetAtt\":[\"ApiGatewayRestApi\",\"RootResourceId\"]},\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"}},\"Type\":\"AWS::ApiGateway::Method\"},\"ApiGatewayRestApi\":{\"Properties\":{\"EndpointConfiguration\":{\"Types\":[\"EDGE\"]},\"Name\":\"prod-cors-proxy\"},\"Type\":\"AWS::ApiGateway::RestApi\"},\"IamRoleLambdaExecution\":{\"Properties\":{\"AssumeRolePolicyDocument\":{\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"]}}],\"Version\":\"2012-10-17\"},\"Path\":\"/\",\"Policies\":[{\"PolicyDocument\":{\"Statement\":[{\"Action\":[\"logs:CreateLogStream\"],\"Effect\":\"Allow\",\"Resource\":[{\"Fn::Sub\":\"arn:$${AWS::Partition}:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/cors-proxy:*\"}]},{\"Action\":[\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":[{\"Fn::Sub\":\"arn:$${AWS::Partition}:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/cors-proxy:*:*\"}]}],\"Version\":\"2012-10-17\"},\"PolicyName\":{\"Fn::Join\":[\"-\",[\"prod\",\"cors-proxy\",\"lambda\"]]}}],\"RoleName\":{\"Fn::Join\":[\"-\",[\"cors-proxy\",\"prod\",\"us-east-1\",\"lambdaRole\"]]}},\"Type\":\"AWS::IAM::Role\"},\"LambdaLambdaFunction\":{\"DependsOn\":[\"LambdaLogGroup\",\"IamRoleLambdaExecution\"],\"Properties\":{\"Code\":{\"S3Bucket\":{\"Ref\":\"ServerlessDeploymentBucket\"},\"S3Key\":\"serverless/cors-proxy/prod/1556044783445-2019-04-23T18:39:43.445Z/cors-proxy.zip\"},\"Environment\":{\"Variables\":{\"foo\":123}},\"FunctionName\":\"cors-proxy\",\"Handler\":\"handler.corsProxy\",\"MemorySize\":1024,\"Role\":{\"Fn::GetAtt\":[\"IamRoleLambdaExecution\",\"Arn\"]},\"Runtime\":\"nodejs6.10\",\"Timeout\":60},\"Type\":\"AWS::Lambda::Function\"},\"LambdaLambdaPermissionApiGateway\":{\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::GetAtt\":[\"LambdaLambdaFunction\",\"Arn\"]},\"Principal\":{\"Fn::Join\":[\"\",[\"apigateway.\",{\"Ref\":\"AWS::URLSuffix\"}]]},\"SourceArn\":{\"Fn::Join\":[\"\",[\"arn:\",{\"Ref\":\"AWS::Partition\"},\":execute-api:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":\",{\"Ref\":\"ApiGatewayRestApi\"},\"/*/*\"]]}},\"Type\":\"AWS::Lambda::Permission\"},\"LambdaLambdaVersiona5r3TWEf9cIYRi0Q1wxGy29zMPL8lGbSsOPGdMiUA\":{\"DeletionPolicy\":\"Retain\",\"Properties\":{\"CodeSha256\":\"J9E0sl3gCzzSNlP54QFsTzpqf1i8zHs8FLVP9kfsZpM=\",\"FunctionName\":{\"Ref\":\"LambdaLambdaFunction\"}},\"Type\":\"AWS::Lambda::Version\"},\"LambdaLogGroup\":{\"Properties\":{\"LogGroupName\":\"/aws/lambda/cors-proxy\"},\"Type\":\"AWS::Logs::LogGroup\"},\"ServerlessDeploymentBucket\":{\"Properties\":{\"BucketEncryption\":{\"ServerSideEncryptionConfiguration\":[{\"ServerSideEncryptionByDefault\":{\"SSEAlgorithm\":\"AES256\"}}]}},\"Type\":\"AWS::S3::Bucket\"}}}"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--data-sync-notifier-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "data-sync-notifier-pipeline"
  template_body      = "Description: >\r\n  Pipeline, Build, and Deployment of Lambda Service\r\nParameters:\r\n  githubBranch:\r\n    AllowedValues:\r\n      - deploy-dev\r\n      - deploy-prod\r\n    Description: The branch that triggers CodeBuild\r\n    Type: String\r\n\r\n  githubRepo:\r\n    Default: liftck_data_sync_notifier\r\n    Description: The repo name\r\n    Type: String\r\n\r\n  githubToken:\r\n    Description: Token for the user specified above\r\n    NoEcho: true\r\n    Type: String\r\n\r\n  githubUser:\r\n    Default: RocketPartners\r\n    Description: Your repo owner on GitHub\r\n    Type: String\r\n\r\n  resourcePrefix:\r\n    Type: String\r\n    Default: data-sync-notifier\r\n    Description: This will be appended to the beginning of almost all the resources created\r\n\r\n  s3Bucket:\r\n    AllowedValues:\r\n      - cirk-dev-codepipeline-artifacts\r\n      - circlek-prod-codepipeline-artifacts\r\n    Description: Name of s3Bucket to use for codepipeline artifacts\r\n    Type: String\r\n\r\nResources:\r\n  LambdaPipelineRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName: !Sub $${resourcePrefix}-lambda-role\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: cloudformation.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - apigateway:*\r\n                  - codedeploy:*\r\n                  - cloudformation:CreateChangeSet\r\n                  - events:*\r\n                  - ec2:*\r\n                  - sqs:*\r\n                  - sns:*\r\n                  - iam:GetRole\r\n                  - iam:CreateRole\r\n                  - iam:DeleteRole\r\n                  - iam:PutRolePolicy\r\n                  - iam:AttachRolePolicy\r\n                  - iam:DeleteRolePolicy\r\n                  - iam:DetachRolePolicy\r\n                  - iam:PassRole\r\n                  - lambda:*\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - logs:DescribeLogGroups\r\n                  - logs:PutRetentionPolicy\r\n                  - logs:DeleteLogGroup\r\n                  - s3:*\r\n                Resource: '*'\r\n                Effect: Allow\r\n\r\n  CodeBuildServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: '*'\r\n                Effect: Allow\r\n                Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - s3:GetObject\r\n                  - s3:PutObject\r\n                  - s3:GetObjectVersion\r\n\r\n  CodePipelineServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - iam:PassRole\r\n                Resource: '*'\r\n                Effect: Allow\r\n                Condition:\r\n                  StringEqualsIfExists:\r\n                    iam:PassedToService:\r\n                      - cloudformation.amazonaws.com\r\n              - Action:\r\n                  - codedeploy:CreateDeployment\r\n                  - codedeploy:GetApplication\r\n                  - codedeploy:GetApplicationRevision\r\n                  - codedeploy:GetDeployment\r\n                  - codedeploy:GetDeploymentConfig\r\n                  - codedeploy:RegisterApplicationRevision\r\n                Resource: '*'\r\n                Effect: Allow\r\n              - Action:\r\n                  - cloudwatch:*\r\n                  - cloudformation:*\r\n                  - s3:*\r\n                Resource: '*'\r\n                Effect: Allow\r\n              - Action:\r\n                  - lambda:InvokeFunction\r\n                  - lambda:ListFunctions\r\n                Resource: '*'\r\n                Effect: Allow\r\n              - Action:\r\n                  - cloudformation:CreateChangeSet\r\n                  - cloudformation:CreateStack\r\n                  - cloudformation:DeleteChangeSet\r\n                  - cloudformation:DeleteStack\r\n                  - cloudformation:DescribeChangeSet\r\n                  - cloudformation:DescribeStacks\r\n                  - cloudformation:ExecuteChangeSet\r\n                  - cloudformation:UpdateStack\r\n                  - cloudformation:SetStackPolicy\r\n                  - cloudformation:ValidateTemplate\r\n                Resource: '*'\r\n                Effect: Allow\r\n              - Action:\r\n                  - codebuild:BatchGetBuilds\r\n                  - codebuild:StartBuild\r\n                Resource: '*'\r\n                Effect: Allow\r\n              - Effect: Allow\r\n                Action:\r\n                  - cloudformation:ValidateTemplate\r\n                Resource: '*'\r\n\r\n  CodeBuildProject:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/java:openjdk-8\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: true\r\n        EnvironmentVariables:\r\n          - Name: S3_BUCKET\r\n            Value: !Ref s3Bucket\r\n          - Name: S3_BUCKETPREFIX\r\n            Value: !Sub $${resourcePrefix}-pipeline-build\r\n      Name: !Sub $${resourcePrefix}-pipeline-build\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n\r\n  Pipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-pipeline\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3Bucket\r\n      Stages:\r\n        - Name: LambdaSource\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: SourceArtifact\r\n              RunOrder: 1\r\n        - Name: LambdaBuild\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: SourceArtifact\r\n              OutputArtifacts:\r\n                - Name: BuildArtifact\r\n              RunOrder: 1\r\n        - Name: LambdaDeploy\r\n          Actions:\r\n            - Name: CreateUpdateLambda\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CloudFormation\r\n              Configuration:\r\n                ActionMode: CREATE_UPDATE\r\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\r\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\r\n                StackName: !Sub $${resourcePrefix}-stack\r\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\r\n                TemplatePath: BuildArtifact::outputtemplate.yaml\r\n                ParameterOverrides: !Sub '{ \"resourcePrefix\": \"$${resourcePrefix}\" }'\r\n              InputArtifacts:\r\n                - Name: BuildArtifact\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--data-sync-notifier-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/data-sync-notifier-lambda-role"
  name               = "data-sync-notifier-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: Creates serverless resources for Verification Code\nParameters:\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\nResources:\n  Lambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/data-sync-notifier-pipeline-build/96aa7f4700cbf9d4044010da1ebda4b5\n      DeadLetterQueue:\n        TargetArn:\n          Fn::GetAtt:\n          - LambdaDeadLetterQueueSQS\n          - Arn\n        Type: SQS\n      Description: Data Sync Notifier\n      Environment:\n        Variables:\n          DEBUG: true\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: com.liftck.datasyncmodifier.LambdaHandler::handleRequest\n      MemorySize: 1024\n      Runtime: java8\n      Timeout: 15\n    Type: AWS::Serverless::Function\n  LambdaDeadLetterQueueSQS:\n    Properties:\n      QueueName:\n        Fn::Sub: $${resourcePrefix}-lambda-dlq-sqs\n    Type: AWS::SQS::Queue\n  LambdaDeadLetterQueueSQSPolicy:\n    Properties:\n      PolicyDocument:\n        Statement:\n        - Action: SQS:SendMessage\n          Condition:\n            ArnEquals:\n              aws:SourceArn:\n                Ref: Lambda\n          Effect: Allow\n          Principal:\n            Service: sns.amazonaws.com\n          Resource:\n            Fn::GetAtt:\n            - LambdaDeadLetterQueueSQS\n            - Arn\n        Version: '2008-10-17'\n      Queues:\n      - Ref: LambdaDeadLetterQueueSQS\n    Type: AWS::SQS::QueuePolicy\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\n  SNSInvokeLambdaPermission:\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName:\n        Ref: Lambda\n      Principal: sns.amazonaws.com\n      SourceArn:\n        Ref: SNSTopic\n    Type: AWS::Lambda::Permission\n  SNSLambdaSubscription:\n    Properties:\n      Endpoint:\n        Fn::GetAtt:\n        - Lambda\n        - Arn\n      Protocol: lambda\n      RedrivePolicy:\n        deadLetterTargetArn:\n          Fn::GetAtt:\n          - SNSToLambdaDeadLetterQueueSQS\n          - Arn\n      TopicArn:\n        Ref: SNSTopic\n    Type: AWS::SNS::Subscription\n  SNSToLambdaDeadLetterQueueSQS:\n    Properties:\n      QueueName:\n        Fn::Sub: $${resourcePrefix}-sns-to-lambda-dlq-sqs\n    Type: AWS::SQS::Queue\n  SNSToLambdaDeadLetterQueueSQSPolicy:\n    Properties:\n      PolicyDocument:\n        Statement:\n        - Action: SQS:SendMessage\n          Condition:\n            ArnEquals:\n              aws:SourceArn:\n                Ref: SNSTopic\n          Effect: Allow\n          Principal:\n            Service: sns.amazonaws.com\n          Resource:\n            Fn::GetAtt:\n            - SNSToLambdaDeadLetterQueueSQS\n            - Arn\n        Version: '2008-10-17'\n      Queues:\n      - Ref: SNSToLambdaDeadLetterQueueSQS\n    Type: AWS::SQS::QueuePolicy\n  SNSTopic:\n    DependsOn:\n    - Lambda\n    Properties:\n      DisplayName:\n        Fn::Sub: $${resourcePrefix}-sns-topic\n      TopicName:\n        Fn::Sub: $${resourcePrefix}-sns-topic\n    Type: AWS::SNS::Topic\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--franchise-loyalty-club-match-rate" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "franchise-loyalty-club-match-rate"
  template_body      = "Parameters:\n  sscsTobaccoClubIAMUserName:\n    Default: sscs-tobacco-club-s3-user\n    Type: String\n\n  sscsTobaccoClubS3BucketName:\n    AllowedValues:\n      - sscs-tobacco-club-dev\n      - sscs-tobacco-club\n    Type: String\n\nResources:\n  SscsLoyaltyS3Bucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      BucketName: !Ref sscsTobaccoClubS3BucketName\n\n  SscsIAMPolicy:\n    Type: AWS::IAM::Policy\n    DependsOn:\n      - SscsLoyaltyS3Bucket\n      - SscsTobaccoClubIAMUser\n    Properties:\n      PolicyName: sscs-loyalty-bucket-read-access\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n              - s3:ListBucket\n            Resource: !GetAtt SscsLoyaltyS3Bucket.Arn\n          - Effect: Allow\n            Action:\n              - s3:GetObject\n            Resource: !Sub '${SscsLoyaltyS3Bucket.Arn}/*'\n      Users:\n        - !Ref sscsTobaccoClubIAMUserName\n\n  SscsTobaccoClubIAMUser:\n    Type: AWS::IAM::User\n    Properties:\n      UserName: !Ref sscsTobaccoClubIAMUserName\n\n  SscsTobaccoClubS3IAMAccess:\n    Type: AWS::IAM::AccessKey\n    DependsOn:\n      - SscsTobaccoClubIAMUser\n    Properties:\n      Status: Active\n      UserName: !Ref sscsTobaccoClubIAMUserName\n\nOutputs:\n  SscsTobaccoClubS3IAMASecretKey:\n    Description: Secret key to be shared with SSCS\n    Value: !GetAtt SscsTobaccoClubS3IAMAccess.SecretAccessKey\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--generate-barcode-prod" {
  capabilities     = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback = "false"
  name             = "generate-barcode-prod"

  tags = {
    STAGE = "prod"
  }

  tags_all = {
    STAGE = "prod"
  }

  template_body      = "{\"AWSTemplateFormatVersion\":\"2010-09-09\",\"Description\":\"The AWS CloudFormation template for this Serverless application\",\"Outputs\":{\"HandlerLambdaFunctionQualifiedArn\":{\"Description\":\"Current Lambda function version\",\"Value\":{\"Ref\":\"HandlerLambdaVersion803nYX2cPM6luFxHVMYNofuMmmFnTE7rsOWfJOaL74\"}},\"ServerlessDeploymentBucketName\":{\"Value\":\"circlek-prod-serverless-builds\"},\"ServiceEndpoint\":{\"Description\":\"URL of the service endpoint\",\"Value\":{\"Fn::Join\":[\"\",[\"https://\",{\"Ref\":\"ApiGatewayRestApi\"},\".execute-api.us-east-1.\",{\"Ref\":\"AWS::URLSuffix\"},\"/prod\"]]}}},\"Resources\":{\"ApiGatewayDeployment1555529927648\":{\"DependsOn\":[\"ApiGatewayMethodHandlerGet\"],\"Properties\":{\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"},\"StageName\":\"prod\"},\"Type\":\"AWS::ApiGateway::Deployment\"},\"ApiGatewayMethodHandlerGet\":{\"Properties\":{\"ApiKeyRequired\":false,\"AuthorizationType\":\"NONE\",\"HttpMethod\":\"GET\",\"Integration\":{\"IntegrationHttpMethod\":\"POST\",\"Type\":\"AWS_PROXY\",\"Uri\":{\"Fn::Join\":[\"\",[\"arn:\",{\"Ref\":\"AWS::Partition\"},\":apigateway:\",{\"Ref\":\"AWS::Region\"},\":lambda:path/2015-03-31/functions/\",{\"Fn::GetAtt\":[\"HandlerLambdaFunction\",\"Arn\"]},\"/invocations\"]]}},\"MethodResponses\":[],\"RequestParameters\":{},\"ResourceId\":{\"Ref\":\"ApiGatewayResourceHandler\"},\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"}},\"Type\":\"AWS::ApiGateway::Method\"},\"ApiGatewayResourceHandler\":{\"Properties\":{\"ParentId\":{\"Fn::GetAtt\":[\"ApiGatewayRestApi\",\"RootResourceId\"]},\"PathPart\":\"handler\",\"RestApiId\":{\"Ref\":\"ApiGatewayRestApi\"}},\"Type\":\"AWS::ApiGateway::Resource\"},\"ApiGatewayRestApi\":{\"Properties\":{\"EndpointConfiguration\":{\"Types\":[\"EDGE\"]},\"Name\":\"prod-generate-barcode\"},\"Type\":\"AWS::ApiGateway::RestApi\"},\"HandlerLambdaFunction\":{\"DependsOn\":[\"HandlerLogGroup\",\"IamRoleLambdaExecution\"],\"Properties\":{\"Code\":{\"S3Bucket\":\"circlek-prod-serverless-builds\",\"S3Key\":\"serverless/generate-barcode/prod/1555529934387-2019-04-17T19:38:54.387Z/generate-barcode.zip\"},\"FunctionName\":\"generate-barcode-prod-handler\",\"Handler\":\"index.handler\",\"MemorySize\":1024,\"Role\":{\"Fn::GetAtt\":[\"IamRoleLambdaExecution\",\"Arn\"]},\"Runtime\":\"nodejs8.10\",\"Timeout\":6},\"Type\":\"AWS::Lambda::Function\"},\"HandlerLambdaPermissionApiGateway\":{\"Properties\":{\"Action\":\"lambda:InvokeFunction\",\"FunctionName\":{\"Fn::GetAtt\":[\"HandlerLambdaFunction\",\"Arn\"]},\"Principal\":{\"Fn::Join\":[\"\",[\"apigateway.\",{\"Ref\":\"AWS::URLSuffix\"}]]},\"SourceArn\":{\"Fn::Join\":[\"\",[\"arn:\",{\"Ref\":\"AWS::Partition\"},\":execute-api:\",{\"Ref\":\"AWS::Region\"},\":\",{\"Ref\":\"AWS::AccountId\"},\":\",{\"Ref\":\"ApiGatewayRestApi\"},\"/*/*\"]]}},\"Type\":\"AWS::Lambda::Permission\"},\"HandlerLambdaVersion803nYX2cPM6luFxHVMYNofuMmmFnTE7rsOWfJOaL74\":{\"DeletionPolicy\":\"Retain\",\"Properties\":{\"CodeSha256\":\"7BOV5P/vZvOt0a3Gs5hCX0edfzjtlgg3RfjYjsMdkqY=\",\"FunctionName\":{\"Ref\":\"HandlerLambdaFunction\"}},\"Type\":\"AWS::Lambda::Version\"},\"HandlerLogGroup\":{\"Properties\":{\"LogGroupName\":\"/aws/lambda/generate-barcode-prod-handler\"},\"Type\":\"AWS::Logs::LogGroup\"},\"IamRoleLambdaExecution\":{\"Properties\":{\"AssumeRolePolicyDocument\":{\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\"]}}],\"Version\":\"2012-10-17\"},\"Path\":\"/\",\"Policies\":[{\"PolicyDocument\":{\"Statement\":[{\"Action\":[\"logs:CreateLogStream\"],\"Effect\":\"Allow\",\"Resource\":[{\"Fn::Sub\":\"arn:$${AWS::Partition}:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/generate-barcode-prod-handler:*\"}]},{\"Action\":[\"logs:PutLogEvents\"],\"Effect\":\"Allow\",\"Resource\":[{\"Fn::Sub\":\"arn:$${AWS::Partition}:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/generate-barcode-prod-handler:*:*\"}]}],\"Version\":\"2012-10-17\"},\"PolicyName\":{\"Fn::Join\":[\"-\",[\"prod\",\"generate-barcode\",\"lambda\"]]}}],\"RoleName\":{\"Fn::Join\":[\"-\",[\"generate-barcode\",\"prod\",\"us-east-1\",\"lambdaRole\"]]}},\"Type\":\"AWS::IAM::Role\"}}}"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--indexer-codepipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "indexer-codepipeline"
  template_body      = "Description: >\n  Codepipeline Build and Deployment of Lambda Service\nParameters:\n  pipelineName:\n    Type: String\n    Default: indexer\n    Description: The name of the pipeline.\n\n  s3Bucket:\n    Type: String\n    Default: cirk-dev-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub.\n    Default: RocketPartners\n\n  githubRepo:\n    Type: String\n    Default: liftck_indexer\n    Description: The repo name.\n\n  githubBranch:\n    Type: String\n    Default: deploy-dev\n    Description: The branch of the repo to continuously deploy.\n\n  githubToken:\n    Type: String\n    Description: >\n      Token for the user specified above.\n      (https://github.com/settings/tokens)\n      (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\n    NoEcho: true\n\n  sqlUrl:\n      Type: \"String\"\n      Default: \"jdbc:mysql://cirk-dev.cluster-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/lift?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\"\n\n  sqlUser:\n    Type: \"String\"\n    Default: \"cirkadmin\"\n\n  sqlPass:\n    Type: \"String\"\n    NoEcho: true\n\n  sqlroUrl:\n      Type: \"String\"\n      Default: \"jdbc:mysql://cirk-dev.cluster-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/lift?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\"\n\n  sqlroUser:\n    Type: \"String\"\n    Default: \"cirkadmin\"\n\n  sqlroPass:\n    Type: \"String\"\n    NoEcho: true\n\n  elasticUrl:\n    Type: \"String\"\n    Default: \"https://vpc-gen2-tagwitwo77p7nfr6ph3pdchoye.us-east-1.es.amazonaws.com\"\n\n  lambdaName:\n    Type: \"String\"\n    Default: \"indexer-lambda\"\n\n  vpcId:\n    Description: The VPC that the lambda should use\n    Type: AWS::EC2::VPC::Id\n\n  serviceSubnets:\n    Description: \"The subnets the lambda should use (private). Comma separated string without any empty space.\"\n    Type: \"String\"\n    Default: \"subnet-0c19ac58c5589ceba,subnet-09ee6eface6276819\"\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub lambda-role-$${lambdaName}\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                - ec2:*\n                - codedeploy:*\n                - lambda:*\n                - cloudformation:CreateChangeSet\n                - iam:GetRole\n                - iam:CreateRole\n                - iam:DeleteRole\n                - iam:PutRolePolicy\n                - iam:AttachRolePolicy\n                - iam:DeleteRolePolicy\n                - iam:DetachRolePolicy\n                - iam:PassRole\n                - s3:*\n                - events:*\n                - logs:CreateLogGroup\n                - logs:CreateLogStream\n                - logs:PutLogEvents\n                - logs:DescribeLogGroups\n                - logs:PutRetentionPolicy\n                - logs:DeleteLogGroup\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                - codedeploy:CreateDeployment\n                - codedeploy:GetApplication\n                - codedeploy:GetApplicationRevision\n                - codedeploy:GetDeployment\n                - codedeploy:GetDeploymentConfig\n                - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                - cloudwatch:*\n                - s3:*\n                - cloudformation:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                - lambda:InvokeFunction\n                - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                - cloudformation:CreateStack\n                - cloudformation:DeleteStack\n                - cloudformation:DescribeStacks\n                - cloudformation:UpdateStack\n                - cloudformation:CreateChangeSet\n                - cloudformation:DeleteChangeSet\n                - cloudformation:DescribeChangeSet\n                - cloudformation:ExecuteChangeSet\n                - cloudformation:SetStackPolicy\n                - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                - codebuild:BatchGetBuilds\n                - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${pipelineName}-build\n      Name: !Sub $${pipelineName}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref pipelineName\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${pipelineName}-stack\n                ChangeSetName: !Sub $${pipelineName}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"LAMBDANAME\": \"$${lambdaName}\", \"SQLDBURL\": \"$${sqlUrl}\", \"SQLDBUSER\": \"$${sqlUser}\", \"SQLDBPASS\": \"$${sqlPass}\", \"SQLDBROURL\": \"$${sqlroUrl}\", \"SQLDBROUSER\": \"$${sqlroUser}\", \"SQLDBROPASS\": \"$${sqlroPass}\", \"ELASTICDBURL\": \"$${elasticUrl}\", \"VPCID\": \"$${vpcId}\", \"SERVICESUBNETS\": \"$${serviceSubnets}\"}'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${pipelineName}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${pipelineName}-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${pipelineName}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${pipelineName}\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--indexer-lambda-2" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "indexer-lambda-2"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Indexer Lambda Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-dev-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"indexer-lambda/liftck_indexer-0.0.1.zip\"\r\n\r\n  lambdaFunctionName:\r\n    Type: \"String\"\r\n    Default: \"indexer-lambda\"\r\n    Description: \"Name of the lambda function. This will be appended to the beginning of many of the resources that are created\"\r\n\r\n  sqlUrl:\r\n    Type: \"String\"\r\n    Default: \"jdbc:mysql://cirk-dev.cluster-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/lift?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\"\r\n\r\n  sqlUser:\r\n    Type: \"String\"\r\n    Default: \"cirkadmin\"\r\n\r\n  sqlPass:\r\n    Type: \"String\"\r\n    NoEcho: true\r\n\r\n  elasticUrl:\r\n    Type: \"String\"\r\n    Default: \"https://vpc-gen2-tagwitwo77p7nfr6ph3pdchoye.us-east-1.es.amazonaws.com\"\r\n\r\n\r\n\r\nResources:\r\n\r\n  IndexerLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - IndexerLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Triggered from MySql Trigger in IndexLog table\"\r\n      FunctionName: !Ref \"lambdaFunctionName\"\r\n      Handler: \"com.liftck.index.lambda.IndexerLambdaHandler::handleRequest\"\r\n      MemorySize: 1024\r\n      Role: !GetAtt \"IndexerRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 900\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref IndexerLambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          sqldb_driver: 'com.mysql.jdbc.Driver'\r\n          sqldb_url: !Ref \"sqlUrl\"\r\n          sqldb_user: !Ref \"sqlUser\"\r\n          sqldb_pass: !Ref \"sqlPass\"\r\n          elasticdb_url: !Ref \"elasticUrl\"\r\n\r\n  IndexerRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${lambdaFunctionName}\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${lambdaFunctionName}:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'      \r\n\r\n  IndexerLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${lambdaFunctionName}\r\n      RetentionInDays: 30\r\n\r\n  IndexerLambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${lambdaFunctionName}-sg \r\n      GroupDescription: !Sub \"Security Group for Indexer Lambda\"\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${lambdaFunctionName}-sg \r\n\r\nOutputs:\r\n  IndexerLambdaArn:\r\n    Value: !GetAtt \"IndexerLambda.Arn\"\r\n\r\n "
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--indexer-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/lambda-role-indexer-lambda"
  name               = "indexer-stack"
  template_body      = "AWSTemplateFormatVersion: '2010-09-09'\nDescription: liftck_indexer Lambda\nParameters:\n  ELASTICDBURL:\n    Description: ELASTICDBURL\n    Type: String\n  LAMBDANAME:\n    Description: LAMBDA FUNCTION NAME\n    Type: String\n  SERVICESUBNETS:\n    Description: The subnets the lambda should use (private)\n    Type: CommaDelimitedList\n  SQLDBPASS:\n    Description: SQL DB PASSWORD\n    Type: String\n  SQLDBROPASS:\n    Description: SQL DB RO PASSWORD\n    Type: String\n  SQLDBROURL:\n    Description: SQL DB RO URL\n    Type: String\n  SQLDBROUSER:\n    Description: SQL DB RO USERNAME\n    Type: String\n  SQLDBURL:\n    Description: SQL DB URL\n    Type: String\n  SQLDBUSER:\n    Description: SQL DB USERNAME\n    Type: String\n  VPCID:\n    Description: The VPC that the lambda should use\n    Type: AWS::EC2::VPC::Id\nResources:\n  IndexerLambdaSecurityGroup:\n    Properties:\n      GroupDescription:\n        Fn::Sub: Security Group for Indexer Lambda\n      GroupName:\n        Fn::Sub: $${LAMBDANAME}-sg\n      SecurityGroupEgress:\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: '-1'\n      Tags:\n      - Key: Name\n        Value:\n          Fn::Sub: $${LAMBDANAME}-sg\n      VpcId:\n        Ref: VPCID\n    Type: AWS::EC2::SecurityGroup\n  IndexerLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${LAMBDANAME}-lg\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  liftckindexer:\n    DependsOn:\n    - IndexerLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/indexer-build/c13344124ea59aed5a6760ea63f6eaea\n      Description: Triggered from MySql Trigger in IndexLog table\n      Environment:\n        Variables:\n          DEBUG: 'true'\n          elasticdb_url:\n            Ref: ELASTICDBURL\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: SQLDBPASS\n          sqldb_url:\n            Ref: SQLDBURL\n          sqldb_user:\n            Ref: SQLDBUSER\n          sqldbro_driver: com.mysql.jdbc.Driver\n          sqldbro_pass:\n            Ref: SQLDBROPASS\n          sqldbro_url:\n            Ref: SQLDBROURL\n          sqldbro_user:\n            Ref: SQLDBROUSER\n      Events:\n        indexerlambda3:\n          Properties:\n            Schedule: rate(30 minutes)\n          Type: Schedule\n      FunctionName:\n        Ref: LAMBDANAME\n      Handler: com.liftck.index.lambda.IndexerLambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      ReservedConcurrentExecutions: 1\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Ref: IndexerLambdaSecurityGroup\n        SubnetIds:\n          Ref: SERVICESUBNETS\n    Type: AWS::Serverless::Function\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--lift-okta-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "lift-okta-codepipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of okta ECS Service\nParameters:\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: lift_okta_integration\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: lift-okta-integration\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3BucketName:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ecs cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ecs service\n    Default: lift-okta-integration\n\n  ecrRepository:\n    Type: String\n    Description: Name of the ecr repository\n    Default: lift-okta-integration\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n  dockerContainerName:\n    Type: String\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\n    Default: player-lift-okta-integration-container\n\n  springProfile:\n    Type: String\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\n    Default: dev\n    AllowedValues:\n      - dev\n      - prod\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:PutMetricFilter\n                  - ecr:GetAuthorizationToken\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecsService}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-11\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\n          - Name: CF_DOCKER_HUB_USERNAME\n            Value: !Ref dockerHubUsername\n          - Name: CF_DOCKER_HUB_PASSWORD\n            Value: !Ref dockerHubPassword\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Ref dockerContainerName\n          - Name: CF_SPRING_PROFILE\n            Value: !Ref springProfile\n          - Name: S3_BUCKET\n            Value: !Ref s3BucketName\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsService}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--lift-okta-integration" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "lift-okta-integration"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: Creates resources the Pricebook lift okta Service\nParameters:\n  resourcePrefix:\n    Description: This will be prepended to many of the resources created\n    Type: String\n    Default: lift-okta-integration\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: lift-okta-integration\n  instanceCount:\n    AllowedValues:\n      - 1\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n  taskDefinitionImage:\n    Type: String\n    Default: player-lift-okta-integration\n  metricNamespace:\n    Type: String\n    Default: Lift Okta Integration Service\n  healthCheckPath:\n    Description: The health check path\n    Type: String\n    Default: /actuator/health\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - TaskDefinition\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref ecsService\n      DesiredCount: !Ref instanceCount\n      LaunchType: FARGATE  # TODO health\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\n          \n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\n      Priority: 8\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /api/okta/*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 60\n      HealthCheckPath: !Ref healthCheckPath\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${ecsService}\n\n          \n          \n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn:\n      - TaskRole\n    Properties:\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !GetAtt TaskRole.Arn\n      ExecutionRoleArn: !GetAtt TaskRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\n  TaskRole:\n    Type: AWS::IAM::Role\n    DependsOn:\n      - CloudWatchLogsGroup\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                  - 'cloudwatch:PutMetricData'\n                Effect: Allow\n                Resource: '*'\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\n      RetentionInDays: 30"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-cron" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "liftck-cron"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_cron\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: liftck-cron\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  sqlUrl:\n    Type: String\n    Default: jdbc:mysql://cirk-dev.cluster-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/lift?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\n\n  sqlUser:\n    Type: String\n    Default: cirkadmin\n\n  sqlPass:\n    Type: String\n    NoEcho: true\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - dynamodb:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:GetRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: ENV\n            Value: !Ref environment\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"environment\": \"$${environment}\", \"resourcePrefix\": \"$${resourcePrefix}\", \"sqlPass\": \"$${sqlPass}\", \"sqlUser\": \"$${sqlUser}\", \"sqlUrl\": \"$${sqlUrl}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-cron-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/liftck-cron-lambda-role"
  name               = "liftck-cron-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: LiftCK Cron\nMappings:\n  EnvironmentType:\n    dev:\n      masterDataFileS3DataBucket: files.circlekliftdev.com\n      securityGroup: sg-0e70ce312f8483004\n      subnet1: subnet-0c19ac58c5589ceba\n      subnet2: subnet-09ee6eface6276819\n    prod:\n      masterDataFileS3DataBucket: files.circleklift.com\n      securityGroup: sg-065260779a3d2cbda\n      subnet1: subnet-0f592478c6198fa9e\n      subnet2: subnet-017cb385e5acdbec2\nParameters:\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\n  sqlPass:\n    NoEcho: true\n    Type: String\n  sqlUrl:\n    Type: String\n  sqlUser:\n    Type: String\nResources:\n  UpdateActivelyScheduledLambda:\n    DependsOn:\n    - UpdateActivelyScheduledLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/liftck-cron-pipeline-build/c61316d16eb338fd521f5fcbdc44343d\n      Description: Updates Ads' activelyScheduled property once per day\n      Environment:\n        Variables:\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: sqlPass\n          sqldb_url:\n            Ref: sqlUrl\n          sqldb_user:\n            Ref: sqlUser\n      Events:\n        DailyCron:\n          Properties:\n            Enabled: true\n            Name:\n              Fn::Sub: $${resourcePrefix}-activelyscheduled-daily-update-event\n            Schedule: cron(30 7 * * ? *)\n          Type: Schedule\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-activelyscheduled-lambda\n      Handler: com.liftck.cron.activelyscheduled.ActivelyScheduledHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - ec2:DescribeNetworkInterfaces\n          - ec2:CreateNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - ec2:DescribeInstances\n          - ec2:AttachNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  UpdateActivelyScheduledLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-activelyscheduled-lambda\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  UpdateMasterDataFileLambda:\n    DependsOn:\n    - UpdateMasterDataFileLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/liftck-cron-pipeline-build/c61316d16eb338fd521f5fcbdc44343d\n      Description: Creates Master Data File from Item table once a day\n      Environment:\n        Variables:\n          env:\n            Ref: environment\n          masterDataFileUrl:\n            Fn::FindInMap:\n            - EnvironmentType\n            - Ref: environment\n            - masterDataFileS3DataBucket\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: sqlPass\n          sqldb_url:\n            Ref: sqlUrl\n          sqldb_user:\n            Ref: sqlUser\n      Events:\n        DailyCron:\n          Properties:\n            Enabled: true\n            Name:\n              Fn::Sub: $${resourcePrefix}-masterdatafile-daily-update-event\n            Schedule: cron(30 7 * * ? *)\n          Type: Schedule\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-masterdatafile-lambda\n      Handler: com.liftck.cron.masterdatafile.MasterDataFileHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - ec2:DescribeNetworkInterfaces\n          - ec2:CreateNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - ec2:DescribeInstances\n          - ec2:AttachNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          Effect: Allow\n          Resource:\n          - arn:aws:s3:::files.circlekliftdev.com/item_master/*\n          - arn:aws:s3:::files.circleklift.com/item_master/*\n          - arn:aws:s3:::files.circlekliftdev.com/item_master/\n          - arn:aws:s3:::files.circleklift.com/item_master/\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      Runtime: java8\n      Timeout: 180\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  UpdateMasterDataFileLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-masterdatafile-lambda\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  UpdateOnPromoReindexLambda:\n    DependsOn:\n    - UpdateOnPromoReindexLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/liftck-cron-pipeline-build/c61316d16eb338fd521f5fcbdc44343d\n      Description: Adds reindex rows to the IndexLog table for every onPromo ad once\n        a day\n      Environment:\n        Variables:\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: sqlPass\n          sqldb_url:\n            Ref: sqlUrl\n          sqldb_user:\n            Ref: sqlUser\n      Events:\n        DailyCron:\n          Properties:\n            Enabled: true\n            Name:\n              Fn::Sub: $${resourcePrefix}-onpromoreindex-daily-update-event\n            Schedule: cron(30 7 * * ? *)\n          Type: Schedule\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-onpromoreindex-lambda\n      Handler: com.liftck.cron.onpromoreindex.OnPromoReindexHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - ec2:DescribeNetworkInterfaces\n          - ec2:CreateNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - ec2:DescribeInstances\n          - ec2:AttachNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  UpdateOnPromoReindexLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-onpromoreindex-lambda\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-octanebuilder-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "liftck-octanebuilder-prod"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_octane_builder\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: liftck-octanebuilder-prod\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  sqlUrl:\n    Type: String\n    Default: jdbc:mysql://cirk-prod.cluster-cwmhmb7mi9yp.us-east-1.rds.amazonaws.com:3306/lift?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\n\n  sqlUser:\n    Type: String\n    Default: cirkadmin\n\n  sqlPass:\n    Type: String\n    NoEcho: true\n\n  bucketName:\n    Type: String\n    Default: files.circleklift.com\n    \n  tenantCode:\n    Type: String\n    Default: ie\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - dynamodb:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:GetRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n                  - s3:ListBucket\n                  - s3:DeleteObject\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: ENV\n            Value: !Ref environment\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"environment\": \"$${environment}\", \"resourcePrefix\": \"$${resourcePrefix}\", \"sqlPass\": \"$${sqlPass}\", \"sqlUser\": \"$${sqlUser}\", \"sqlUrl\": \"$${sqlUrl}\", \"bucketName\": \"$${bucketName}\", \"tenantCode\": \"$${tenantCode}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-octanebuilder-prod-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/liftck-octanebuilder-prod-lambda-role"
  name               = "liftck-octanebuilder-prod-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: LiftCK Octane builder Lambda\nMappings:\n  EnvironmentType:\n    dev:\n      masterDataFileS3DataBucket: files.circlekliftdev.com\n      securityGroup: sg-0e70ce312f8483004\n      subnet1: subnet-0c19ac58c5589ceba\n      subnet2: subnet-09ee6eface6276819\n    prod:\n      masterDataFileS3DataBucket: files.circleklift.com\n      securityGroup: sg-065260779a3d2cbda\n      subnet1: subnet-0f592478c6198fa9e\n      subnet2: subnet-017cb385e5acdbec2\nParameters:\n  bucketName:\n    Default: files.circleklift.com\n    Type: String\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\n  sqlPass:\n    NoEcho: true\n    Type: String\n  sqlUrl:\n    Default: jdbc:mysql://cirk-prod.cluster-cwmhmb7mi9yp.us-east-1.rds.amazonaws.com:3306/lift\n    Type: String\n  sqlUser:\n    Default: cirkadmin\n    Type: String\n  tenantCode:\n    Default: ie\n    Type: String\nResources:\n  OctaneBuilderLambda:\n    DependsOn:\n    - OctaneBuilderLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/liftck-octanebuilder-prod-pipeline-build/570cf99822de71ac3f28809f8304ff57\n      Description: creating Octane Builder file from pricebook updates files\n      Environment:\n        Variables:\n          bucket_Name:\n            Ref: bucketName\n          env:\n            Ref: environment\n          masterDataFileUrl:\n            Fn::FindInMap:\n            - EnvironmentType\n            - Ref: environment\n            - masterDataFileS3DataBucket\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: sqlPass\n          sqldb_url:\n            Ref: sqlUrl\n          sqldb_user:\n            Ref: sqlUser\n          tenant_Code:\n            Ref: tenantCode\n      Events:\n        octanelambda3:\n          Properties:\n            Enabled: true\n            Schedule: rate(10 minutes)\n          Type: Schedule\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-octanebuilder-lambda\n      Handler: com.liftck.octane.lambda.LambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - ec2:DescribeNetworkInterfaces\n          - ec2:CreateNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - ec2:DescribeInstances\n          - ec2:AttachNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          - s3:ListBucket\n          - s3:DeleteObject\n          Effect: Allow\n          Resource:\n          - arn:aws:s3:::files.circlekliftdev.com/*\n          - arn:aws:s3:::files.circleklift.com/*\n          - arn:aws:s3:::files.circlekliftdev.com/\n          - arn:aws:s3:::files.circleklift.com/\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          - s3:ListBucket\n          - s3:DeleteObject\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      ReservedConcurrentExecutions: 1\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  OctaneBuilderLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-octanebuilder-lambda\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-octanebuilder-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/liftck-octanebuilder-lambda-role"
  name               = "liftck-octanebuilder-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: LiftCK Octane builder Lambda\nMappings:\n  EnvironmentType:\n    dev:\n      masterDataFileS3DataBucket: files.circlekliftdev.com\n      securityGroup: sg-0e70ce312f8483004\n      subnet1: subnet-0c19ac58c5589ceba\n      subnet2: subnet-09ee6eface6276819\n    prod:\n      masterDataFileS3DataBucket: files.circleklift.com\n      securityGroup: sg-065260779a3d2cbda\n      subnet1: subnet-0f592478c6198fa9e\n      subnet2: subnet-017cb385e5acdbec2\nParameters:\n  bucketName:\n    Default: files.circlekliftdev.com\n    Type: String\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\n  sqlPass:\n    NoEcho: true\n    Type: String\n  sqlUrl:\n    Default: jdbc:mysql://cirk-dev.cluster-ro-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/lift\n    Type: String\n  sqlUser:\n    Default: cirkadmin\n    Type: String\n  tenantCode:\n    Default: ie\n    Type: String\nResources:\n  OctaneBuilderLambda:\n    DependsOn:\n    - OctaneBuilderLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/liftck-octanebuilder-pipeline-build/2ddd3efc5aa7a1d2e4dd125b206cc57c\n      Description: creating Octane Builder file from pricebook updates files\n      Environment:\n        Variables:\n          bucket_Name:\n            Ref: bucketName\n          env:\n            Ref: environment\n          masterDataFileUrl:\n            Fn::FindInMap:\n            - EnvironmentType\n            - Ref: environment\n            - masterDataFileS3DataBucket\n          sqldb_driver: com.mysql.jdbc.Driver\n          sqldb_pass:\n            Ref: sqlPass\n          sqldb_url:\n            Ref: sqlUrl\n          sqldb_user:\n            Ref: sqlUser\n          tenant_Code:\n            Ref: tenantCode\n      Events:\n        octanelambda3:\n          Properties:\n            Enabled: true\n            Schedule: rate(10 minutes)\n          Type: Schedule\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-octanebuilder-lambda\n      Handler: com.liftck.octane.lambda.LambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - ec2:DescribeNetworkInterfaces\n          - ec2:CreateNetworkInterface\n          - ec2:DeleteNetworkInterface\n          - ec2:DescribeInstances\n          - ec2:AttachNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          - s3:ListBucket\n          - s3:DeleteObject\n          Effect: Allow\n          Resource:\n          - arn:aws:s3:::files.circlekliftdev.com/*\n          - arn:aws:s3:::files.circleklift.com/*\n          - arn:aws:s3:::files.circlekliftdev.com/\n          - arn:aws:s3:::files.circleklift.com/\n        - Action:\n          - s3:PutObject\n          - s3:GetObject\n          - s3:GetObjectVersion\n          - s3:ListBucket\n          - s3:DeleteObject\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      ReservedConcurrentExecutions: 1\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - securityGroup\n        SubnetIds:\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet1\n        - Fn::FindInMap:\n          - EnvironmentType\n          - Ref: environment\n          - subnet2\n    Type: AWS::Serverless::Function\n  OctaneBuilderLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-octanebuilder-lambda\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--liftck-redshift-etl-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "liftck-redshift-etl-pipeline"
  template_body      = "Description: >\n  CodePipeline for the Rocket ETL Lambda\nParameters:\n  githubBranch:\n    Default: deploy-etl-prod\n    Description: The branch of the repo to continuously deploy.\n    Type: String\n\n  githubRepo:\n    Default: liftck_redshift\n    Description: The repo\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above.\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: The repo owner on GitHub.\n    Type: String\n\n  s3DestinationBucket:\n    Default: circlek-prod-etl\n    Description: Bucket to put files in\n    Type: String\n\n  resourcePrefix:\n    Default: liftck-redshift\n    Description: This will be appended to the beginning of almost all the resources created\n    Type: String\n\n  s3SourceBucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n    Type: String\n\nResources:\n  PipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - codedeploy:*\n                  - lambda:*\n                  - cloudformation:CreateChangeSet\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - s3:*\n                  - events:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                Resource: '*'\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:ListBucket\n                  - s3:PutObject\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_DESTINATION_BUCKET\n            Value: !Ref s3DestinationBucket\n          - Name: S3_SOURCE_BUCKET\n            Value: !Ref s3SourceBucket\n      Name: !Sub $${resourcePrefix}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: '*'\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - s3:*\n                  - cloudformation:*\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:UpdateStack\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: '*'\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref resourcePrefix\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3SourceBucket\n      Stages:\n        - Name: GitHubTrigger\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: CodeBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--lottery-download-to-s3" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "lottery-download-to-s3"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\r\nTransform: 'AWS::Serverless-2016-10-31'\r\nDescription: An AWS Serverless Specification template describing your function.\r\nParameters:\r\n  downloadBucket:\r\n    Type: String\r\n    Default: files.circlekliftdev.com\r\n  downloadFolder:\r\n    Type: String\r\n    Default: dynamic/illinoislottery\r\n    Description: Do NOT include the /* at the end\r\n  sourceFolder:\r\n    Type: String\r\n    Default: 'https://s3.amazonaws.com/static-pages.circlekliftdev.com/illinoislottery/'\r\n    Description: Location of the URL to take a screenshot of\r\n  lambdaBuildBucket:\r\n    Type: String\r\n    Default: circlek-dev-cloudformation-builds\r\n  lambdaBuildFileKey:\r\n    Type: String\r\n    Default: lottery-download-to-s3/lottery-download-to-s3.zip\r\n  resourcePrefix:\r\n    Type: String\r\n    Default: lottery-download-to-s3\r\n    Description: This will be appended to the beginning of almost all the resources created\r\nResources:\r\n  lotterydownloadtos3:\r\n    Type: 'AWS::Lambda::Function'\r\n    Properties:\r\n      FunctionName: !Sub '$${resourcePrefix}'\r\n      Handler: 'io.rcktapp.cron.web.UrlDownloadToS3LambdaHandler::handleRequest'\r\n      Runtime: java8\r\n      Code:\r\n        S3Bucket: !Ref lambdaBuildBucket\r\n        S3Key: !Ref lambdaBuildFileKey\r\n      Description: ''\r\n      MemorySize: 512\r\n      Timeout: 30\r\n      Role: !GetAtt Role.Arn\r\n  Role:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      RoleName: !Sub 'lambda-role-$${resourcePrefix}'\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Action:\r\n              - 'sts:AssumeRole'\r\n            Effect: Allow\r\n            Principal:\r\n              Service:\r\n                - lambda.amazonaws.com\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub >-\r\n                  arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                Effect: Allow\r\n                Resource: '*'\r\n        - PolicyName: lottery-put-s3\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 's3:PutObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${downloadBucket}/$${downloadFolder}/*'\r\n  cron:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: Every 10 minutes regen the illinois lottery image\r\n      Name: lottery-image-every-10-mins\r\n      ScheduleExpression: cron(4/10 * * * ? *)\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn: !GetAtt lotterydownloadtos3.Arn\r\n          Id: megamillions\r\n          Input: !Sub \"{ \\t\\\"config\\\": \\\"{ \\\\\\\"s3Bucket\\\\\\\": \\\\\\\"$${downloadBucket}\\\\\\\", \\\\\\\"s3Path\\\\\\\": \\\\\\\"$${downloadFolder}/megamillions.jpg\\\\\\\", \\\\\\\"url\\\\\\\": \\\\\\\"https://screenshot.circlekliftdev.com/handler?url=$${sourceFolder}megamillions.html\u0026imageType=jpeg\u0026quality=100\u0026fullPage=true\u0026width=1366\\\\\\\" }\\\" \\t}\"\r\n        - Arn: !GetAtt lotterydownloadtos3.Arn\r\n          Id: megamillions-travel\r\n          Input: !Sub \"{ \\t\\\"config\\\": \\\"{ \\\\\\\"s3Bucket\\\\\\\": \\\\\\\"$${downloadBucket}\\\\\\\", \\\\\\\"s3Path\\\\\\\": \\\\\\\"$${downloadFolder}/megamillions_travel.jpg\\\\\\\", \\\\\\\"url\\\\\\\": \\\\\\\"https://screenshot.circlekliftdev.com/handler?url=$${sourceFolder}megamillions_travel.html\u0026imageType=jpeg\u0026quality=100\u0026fullPage=true\u0026width=1366\\\\\\\" }\\\" \\t}\"\r\n        - Arn: !GetAtt lotterydownloadtos3.Arn\r\n          Id: powerball-leisure\r\n          Input: !Sub \"{ \\t\\\"config\\\": \\\"{ \\\\\\\"s3Bucket\\\\\\\": \\\\\\\"$${downloadBucket}\\\\\\\", \\\\\\\"s3Path\\\\\\\": \\\\\\\"$${downloadFolder}/powerball_leisure.jpg\\\\\\\", \\\\\\\"url\\\\\\\": \\\\\\\"https://screenshot.circlekliftdev.com/handler?url=$${sourceFolder}powerball_leisure.html\u0026imageType=jpeg\u0026quality=100\u0026fullPage=true\u0026width=1366\\\\\\\" }\\\" \\t}\"\r\n        - Arn: !GetAtt lotterydownloadtos3.Arn\r\n          Id: powerball\r\n          Input: !Sub \"{ \\t\\\"config\\\": \\\"{ \\\\\\\"s3Bucket\\\\\\\": \\\\\\\"$${downloadBucket}\\\\\\\", \\\\\\\"s3Path\\\\\\\": \\\\\\\"$${downloadFolder}/powerball.jpg\\\\\\\", \\\\\\\"url\\\\\\\": \\\\\\\"https://screenshot.circlekliftdev.com/handler?url=$${sourceFolder}powerball.html\u0026imageType=jpeg\u0026quality=100\u0026fullPage=true\u0026width=1366\\\\\\\" }\\\" \\t}\"\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--loyalty-ecs" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "loyalty-ecs"
  template_body      = "Description: Build \u0026 ECS resources for Loyalty Service\n\nParameters:\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: loyalty\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 2\n\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref ecsService\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\n      Priority: 4\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /$${ecsService}*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Sub /$${ecsService}/health\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${ecsService}\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsService}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - \"logs:CreateLogGroup\"\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - \"ecr:GetAuthorizationToken\"\n                  - \"ecr:BatchCheckLayerAvailability\"\n                  - \"ecr:GetDownloadUrlForLayer\"\n                  - \"ecr:BatchGetImage\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                  - \"cloudwatch:PutMetricData\"\n                  - \"s3:GetObject\"\n                  - \"s3:GetObject*\"\n                  - \"s3:PutObject\"\n                  - \"s3:ListBucket\"\n                  - \"s3:ListAllMyBuckets\"\n                Effect: Allow\n                Resource: \"*\"\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\n      RetentionInDays: 30\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--loyalty-pipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "loyalty-pipeline"
  template_body      = "Description: Codepipeline Build and Deployment of ECS Service\r\n\r\nParameters:\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ECS cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ECS service\r\n    Default: loyalty\r\n\r\n  githubBranch:\r\n    Type: String\r\n    Description: The branch of the repo to continuously deploy.\r\n    AllowedValues:\r\n      - dev\r\n      - master\r\n      - deploy-prod\r\n\r\n  githubRepo:\r\n    Type: String\r\n    Description: The repo name\r\n    Default: liftck_loyalty\r\n\r\n  githubToken:\r\n    Type: String\r\n    NoEcho: true\r\n\r\n  githubUser:\r\n    Type: String\r\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\r\n    Default: RocketPartners\r\n\r\n  springProfile:\r\n    Type: String\r\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\r\n    Default: dev\r\n    AllowedValues:\r\n      - dev\r\n      - prod\r\n\r\n  s3BucketName:\r\n    Type: String\r\n    Description: Name of S3 bucket to use for codepipeline artifacts\r\n    AllowedValues:\r\n      - cirk-dev-codepipeline-artifacts\r\n      - circlek-prod-codepipeline-artifacts\r\n\r\nResources:\r\n  CodeBuildServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - ecr:GetAuthorizationToken\r\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:GetObject\r\n                  - s3:PutObject\r\n                  - s3:GetObjectVersion\r\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecsService}\r\n                Effect: Allow\r\n                Action:\r\n                  - ecr:GetDownloadUrlForLayer\r\n                  - ecr:BatchGetImage\r\n                  - ecr:BatchCheckLayerAvailability\r\n                  - ecr:PutImage\r\n                  - ecr:InitiateLayerUpload\r\n                  - ecr:UploadLayerPart\r\n                  - ecr:CompleteLayerUpload\r\n\r\n  CodePipelineServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource:\r\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:PutObject\r\n                  - s3:GetObject\r\n                  - s3:GetObjectVersion\r\n                  - s3:GetBucketVersioning\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - ecs:DescribeServices\r\n                  - ecs:DescribeTaskDefinition\r\n                  - ecs:DescribeTasks\r\n                  - ecs:ListTasks\r\n                  - ecs:RegisterTaskDefinition\r\n                  - ecs:UpdateService\r\n                  - codebuild:StartBuild\r\n                  - codebuild:BatchGetBuilds\r\n                  - iam:PassRole\r\n\r\n  CodeBuildProject:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/java:openjdk-8\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: true\r\n        EnvironmentVariables:\r\n          - Name: CF_DOCKER_CONTAINER_NAME\r\n            Value: !Sub $${ecsCluster}-$${ecsService}-container\r\n          - Name: CF_REPOSITORY_URI\r\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsService}\r\n          - Name: CF_SERVICE\r\n            Value: !Sub $${ecsService}\r\n          - Name: CF_SPRING_PROFILE\r\n            Value: !Ref springProfile  \r\n      Name: !Sub $${ecsService}-build\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n\r\n  Pipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name: !Sub $${ecsService}-pipeline\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3BucketName\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: App\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: ECS\r\n              Configuration:\r\n                ClusterName: !Ref ecsCluster\r\n                ServiceName: !Ref ecsService\r\n                FileName: imagedefinitions.json\r\n              InputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--loyalty-points-counter-codepipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "loyalty-points-counter-codepipeline"
  template_body      = "Description: >\n  Codepipeline Build and Deployment of Lambda Service\nParameters:\n  apiKeys:\n    AllowedValues:\n      - dev123\n      - 7erzg89b2w8e9yfb2jmkq\n    Description: A comma-separated list of API Keys to be used to authenticate incoming API requests\n    Type: String\n\n  certificateArn:\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n    Type: String\n\n  domainName:\n    AllowedValues:\n      - circlekliftdev.com\n      - circleklift.com\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: This determines the resources to deploy depending on the AWS account\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - dev\n      - master\n    Description: The branch of the repo to continuously deploy.\n    Type: String\n\n  githubRepo:\n    Default: liftck_loyalty_point_counter\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above.\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub.\n    Type: String\n\n  pipelineName:\n    Default: loyalty-points-pipeline\n    Description: The name of the pipeline\n    Type: String\n\n  resourcePrefix:\n    Default: loyalty-points\n    Description: This will be appended to the beginning of almost all the resources created\n    Type: String\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - codedeploy:*\n                  - lambda:*\n                  - cloudformation:CreateChangeSet\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - s3:*\n                  - events:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - dynamodb:*\n                  - apigateway:*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - s3:*\n                  - cloudformation:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:UpdateStack\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${pipelineName}-build\n      Name: !Sub $${pipelineName}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref pipelineName\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yml\n                ParameterOverrides: !Sub '{\"apiKeys\": \"$${apiKeys}\", \"certificateArn\": \"$${certificateArn}\", \"domainName\": \"$${domainName}\", \"environment\": \"$${environment}\",\"resourcePrefix\": \"$${resourcePrefix}\"}'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--loyalty-points-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/loyalty-points-lambda-role"
  name               = "loyalty-points-stack"
  template_body      = "AWSTemplateFormatVersion: '2010-09-09'\nDescription: Creates serverless resources for Loyalty Points Counter\nParameters:\n  apiKeys:\n    Type: String\n  certificateArn:\n    Type: String\n  domainName:\n    Type: String\n  dynamoTable:\n    Default: loyalty-punchcard\n    Type: String\n  environment:\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\nResources:\n  ApiBasePathMapping:\n    DependsOn:\n    - ApiDomainName\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainName\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n    Type: AWS::ApiGateway::BasePathMapping\n  ApiDomainName:\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Fn::Sub: $${resourcePrefix}.$${domainName}\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n    Type: AWS::ApiGateway::DomainName\n  ApiGateway:\n    Properties:\n      Name:\n        Fn::Sub: $${resourcePrefix}-api\n      StageName:\n        Ref: environment\n    Type: AWS::Serverless::Api\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\n  LoyaltyPointsLambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/loyalty-points-pipeline-build/e69b01fe80810d40743d40978f7c686f\n      Description: Loyalty Points Service Api\n      Environment:\n        Variables:\n          API_KEYS:\n            Ref: apiKeys\n          DEBUG: true\n          DYNAMO_TABLE:\n            Ref: dynamoTable\n      Events:\n        LoyaltyPointsApiGateway:\n          Properties:\n            Method: any\n            Path: /{proxy+}\n            RestApiId:\n              Ref: ApiGateway\n          Type: Api\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: com.liftck.loyaltypoints.LoyaltyPointsLambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - dynamodb:BatchGetItem\n          - dynamodb:BatchWriteItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Query\n          - dynamodb:UpdateItem\n          Effect: Allow\n          Resource:\n            Fn::Join:\n            - ''\n            - - 'arn:aws:dynamodb:'\n              - Ref: AWS::Region\n              - ':'\n              - Ref: AWS::AccountId\n              - :table/\n              - Ref: dynamoTable\n        Version: 2012-10-17\n      ReservedConcurrentExecutions: 1\n      Runtime: java8\n      Timeout: 15\n    Type: AWS::Serverless::Function\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--nlb-alb-ip-updater-443" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "nlb-alb-ip-updater-443"
  template_body      = "Transform: 'AWS::Serverless-2016-10-31'\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: >-\r\n  Template of Register Application Load Balancer as IP target for Network Load\r\n  Balancer - This template is in liftck_snooze project - Orginally taken from \r\n  https://aws.amazon.com/blogs/networking-and-content-delivery/using-static-ip-addresses-for-application-load-balancers/\r\n  but then slightly modified\r\nParameters:\r\n  InternalALBDNSName:\r\n    Type: String\r\n    Default: 'internal-player-1741336411.us-east-1.elb.amazonaws.com'\r\n    Description: >-\r\n      Enter the DNS name of your internal Application Load Balancer name.\r\n      e.g. internal-player-1741336411.us-east-1.elb.amazonaws.com\r\n  NLBTargetGroupARN:\r\n    Type: String\r\n    Default: 'arn:aws:elasticloadbalancing:us-east-1:627729951075:targetgroup/player-alb-80/cd1bb10813d0dcfa'\r\n    Description: >-\r\n      Enter the target group ARN which you want the Application Load Balancer to\r\n      be registered to\r\n  S3BucketName:\r\n    Type: String\r\n    Default: 'circlek-dev-nlb-alb-ip-updater'\r\n    Description: >-\r\n      Enter the S3 Bucket name that you want to store Application Load\r\n      Balancer's node IP addresses and where the lambda code zip file lives\r\n  FileKeyPrefix:\r\n    Type: String\r\n    Default: 'player-alb-80'\r\n    Description: >-\r\n      Target group name is a good choice for this parameter. This is the file key prefix \r\n      to use for the stored Application Load Balancer's node IP addresses json file. Needed\r\n      to support bucket re-use across multple instance of this lambda. \r\n  LambdaCodeS3Key:\r\n    Type: String\r\n    Default: 'lambda/populate_NLB_TG_with_ALB_modified.zip'\r\n    Description: >-\r\n      Enter the s3 file key/location to the lambda code zip file\r\n  ALBListenerPort:\r\n    Type: String\r\n    Default: '80'\r\n    Description: Enter the traffic listener port of your internal Application Load Balancer\r\n  MAXDNSLookupPerInvocation:\r\n    Type: Number\r\n    Default: 10\r\n    Description: Please specify the max DNS lookup this function can perform per invocation\r\n  InvocationBeforeDeregistration:\r\n    Type: Number\r\n    Default: 3\r\n    Description: Please specify how many invocations are needed before a IP is deregistered\r\n  CWMetricFlagIPCount:\r\n    Type: String\r\n    Default: 'False'\r\n    AllowedValues:\r\n      - 'True'\r\n      - 'False'\r\n    Description: >-\r\n      Please specify if you want the Lambda function to create a CloudWatch\r\n      metric to track IP count of your internal Application Load Balancer\r\n\r\nResources:\r\n  LambdaFunction:\r\n    Type: 'AWS::Serverless::Function'\r\n    Properties:\r\n      CodeUri:\r\n        Bucket: !Ref S3BucketName\r\n        Key: !Ref LambdaCodeS3Key\r\n      Description: Register Application Load Balancer to Network Load Balancer\r\n      Handler: populate_NLB_TG_with_ALB.lambda_handler\r\n      Timeout: 300\r\n      Role: !GetAtt \r\n        - LambdaIAMRole\r\n        - Arn\r\n      Runtime: python2.7\r\n      Environment:\r\n        Variables:\r\n          ALB_DNS_NAME: !Ref InternalALBDNSName\r\n          NLB_TG_ARN: !Ref NLBTargetGroupARN\r\n          S3_BUCKET: !Ref S3BucketName\r\n          MAX_LOOKUP_PER_INVOCATION: !Ref MAXDNSLookupPerInvocation\r\n          INVOCATIONS_BEFORE_DEREGISTRATION: !Ref InvocationBeforeDeregistration\r\n          CW_METRIC_FLAG_IP_COUNT: !Ref CWMetricFlagIPCount\r\n          ALB_LISTENER: !Ref ALBListenerPort\r\n          FILE_KEY_PREFIX: !Ref FileKeyPrefix\r\n  ScheduledRule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: ScheduledRule\r\n      ScheduleExpression: rate(1 minute)\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn: !GetAtt \r\n            - LambdaFunction\r\n            - Arn\r\n          Id: TargetFunctionV1\r\n    DependsOn:\r\n      - LambdaFunction\r\n  LambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName: !GetAtt \r\n        - LambdaFunction\r\n        - Arn\r\n      Principal: events.amazonaws.com\r\n      Action: 'lambda:InvokeFunction'\r\n      SourceArn: !GetAtt \r\n        - ScheduledRule\r\n        - Arn\r\n  LambdaIAMRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: lambda.amazonaws.com\r\n            Action: 'sts:AssumeRole'\r\n      Path: /\r\n      Policies:\r\n        - PolicyName: Lambda-ALBasTarget\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Sid: LambdaLogging\r\n                Effect: Allow\r\n                Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Resource:\r\n                  - 'arn:aws:logs:*:*:*'\r\n              - Sid: S3\r\n                Action:\r\n                  - 's3:Get*'\r\n                  - 's3:PutObject'\r\n                  - 's3:CreateBucket'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Sid: ELB\r\n                Action:\r\n                  - 'elasticloadbalancing:Describe*'\r\n                  - 'elasticloadbalancing:RegisterTargets'\r\n                  - 'elasticloadbalancing:DeregisterTargets'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Sid: CW\r\n                Action:\r\n                  - 'cloudwatch:putMetricData'\r\n                Effect: Allow\r\n                Resource: '*'\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--nlb-alb-ip-updater-80" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "nlb-alb-ip-updater-80"
  template_body      = "Transform: 'AWS::Serverless-2016-10-31'\r\nAWSTemplateFormatVersion: 2010-09-09\r\nDescription: >-\r\n  Template of Register Application Load Balancer as IP target for Network Load\r\n  Balancer - This template is in liftck_snooze project - Orginally taken from \r\n  https://aws.amazon.com/blogs/networking-and-content-delivery/using-static-ip-addresses-for-application-load-balancers/\r\n  but then slightly modified\r\nParameters:\r\n  InternalALBDNSName:\r\n    Type: String\r\n    Default: 'internal-player-1741336411.us-east-1.elb.amazonaws.com'\r\n    Description: >-\r\n      Enter the DNS name of your internal Application Load Balancer name.\r\n      e.g. internal-player-1741336411.us-east-1.elb.amazonaws.com\r\n  NLBTargetGroupARN:\r\n    Type: String\r\n    Default: 'arn:aws:elasticloadbalancing:us-east-1:627729951075:targetgroup/player-alb-80/cd1bb10813d0dcfa'\r\n    Description: >-\r\n      Enter the target group ARN which you want the Application Load Balancer to\r\n      be registered to\r\n  S3BucketName:\r\n    Type: String\r\n    Default: 'circlek-dev-nlb-alb-ip-updater'\r\n    Description: >-\r\n      Enter the S3 Bucket name that you want to store Application Load\r\n      Balancer's node IP addresses and where the lambda code zip file lives\r\n  FileKeyPrefix:\r\n    Type: String\r\n    Default: 'player-alb-80'\r\n    Description: >-\r\n      Target group name is a good choice for this parameter. This is the file key prefix \r\n      to use for the stored Application Load Balancer's node IP addresses json file. Needed\r\n      to support bucket re-use across multple instance of this lambda. \r\n  LambdaCodeS3Key:\r\n    Type: String\r\n    Default: 'lambda/populate_NLB_TG_with_ALB_modified.zip'\r\n    Description: >-\r\n      Enter the s3 file key/location to the lambda code zip file\r\n  ALBListenerPort:\r\n    Type: String\r\n    Default: '80'\r\n    Description: Enter the traffic listener port of your internal Application Load Balancer\r\n  MAXDNSLookupPerInvocation:\r\n    Type: Number\r\n    Default: 10\r\n    Description: Please specify the max DNS lookup this function can perform per invocation\r\n  InvocationBeforeDeregistration:\r\n    Type: Number\r\n    Default: 3\r\n    Description: Please specify how many invocations are needed before a IP is deregistered\r\n  CWMetricFlagIPCount:\r\n    Type: String\r\n    Default: 'False'\r\n    AllowedValues:\r\n      - 'True'\r\n      - 'False'\r\n    Description: >-\r\n      Please specify if you want the Lambda function to create a CloudWatch\r\n      metric to track IP count of your internal Application Load Balancer\r\n\r\nResources:\r\n  LambdaFunction:\r\n    Type: 'AWS::Serverless::Function'\r\n    Properties:\r\n      CodeUri:\r\n        Bucket: !Ref S3BucketName\r\n        Key: !Ref LambdaCodeS3Key\r\n      Description: Register Application Load Balancer to Network Load Balancer\r\n      Handler: populate_NLB_TG_with_ALB.lambda_handler\r\n      Timeout: 300\r\n      Role: !GetAtt \r\n        - LambdaIAMRole\r\n        - Arn\r\n      Runtime: python2.7\r\n      Environment:\r\n        Variables:\r\n          ALB_DNS_NAME: !Ref InternalALBDNSName\r\n          NLB_TG_ARN: !Ref NLBTargetGroupARN\r\n          S3_BUCKET: !Ref S3BucketName\r\n          MAX_LOOKUP_PER_INVOCATION: !Ref MAXDNSLookupPerInvocation\r\n          INVOCATIONS_BEFORE_DEREGISTRATION: !Ref InvocationBeforeDeregistration\r\n          CW_METRIC_FLAG_IP_COUNT: !Ref CWMetricFlagIPCount\r\n          ALB_LISTENER: !Ref ALBListenerPort\r\n          FILE_KEY_PREFIX: !Ref FileKeyPrefix\r\n  ScheduledRule:\r\n    Type: 'AWS::Events::Rule'\r\n    Properties:\r\n      Description: ScheduledRule\r\n      ScheduleExpression: rate(1 minute)\r\n      State: ENABLED\r\n      Targets:\r\n        - Arn: !GetAtt \r\n            - LambdaFunction\r\n            - Arn\r\n          Id: TargetFunctionV1\r\n    DependsOn:\r\n      - LambdaFunction\r\n  LambdaInvokePermission:\r\n    Type: 'AWS::Lambda::Permission'\r\n    Properties:\r\n      FunctionName: !GetAtt \r\n        - LambdaFunction\r\n        - Arn\r\n      Principal: events.amazonaws.com\r\n      Action: 'lambda:InvokeFunction'\r\n      SourceArn: !GetAtt \r\n        - ScheduledRule\r\n        - Arn\r\n  LambdaIAMRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: lambda.amazonaws.com\r\n            Action: 'sts:AssumeRole'\r\n      Path: /\r\n      Policies:\r\n        - PolicyName: Lambda-ALBasTarget\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Sid: LambdaLogging\r\n                Effect: Allow\r\n                Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Resource:\r\n                  - 'arn:aws:logs:*:*:*'\r\n              - Sid: S3\r\n                Action:\r\n                  - 's3:Get*'\r\n                  - 's3:PutObject'\r\n                  - 's3:CreateBucket'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Sid: ELB\r\n                Action:\r\n                  - 'elasticloadbalancing:Describe*'\r\n                  - 'elasticloadbalancing:RegisterTargets'\r\n                  - 'elasticloadbalancing:DeregisterTargets'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              - Sid: CW\r\n                Action:\r\n                  - 'cloudwatch:putMetricData'\r\n                Effect: Allow\r\n                Resource: '*'\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--one-time-code" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "one-time-code"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"One Time Code service Lambda/API Gateway\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-dev-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"one-time-code/cirk_services_onetimecode-0.0.1.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"one-time-code\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n\r\n  apiGatewayStageName:\r\n    Type: \"String\"\r\n    AllowedPattern: \"^[a-z0-9]+$\"\r\n    Default: \"prod\"\r\n\r\n  apiGatewayDomainName:\r\n    Type: \"String\"\r\n    Default: \"one-time-code.circlekliftdev.com\"\r\n\r\n  apiGatewayCertificateArn:\r\n    Type: \"String\"\r\n    Default: \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\" \r\n\r\n  apiKeys:\r\n    Type: \"String\"\r\n    NoEcho: true\r\n    Description: \"A comma-separated list of API Keys to be used to authenticate incoming API requests\"\r\n\r\n  dbUrl:\r\n    Type: \"String\"\r\n    Description: \"database connection url\"\r\n    Default: \"jdbc:mysql://cirk-dev.cluster-cju8wmbjllc0.us-east-1.rds.amazonaws.com:3306/cirk_services?autoReconnect=true\u0026useUnicode=yes\u0026characterEncoding=UTF-8\u0026useSSL=false\u0026zeroDateTimeBehavior=convertToNull\"\r\n\r\n  dbUser:\r\n    Type: \"String\"\r\n    Description: \"database user\"\r\n    Default: \"cirkadmin\"\r\n\r\n  dbPass:\r\n    Type: \"String\"\r\n    NoEcho: true\r\n    Description: \"database password\"\r\n\r\n# ckmarketing cert arn:    arn:aws:acm:us-east-1:713044078609:certificate/e07269dc-c92d-411a-9890-906a726a98e1\r\n# circle k dev cert arn:   *.liftck.com            arn:aws:acm:us-east-1:627729951075:certificate/2d487163-01f8-4296-8d32-ea8e4b483273\r\n# circle k dev cert arn:   *.circlekliftdev.com    arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\r\n# circle k prod cert arn:  arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\r\n\r\n\r\n\r\nResources:\r\n\r\n  OneTimeCodeApiLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - OneTimeCodeApiLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"One Time Code Service Api\"\r\n      FunctionName: !Sub $${resourcePrefix}-lambda\r\n      Handler: \"com.cirk.services.onetimecode.OneTimeCodeLambdaHandler::handleRequest\"\r\n      MemorySize: 1024\r\n      Role: !GetAtt \"OneTimeCodeApiRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 90\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref OneTimeCodeApiSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          api_keys: !Ref \"apiKeys\"\r\n          db_driver: 'com.mysql.jdbc.Driver'\r\n          db_url: !Ref \"dbUrl\"\r\n          db_user: !Ref \"dbUser\"\r\n          db_pass: !Ref \"dbPass\"\r\n\r\n\r\n  OneTimeCodeApiSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg\r\n      GroupDescription: !Sub \"Security Group for One Time Code Service API Lambda\"\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg\r\n\r\n  OneTimeCodeApiRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-lambda:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n\r\n  OneTimeCodeApiLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-lambda\r\n      RetentionInDays: 7\r\n\r\n  OneTimeCodeApiPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: !GetAtt \"OneTimeCodeApiLambda.Arn\"\r\n      Principal: \"apigateway.amazonaws.com\"\r\n      SourceArn: !Sub \"arn:aws:execute-api:$${AWS::Region}:$${AWS::AccountId}:$${OneTimeCodeApiGateway}/*/*\"\r\n\r\n  OneTimeCodeApiGateway:\r\n    Type: \"AWS::ApiGateway::RestApi\"\r\n    Properties:\r\n      Name: !Sub \"$${resourcePrefix}-api-gateway\"\r\n      Description: \"One Time Code Service Api Gateway\"\r\n\r\n  OneTimeCodeApiResource:\r\n    Type: \"AWS::ApiGateway::Resource\"\r\n    Properties:\r\n      RestApiId: !Ref OneTimeCodeApiGateway\r\n      ParentId: !GetAtt OneTimeCodeApiGateway.RootResourceId\r\n      PathPart: '{proxy+}'\r\n\r\n  OneTimeCodeApiMethod:\r\n    Type: \"AWS::ApiGateway::Method\"\r\n    Properties:\r\n      AuthorizationType: \"NONE\"\r\n      HttpMethod: \"ANY\"\r\n      Integration:\r\n        IntegrationHttpMethod: \"POST\"\r\n        Type: \"AWS_PROXY\"\r\n        Uri: !Sub\r\n          - \"arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/$${lambdaArn}/invocations\"\r\n          - lambdaArn: !GetAtt \"OneTimeCodeApiLambda.Arn\"\r\n      ResourceId: !Ref OneTimeCodeApiResource\r\n      RestApiId: !Ref OneTimeCodeApiGateway\r\n\r\n  OneTimeCodeApiDeployment:\r\n    Type: \"AWS::ApiGateway::Deployment\"\r\n    DependsOn:\r\n      - \"OneTimeCodeApiMethod\"\r\n    Properties:\r\n      RestApiId: !Ref OneTimeCodeApiGateway\r\n      StageName: !Ref \"apiGatewayStageName\"\r\n\r\n  OneTimeCodeApiDomain:\r\n    Type: 'AWS::ApiGateway::DomainName'\r\n    Properties:\r\n      DomainName: !Ref \"apiGatewayDomainName\"\r\n      EndpointConfiguration:\r\n        Types:\r\n          - REGIONAL\r\n      RegionalCertificateArn: !Ref \"apiGatewayCertificateArn\"\r\n\r\n  OneTimeCodeApiDomainMapping:\r\n    Type: 'AWS::ApiGateway::BasePathMapping'\r\n    DependsOn:\r\n      - \"OneTimeCodeApiDeployment\"\r\n    Properties:\r\n      DomainName: !Ref OneTimeCodeApiDomain\r\n      RestApiId: !Ref OneTimeCodeApiGateway\r\n      BasePath: ''\r\n      Stage: !Ref \"apiGatewayStageName\"\r\n\r\n\r\n\r\nOutputs:\r\n  OneTimeCodeApiLambda:\r\n    Value: !GetAtt \"OneTimeCodeApiLambda.Arn\"  \r\n\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-api" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "player-api"
  template_body      = "Description: >\r\n  Setup ALB and portal-api service on ECS. We are calling it api within AWS, but it is portal-api in git.\r\n  This same template is also used for the player-api, since it runs the same code in a different cluster.\r\n  Also, the player uses an internal ALB with an externam NLB (NLB is not created it this template)\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the ECS cluster is deployed to\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  ecsCluster:\r\n    Description: Please provide the ECS Cluster ID that this service should run on\r\n    Type: String\r\n    Default: portal\r\n\r\n  instanceCount:\r\n    Description: How many instances of this task should we run across our cluster?\r\n    Type: Number\r\n    Default: 2\r\n\r\n  rolePrefix:\r\n    Description: String to prefix the role names\r\n    Type: String\r\n    Default: cirk\r\n\r\n  serviceName:\r\n    Description: Name of the service\r\n    Type: String\r\n    Default: api \r\n\r\n  serviceImage:\r\n    Description: Docker image for the service\r\n    Type: String\r\n    Default: 627729951075.dkr.ecr.us-east-1.amazonaws.com/portal-api:latest\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the service should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  loadbalancerName:\r\n    Description: The name to use for the load balancer\r\n    Type: String\r\n    Default: portal\r\n\r\n  loadbalancerScheme:\r\n    Description: Is the loadbalancer internet-facing or internal\r\n    Type: String\r\n    Default: internet-facing\r\n\r\n  loadbalancerSubnets:\r\n    Description: \"The subnets the loadbalancer should use (internet-facing use public / internal use private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  listenerPath:\r\n    Description: The path to register with the Application Load Balancer\r\n    Type: String\r\n    Default: /api*\r\n\r\n  sslCertificateArn:\r\n    Type: \"String\"\r\n    Default: \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  \r\n\r\n    # circlekliftdev.com\r\n    #  - circle k dev cert arn:  arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\r\n\r\n    # liftck.com\r\n    #  - ckmarketing cert arn:    arn:aws:acm:us-east-1:713044078609:certificate/e07269dc-c92d-411a-9890-906a726a98e1\r\n    #  - circle k dev cert arn:   arn:aws:acm:us-east-1:627729951075:certificate/2d487163-01f8-4296-8d32-ea8e4b483273\r\n    #  - circle k prod cert arn:  arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\r\n\r\n  healthCheckPath:\r\n    Description: The health check path \r\n    Type: String\r\n    Default: /api/lift/snooze/health  \r\n\r\n\r\nResources:\r\n  Service:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - ListenerRulePort443\r\n    Properties:\r\n      Cluster: !Ref ecsCluster\r\n      ServiceName: !Ref serviceName\r\n      DesiredCount: !Ref instanceCount\r\n      HealthCheckGracePeriodSeconds: 120\r\n      LaunchType: FARGATE\r\n      TaskDefinition: !Ref TaskDefinition\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration: \r\n          AssignPublicIp: DISABLED\r\n          Subnets: !Ref serviceSubnets\r\n          SecurityGroups:\r\n            - !Ref ServiceSecurityGroup\r\n      LoadBalancers:\r\n        - ContainerName: !Sub $${ecsCluster}-$${serviceName}-container\r\n          ContainerPort: 8080\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  ServiceSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub ecs-$${ecsCluster}-$${serviceName}\r\n      GroupDescription: !Sub \"Security Group for ECS service $${serviceName} in cluster $${ecsCluster}\"\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupIngress:\r\n        - IpProtocol: tcp\r\n          FromPort: 8080\r\n          ToPort: 8080\r\n          CidrIp: \"0.0.0.0/0\"\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub ecs-$${ecsCluster}-$${serviceName}\r\n\r\n  TaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    Properties:\r\n      Family: !Sub $${ecsCluster}-$${serviceName}-task\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      NetworkMode: awsvpc\r\n      Cpu: 1024\r\n      Memory: 2048\r\n      TaskRoleArn: !Ref TaskRole\r\n      ExecutionRoleArn: !Ref TaskRole\r\n      ContainerDefinitions:\r\n        - Name: !Sub $${ecsCluster}-$${serviceName}-container\r\n          Image: !Ref serviceImage\r\n          Cpu: 1024\r\n          Memory: 2048\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: 8080\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-group: !Ref CloudWatchLogsGroup\r\n              awslogs-region: !Ref AWS::Region\r\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${serviceName}\r\n\r\n  CloudWatchLogsGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${serviceName}\r\n      RetentionInDays: 30\r\n\r\n  LoadBalancer:\r\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\r\n    Properties:\r\n      Name: !Ref loadbalancerName\r\n      Scheme: !Ref loadbalancerScheme\r\n      Subnets: !Ref loadbalancerSubnets\r\n      SecurityGroups:\r\n        - !Ref ALBSecurityGroup\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Ref loadbalancerName\r\n\r\n  ALBSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub alb-$${loadbalancerName}\r\n      GroupDescription: !Sub \"Security Group for the $${loadbalancerName} ALB\"\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupIngress:\r\n        - IpProtocol: tcp\r\n          FromPort: 80\r\n          ToPort: 80\r\n          CidrIp: \"0.0.0.0/0\"\r\n        - IpProtocol: tcp\r\n          FromPort: 443\r\n          ToPort: 443\r\n          CidrIp: \"0.0.0.0/0\"  \r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub alb-$${loadbalancerName}\r\n\r\n  ALBListenerPort80:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      LoadBalancerArn: !Ref LoadBalancer\r\n      Port: 80\r\n      Protocol: HTTP\r\n      DefaultActions:\r\n        - Type: redirect\r\n          RedirectConfig: \r\n              Host: \"#{host}\"\r\n              Path: \"/#{path}\"\r\n              Port: 443\r\n              Protocol: \"HTTPS\"\r\n              Query: \"#{query}\"\r\n              StatusCode: HTTP_302\r\n\r\n  ALBListenerPort443:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      LoadBalancerArn: !Ref LoadBalancer\r\n      Port: 443\r\n      Protocol: HTTPS\r\n      Certificates:\r\n      - CertificateArn: !Ref sslCertificateArn\r\n      DefaultActions:\r\n        - Type: fixed-response\r\n          FixedResponseConfig:\r\n            ContentType: \"text/plain\"\r\n            MessageBody: \"NOT FOUND - ALB DEFAULT MESSAGE\"\r\n            StatusCode: 404\r\n\r\n  ListenerRulePort443:\r\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\r\n    Properties:\r\n      ListenerArn: !Ref ALBListenerPort443\r\n      Priority: 2\r\n      Conditions:\r\n        - Field: path-pattern\r\n          Values:\r\n            - !Ref listenerPath\r\n      Actions:\r\n        - Type: forward\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  TargetGroup:\r\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${serviceName}\r\n      VpcId: !Ref vpcId\r\n      Port: 80\r\n      Protocol: HTTP\r\n      TargetType: ip\r\n      Matcher:\r\n        HttpCode: 200-299\r\n      HealthCheckIntervalSeconds: 10\r\n      HealthCheckPath: !Ref healthCheckPath\r\n      HealthCheckProtocol: HTTP\r\n      HealthCheckTimeoutSeconds: 5\r\n      HealthyThresholdCount: 2\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${ecsCluster}-$${serviceName}\r\n\r\n  TaskRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${serviceName}-task-role\r\n      AssumeRolePolicyDocument: |\r\n        {\r\n            \"Statement\": [{\r\n                \"Effect\": \"Allow\",\r\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\r\n                \"Action\": [ \"sts:AssumeRole\" ]\r\n            }]\r\n        }\r\n      Policies:\r\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${serviceName}-task-role-policy\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                Effect: Allow\r\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\r\n              - Action:\r\n                  - 'ecr:GetAuthorizationToken'\r\n                  - 'ecr:BatchCheckLayerAvailability'\r\n                  - 'ecr:GetDownloadUrlForLayer'\r\n                  - 'ecr:BatchGetImage'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'dynamodb:BatchGetItem'\r\n                  - 'dynamodb:BatchWriteItem'\r\n                  - 'dynamodb:PutItem'\r\n                  - 'dynamodb:DescribeTable'\r\n                  - 'dynamodb:DeleteItem'\r\n                  - 'dynamodb:GetItem'\r\n                  - 'dynamodb:Scan'\r\n                  - 'dynamodb:Query'\r\n                  - 'dynamodb:UpdateItem'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObject*'\r\n                  - 's3:PutObject'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                  - 'firehose:PutRecord'\r\n                  - 'firehose:PutRecordBatch'\r\n                Effect: Allow\r\n                Resource: '*'  \r\n  "
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-api-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-api-codepipeline"
  template_body      = "Description: >\n  Codepipeline Build and Deployment of ECS Service\n\nParameters:\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\n    Default: RocketPartners\n\n  githubRepo:\n    Type: String\n    Default: liftck_snooze\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\n\n  githubBranch:\n    Type: String\n    Default: deploy-portal-api-stage\n    Description: The branch of the repo to continuously deploy. (deploy-portal-api-stage)\n\n  githubToken:\n    Type: String\n    Description: >\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\n    NoEcho: true\n\n  s3BucketName:\n    Type: String\n    Description: Name of s3 bucket to use for codepipeline artifacts\n    Default: cirk-dev-codepipeline-artifacts\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ecs cluster\n    Default: portal\n\n  ecsService:\n    Type: String\n    Description: Name of the ecs service\n    Default: api\n\n  ecrRepository:\n    Type: String\n    Description: Name of the ecr repository\n    Default: portal-api\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n  dockerContainerName:\n    Type: String\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\n    Default: portal-api-container\n\n  springProfile:\n    Type: String\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\n    Default: portal-api-stage\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n                  - ses:*\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\n          - Name: CF_DOCKER_HUB_USERNAME\n            Value: !Ref dockerHubUsername\n          - Name: CF_DOCKER_HUB_PASSWORD\n            Value: !Ref dockerHubPassword\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Ref dockerContainerName\n          - Name: CF_SPRING_PROFILE\n            Value: !Ref springProfile\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-codepipeline-stack" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-codepipeline-stack"
  template_body      = "Description: >\n  CodeBuild and CodePipeline for Lift Player\n\nParameters:\n  environment:\n    Type: String\n    Default: dev\n    AllowedValues:\n      - dev\n      - prod\n    Description: Environment variable used for resources.\n\n  githubBranch:\n    Type: String\n    Default: main\n    AllowedValues:\n      - main\n      - prod\n    Description: The branch of the repo to continuously deploy.\n\n  githubRepo:\n    Type: String\n    Default: liftck_player\n    Description: The repo name.\n\n  githubToken:\n    Type: String\n    Description: Token for the user specified above.\n    NoEcho: true\n\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub.\n    Default: RocketPartners\n\n  pipelineName:\n    Type: String\n    Default: liftck-player-pipeline\n    Description: The name of the pipeline.\n\n  resourcePrefix:\n    Type: String\n    Default: liftck-player\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    Type: String\n    Default: cirk-dev-codepipeline-artifacts\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: \"arn:aws:ssm:us-east-1:627729951075:parameter/*\"\n                Effect: Allow\n                Action:\n                  - ssm:GetParameters\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - s3:*\n                  - cloudformation:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:UpdateStack\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  PlayerCodePipelineLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/codebuild/$${resourcePrefix}-codebuild\n      RetentionInDays: 7\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        Type: LINUX_CONTAINER\n        Image: aws/codebuild/java:openjdk-8\n        ComputeType: BUILD_GENERAL1_SMALL\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: ENV\n            Value: !Ref environment\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${pipelineName}-build\n      LogsConfig:\n        CloudWatchLogs:\n          GroupName: !Ref PlayerCodePipelineLogGroup\n          Status: ENABLED\n      Name: !Sub $${pipelineName}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n      Source:\n        Type: CODEPIPELINE\n\n  CodePipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref pipelineName\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: GitHubCommitTrigger\n          Actions:\n            - Name: G2Player\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: GradleBuildZip\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-event-api" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "player-event-api"
  template_body      = "Description: Player event downloading ECS resource\n\nParameters:\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: event-api\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 1\n\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n  \n  loadBalancerArn:\n    Type: \"String\"\n    Description: cdc is Dev \u0026 de5 is Prod\n    AllowedValues: \n      - \"arn:aws:elasticloadbalancing:us-east-1:627729951075:loadbalancer/app/player/e4f3b568e7501cdc\" #dev\n      - \"arn:aws:elasticloadbalancing:us-east-1:799611636099:loadbalancer/app/player/64deb6688dcdede5\" #prod\n\n  sslCertificateArn:\n    Type: \"String\"\n    Description: 980 is Dev \u0026 17c is Prod\n    AllowedValues: \n      - \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  #dev\n      - \"arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\" #prod\n\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n\n  healthCheckPath:\n    Description: The health check path \n    Type: String\n    Default: /api/lift/snooze/health\n\n  taskDefinitionImage:\n    Type: \"String\"\n    Default: player-event-api\n\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref ecsService\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\n\n  # ALBListenerPort80:\n  #   Type: AWS::ElasticLoadBalancingV2::Listener\n  #   Properties:\n  #     LoadBalancerArn: !Ref loadBalancerArn\n  #     Port: 80\n  #     Protocol: HTTP\n  #     DefaultActions:\n  #       - Type: redirect\n  #         RedirectConfig: \n  #             Host: \"#{host}\"\n  #             Path: \"/#{path}\"\n  #             Port: 443\n  #             Protocol: \"HTTPS\"\n  #             Query: \"#{query}\"\n  #             StatusCode: HTTP_302\n\n  # ALBListenerPort443:\n  #   Type: AWS::ElasticLoadBalancingV2::Listener\n  #   Properties:\n  #     LoadBalancerArn: !Ref loadBalancerArn\n  #     Port: 443\n  #     Protocol: HTTPS\n  #     Certificates:\n  #     - CertificateArn: !Ref sslCertificateArn\n  #     DefaultActions:\n  #       - Type: fixed-response\n  #         FixedResponseConfig:\n  #           ContentType: \"text/plain\"\n  #           MessageBody: \"NOT FOUND - ALB DEFAULT MESSAGE\"\n  #           StatusCode: 404\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\n      Priority: 7\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /api/lift/*/playerevents*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Ref healthCheckPath\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${ecsService}\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                  - 'cloudwatch:PutMetricData'\n                  - 'dynamodb:BatchGetItem'\n                  - 'dynamodb:BatchWriteItem'\n                  - 'dynamodb:PutItem'\n                  - 'dynamodb:DescribeTable'\n                  - 'dynamodb:DeleteItem'\n                  - 'dynamodb:GetItem'\n                  - 'dynamodb:Scan'\n                  - 'dynamodb:Query'\n                  - 'dynamodb:UpdateItem'\n                  - 's3:GetObject'\n                  - 's3:GetObject*'\n                  - 's3:PutObject'\n                  - 's3:ListBucket'\n                  - 's3:ListAllMyBuckets'\n                  - 'firehose:PutRecord'\n                  - 'firehose:PutRecordBatch'\n                Effect: Allow\n                Resource: '*'  \n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\n      RetentionInDays: 30\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-event-api-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-event-api-codepipeline"
  template_body      = "Description: >\n  Codepipeline Build and Deployment of ECS Service\n\n\nParameters:\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\n    Default: RocketPartners\n\n  githubRepo:\n    Type: String\n    Default: liftck_snooze\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\n\n  githubBranch:\n    Type: String\n    Default: deploy-player-event-api-stage\n    Description: The branch of the repo to continuously deploy. (deploy-player-file-api-stage)\n\n  githubToken:\n    Type: String\n    Description: >\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\n    NoEcho: true  \n\n  s3BucketName:\n    Type: String\n    Description: Name of s3 bucket to use for codepipeline artifacts\n    Default: cirk-dev-codepipeline-artifacts\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ecs cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ecs service\n    Default: event-api \n\n  ecrRepository:\n    Type: String\n    Description: Name of the ecr repository\n    Default: player-event-api\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n  dockerContainerName:\n    Type: String\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\n    Default: player-event-api-container    \n\n  springProfile:\n    Type: String\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\n    Default: player-event-api-stage\n\n\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n                  - ses:*\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\n          - Name: CF_DOCKER_HUB_USERNAME\n            Value: !Ref dockerHubUsername\n          - Name: CF_DOCKER_HUB_PASSWORD\n            Value: !Ref dockerHubPassword\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Ref dockerContainerName\n          - Name: CF_SPRING_PROFILE\n            Value: !Ref springProfile\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-file-api" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "player-file-api"
  template_body      = "Description: Player file downloading ECS resource\n\nParameters:\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: file-api\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 1\n\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n  \n  loadBalancerArn:\n    Type: \"String\"\n    Description: cdc is Dev \u0026 de5 is Prod\n    AllowedValues: \n      - \"arn:aws:elasticloadbalancing:us-east-1:627729951075:loadbalancer/app/player/e4f3b568e7501cdc\" #dev\n      - \"arn:aws:elasticloadbalancing:us-east-1:799611636099:loadbalancer/app/player/64deb6688dcdede5\" #prod\n\n  sslCertificateArn:\n    Type: \"String\"\n    Description: 980 is Dev \u0026 17c is Prod\n    AllowedValues: \n      - \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  #dev\n      - \"arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\" #prod\n\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n\n  healthCheckPath:\n    Description: The health check path \n    Type: String\n    Default: /api/lift/snooze/health\n\n  taskDefinitionImage:\n    Type: \"String\"\n    Default: player-file-api\n\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref ecsService\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\n\n  # ALBListenerPort80:\n  #   Type: AWS::ElasticLoadBalancingV2::Listener\n  #   Properties:\n  #     LoadBalancerArn: !Ref loadBalancerArn\n  #     Port: 80\n  #     Protocol: HTTP\n  #     DefaultActions:\n  #       - Type: redirect\n  #         RedirectConfig: \n  #             Host: \"#{host}\"\n  #             Path: \"/#{path}\"\n  #             Port: 443\n  #             Protocol: \"HTTPS\"\n  #             Query: \"#{query}\"\n  #             StatusCode: HTTP_302\n\n  # ALBListenerPort443:\n  #   Type: AWS::ElasticLoadBalancingV2::Listener\n  #   Properties:\n  #     LoadBalancerArn: !Ref loadBalancerArn\n  #     Port: 443\n  #     Protocol: HTTPS\n  #     Certificates:\n  #     - CertificateArn: !Ref sslCertificateArn\n  #     DefaultActions:\n  #       - Type: fixed-response\n  #         FixedResponseConfig:\n  #           ContentType: \"text/plain\"\n  #           MessageBody: \"NOT FOUND - ALB DEFAULT MESSAGE\"\n  #           StatusCode: 404\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\n      Priority: 6\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /api/lift/*/files*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Ref healthCheckPath\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${ecsService}\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                  - 'cloudwatch:PutMetricData'\n                  - 'dynamodb:BatchGetItem'\n                  - 'dynamodb:BatchWriteItem'\n                  - 'dynamodb:PutItem'\n                  - 'dynamodb:DescribeTable'\n                  - 'dynamodb:DeleteItem'\n                  - 'dynamodb:GetItem'\n                  - 'dynamodb:Scan'\n                  - 'dynamodb:Query'\n                  - 'dynamodb:UpdateItem'\n                  - 's3:GetObject'\n                  - 's3:GetObject*'\n                  - 's3:PutObject'\n                  - 's3:ListBucket'\n                  - 's3:ListAllMyBuckets'\n                  - 'firehose:PutRecord'\n                  - 'firehose:PutRecordBatch'\n                Effect: Allow\n                Resource: '*'  \n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\n      RetentionInDays: 30\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-file-api-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-file-api-codepipeline"
  template_body      = "Description: >\r\n  Codepipeline Build and Deployment of ECS Service\r\n\r\n\r\nParameters:\r\n  githubUser:\r\n    Type: String\r\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\r\n    Default: RocketPartners\r\n\r\n  githubRepo:\r\n    Type: String\r\n    Default: liftck_snooze\r\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\r\n\r\n  githubBranch:\r\n    Type: String\r\n    Default: deploy-player-file-api-stage\r\n    Description: The branch of the repo to continuously deploy. (deploy-player-file-api-stage)\r\n\r\n  githubToken:\r\n    Type: String\r\n    Description: >\r\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\r\n    NoEcho: true  \r\n\r\n  s3BucketName:\r\n    Type: String\r\n    Description: Name of s3 bucket to use for codepipeline artifacts\r\n    Default: cirk-dev-codepipeline-artifacts\r\n\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ecs cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ecs service\r\n    Default: file-api \r\n\r\n  ecrRepository:\r\n    Type: String\r\n    Description: Name of the ecr repository\r\n    Default: player-file-api\r\n\r\n  dockerHubUsername:\r\n    Default: rocketpartnersdockerhub\r\n    Description: Docker Hub username. Used for CodeBuild to login\r\n    Type: String\r\n\r\n  dockerHubPassword:\r\n    Description: Docker Hub password. Used for CodeBuild to login\r\n    NoEcho: true\r\n    Type: String\r\n\r\n  dockerContainerName:\r\n    Type: String\r\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\r\n    Default: player-file-api-container    \r\n\r\n  springProfile:\r\n    Type: String\r\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\r\n    Default: player-file-api-stage\r\n\r\n\r\n\r\nResources:\r\n  CodeBuildServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - ecr:GetAuthorizationToken\r\n                  - ses:*\r\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:GetObject\r\n                  - s3:PutObject\r\n                  - s3:GetObjectVersion\r\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\r\n                Effect: Allow\r\n                Action:\r\n                  - ecr:GetDownloadUrlForLayer\r\n                  - ecr:BatchGetImage\r\n                  - ecr:BatchCheckLayerAvailability\r\n                  - ecr:PutImage\r\n                  - ecr:InitiateLayerUpload\r\n                  - ecr:UploadLayerPart\r\n                  - ecr:CompleteLayerUpload\r\n\r\n  CodePipelineServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource:\r\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:PutObject\r\n                  - s3:GetObject\r\n                  - s3:GetObjectVersion\r\n                  - s3:GetBucketVersioning\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - ecs:DescribeServices\r\n                  - ecs:DescribeTaskDefinition\r\n                  - ecs:DescribeTasks\r\n                  - ecs:ListTasks\r\n                  - ecs:RegisterTaskDefinition\r\n                  - ecs:UpdateService\r\n                  - codebuild:StartBuild\r\n                  - codebuild:BatchGetBuilds\r\n                  - iam:PassRole\r\n\r\n\r\n\r\n  CodeBuildProject:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/java:openjdk-8\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: true\r\n        EnvironmentVariables:\r\n          - Name: CF_REPOSITORY_URI\r\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\r\n          - Name: CF_DOCKER_HUB_USERNAME\r\n            Value: !Ref dockerHubUsername\r\n          - Name: CF_DOCKER_HUB_PASSWORD\r\n            Value: !Ref dockerHubPassword\r\n          - Name: CF_DOCKER_CONTAINER_NAME\r\n            Value: !Ref dockerContainerName\r\n          - Name: CF_SPRING_PROFILE\r\n            Value: !Ref springProfile\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n\r\n  Pipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3BucketName\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: App\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: ECS\r\n              Configuration:\r\n                ClusterName: !Ref ecsCluster\r\n                ServiceName: !Ref ecsService\r\n                FileName: imagedefinitions.json\r\n              InputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-ngrp-proxy-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-ngrp-proxy-codepipeline"
  template_body      = "Description: >\r\n  Codepipeline Build and Deployment of ECS Service\r\n\r\n\r\nParameters:\r\n  githubUser:\r\n    Type: String\r\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\r\n    Default: RocketPartners\r\n\r\n  githubRepo:\r\n    Type: String\r\n    Default: liftck_snooze\r\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\r\n\r\n  githubBranch:\r\n    Type: String\r\n    Default: deploy-player-ngrp-proxy-stage\r\n    Description: The branch of the repo to continuously deploy. (deploy-player-ngrp-proxy-stage)\r\n    AllowedValues:\r\n      - deploy-player-ngrp-proxy-stage\r\n      - deploy-player-ngrp-proxy-prod\r\n\r\n  githubToken:\r\n    Type: String\r\n    Description: >\r\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\r\n    NoEcho: true  \r\n\r\n  s3BucketName:\r\n    Type: String\r\n    Description: Name of s3 bucket to use for codepipeline artifacts\r\n    Default: cirk-dev-codepipeline-artifacts\r\n    AllowedValues:\r\n      - cirk-dev-codepipeline-artifacts\r\n      - circlek-prod-codepipeline-artifacts\r\n\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ecs cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ecs service\r\n    Default: ngrp-proxy \r\n\r\n  ecrRepository:\r\n    Type: String\r\n    Description: Name of the ecr repository\r\n    Default: player-ngrp-proxy\r\n\r\n  dockerHubUsername:\r\n    Default: rocketpartnersdockerhub\r\n    Description: Docker Hub username. Used for CodeBuild to login\r\n    Type: String\r\n\r\n  dockerHubPassword:\r\n    Description: Docker Hub password. Used for CodeBuild to login\r\n    NoEcho: true\r\n    Type: String\r\n\r\n  dockerContainerName:\r\n    Type: String\r\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\r\n    Default: player-ngrp-proxy-container    \r\n\r\n  springProfile:\r\n    Type: String\r\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\r\n    Default: player-ngrp-proxy-stage\r\n    AllowedValues:\r\n      - player-ngrp-proxy-stage\r\n      - player-ngrp-proxy-prod\r\n\r\n\r\n\r\nResources:\r\n  CodeBuildServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - ecr:GetAuthorizationToken\r\n                  - ses:*\r\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:GetObject\r\n                  - s3:PutObject\r\n                  - s3:GetObjectVersion\r\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\r\n                Effect: Allow\r\n                Action:\r\n                  - ecr:GetDownloadUrlForLayer\r\n                  - ecr:BatchGetImage\r\n                  - ecr:BatchCheckLayerAvailability\r\n                  - ecr:PutImage\r\n                  - ecr:InitiateLayerUpload\r\n                  - ecr:UploadLayerPart\r\n                  - ecr:CompleteLayerUpload\r\n\r\n  CodePipelineServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource:\r\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:PutObject\r\n                  - s3:GetObject\r\n                  - s3:GetObjectVersion\r\n                  - s3:GetBucketVersioning\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - ecs:DescribeServices\r\n                  - ecs:DescribeTaskDefinition\r\n                  - ecs:DescribeTasks\r\n                  - ecs:ListTasks\r\n                  - ecs:RegisterTaskDefinition\r\n                  - ecs:UpdateService\r\n                  - codebuild:StartBuild\r\n                  - codebuild:BatchGetBuilds\r\n                  - iam:PassRole\r\n\r\n\r\n\r\n  CodeBuildProject:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/java:openjdk-8\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: true\r\n        EnvironmentVariables:\r\n          - Name: CF_REPOSITORY_URI\r\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\r\n          - Name: CF_DOCKER_HUB_USERNAME\r\n            Value: !Ref dockerHubUsername\r\n          - Name: CF_DOCKER_HUB_PASSWORD\r\n            Value: !Ref dockerHubPassword\r\n          - Name: CF_DOCKER_CONTAINER_NAME\r\n            Value: !Ref dockerContainerName\r\n          - Name: CF_SPRING_PROFILE\r\n            Value: !Ref springProfile\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n\r\n  Pipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3BucketName\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: App\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: ECS\r\n              Configuration:\r\n                ClusterName: !Ref ecsCluster\r\n                ServiceName: !Ref ecsService\r\n                FileName: imagedefinitions.json\r\n              InputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-ngrp-proxy-stack" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "player-ngrp-proxy-stack"
  template_body      = "Description: Player ngrp proxy ECS resource\r\n\r\nParameters:\r\n  albListenerId:\r\n    Description: e4f is Dev \u0026 64d is Prod\r\n    Type: String\r\n    AllowedValues:\r\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\r\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\r\n\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ECS cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ECS service\r\n    Default: ngrp-proxy\r\n\r\n  instanceCount:\r\n    Description: How many instances of this task should we run across our cluster?\r\n    Type: Number\r\n    Default: 1\r\n\r\n  rolePrefix:\r\n    Description: String to prefix IAM roles\r\n    Type: String\r\n    Default: cirk\r\n\r\n  serviceSubnets:\r\n    Description: The subnets the service should use (private)\r\n    Type: List<AWS::EC2::Subnet::Id>\r\n  \r\n  loadBalancerArn:\r\n    Description: e4f is Dev \u0026 64d is Prod\r\n    Type: \"String\"\r\n    AllowedValues: \r\n      - \"arn:aws:elasticloadbalancing:us-east-1:627729951075:loadbalancer/app/player/e4f3b568e7501cdc\" #dev\r\n      - \"arn:aws:elasticloadbalancing:us-east-1:799611636099:loadbalancer/app/player/64deb6688dcdede5\" #prod\r\n\r\n  sslCertificateArn:\r\n    Description: 0f6443f8 is Dev \u0026 459af342 is Prod\r\n    Type: \"String\"\r\n    AllowedValues: \r\n      - \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  #dev\r\n      - \"arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\" #prod\r\n\r\n  vpcId:\r\n    Description: The VPC for the ECS Service\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  healthCheckPath:\r\n    Description: The health check path \r\n    Type: String\r\n    Default: /api/lift/snooze/health\r\n\r\n  taskDefinitionImage:\r\n    Type: \"String\"\r\n    Default: player-ngrp-proxy\r\n\r\nResources:\r\n  Service:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - ListenerRulePort443\r\n    Properties:\r\n      Cluster: !Ref ecsCluster\r\n      ServiceName: !Ref ecsService\r\n      DesiredCount: !Ref instanceCount\r\n      HealthCheckGracePeriodSeconds: 120\r\n      LaunchType: FARGATE\r\n      TaskDefinition: !Ref TaskDefinition\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: DISABLED\r\n          Subnets: !Ref serviceSubnets\r\n          SecurityGroups:\r\n            - !Ref ServiceSecurityGroup\r\n      LoadBalancers:\r\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\r\n          ContainerPort: 8080\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  ServiceSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupIngress:\r\n        - IpProtocol: tcp\r\n          FromPort: 8080\r\n          ToPort: 8080\r\n          CidrIp: \"0.0.0.0/0\"\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n\r\n  ListenerRulePort443:\r\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\r\n    Properties:\r\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\r\n      Priority: 5\r\n      Conditions:\r\n        - Field: path-pattern\r\n          Values:\r\n            - !Sub /api/lift/*/ngrp*\r\n      Actions:\r\n        - Type: forward\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  TargetGroup:\r\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      VpcId: !Ref vpcId\r\n      Port: 80\r\n      Protocol: HTTP\r\n      TargetType: ip\r\n      Matcher:\r\n        HttpCode: 200-299\r\n      HealthCheckIntervalSeconds: 10\r\n      HealthCheckPath: !Ref healthCheckPath\r\n      HealthCheckProtocol: HTTP\r\n      HealthCheckTimeoutSeconds: 5\r\n      HealthyThresholdCount: 2\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${ecsCluster}-$${ecsService}\r\n\r\n  TaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    Properties:\r\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      NetworkMode: awsvpc\r\n      Cpu: 1024\r\n      Memory: 2048\r\n      TaskRoleArn: !Ref TaskRole\r\n      ExecutionRoleArn: !Ref TaskRole\r\n      ContainerDefinitions:\r\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\r\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\r\n          Cpu: 1024\r\n          Memory: 2048\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: 8080\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-group: !Ref CloudWatchLogsGroup\r\n              awslogs-region: !Ref AWS::Region\r\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n\r\n  TaskRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\r\n      AssumeRolePolicyDocument: |\r\n        {\r\n            \"Statement\": [{\r\n                \"Effect\": \"Allow\",\r\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\r\n                \"Action\": [ \"sts:AssumeRole\" ]\r\n            }]\r\n        }\r\n      Policies:\r\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                Effect: Allow\r\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\r\n              - Action:\r\n                  - 'ecr:GetAuthorizationToken'\r\n                  - 'ecr:BatchCheckLayerAvailability'\r\n                  - 'ecr:GetDownloadUrlForLayer'\r\n                  - 'ecr:BatchGetImage'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'dynamodb:BatchGetItem'\r\n                  - 'dynamodb:BatchWriteItem'\r\n                  - 'dynamodb:PutItem'\r\n                  - 'dynamodb:DescribeTable'\r\n                  - 'dynamodb:DeleteItem'\r\n                  - 'dynamodb:GetItem'\r\n                  - 'dynamodb:Scan'\r\n                  - 'dynamodb:Query'\r\n                  - 'dynamodb:UpdateItem'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObject*'\r\n                  - 's3:PutObject'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                  - 'firehose:PutRecord'\r\n                  - 'firehose:PutRecordBatch'\r\n                Effect: Allow\r\n                Resource: '*'  \r\n\r\n  CloudWatchLogsGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n      RetentionInDays: 30\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-punchcard-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "player-punchcard-codepipeline"
  template_body      = "Description: >\r\n  Codepipeline Build and Deployment of ECS Service\r\n\r\n\r\nParameters:\r\n  githubUser:\r\n    Type: String\r\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\r\n    Default: RocketPartners\r\n\r\n  githubRepo:\r\n    Type: String\r\n    Default: liftck_snooze\r\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\r\n\r\n  githubBranch:\r\n    Type: String\r\n    Default: deploy-player-punchcard-stage\r\n    Description: The branch of the repo to continuously deploy. (deploy-player-punchcard-stage)\r\n    AllowedValues:\r\n      - deploy-player-punchcard-stage\r\n      - deploy-player-punchcard-prod\r\n\r\n  githubToken:\r\n    Type: String\r\n    Description: >\r\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\r\n    NoEcho: true  \r\n\r\n  s3BucketName:\r\n    Type: String\r\n    Description: Name of s3 bucket to use for codepipeline artifacts\r\n    Default: cirk-dev-codepipeline-artifacts\r\n\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ecs cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ecs service\r\n    Default: punchcard \r\n\r\n  ecrRepository:\r\n    Type: String\r\n    Description: Name of the ecr repository\r\n    Default: player-punchcard\r\n\r\n  dockerHubUsername:\r\n    Default: rocketpartnersdockerhub\r\n    Description: Docker Hub username. Used for CodeBuild to login\r\n    Type: String\r\n\r\n  dockerHubPassword:\r\n    Description: Docker Hub password. Used for CodeBuild to login\r\n    NoEcho: true\r\n    Type: String\r\n\r\n  dockerContainerName:\r\n    Type: String\r\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\r\n    Default: player-punchcard-container    \r\n\r\n  springProfile:\r\n    Type: String\r\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\r\n    Default: player-punchcard-stage\r\n    AllowedValues:\r\n      - player-punchcard-stage\r\n      - player-punchcard-prod\r\n\r\n\r\n\r\nResources:\r\n  CodeBuildServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - logs:CreateLogGroup\r\n                  - logs:CreateLogStream\r\n                  - logs:PutLogEvents\r\n                  - ecr:GetAuthorizationToken\r\n                  - ses:*\r\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:GetObject\r\n                  - s3:PutObject\r\n                  - s3:GetObjectVersion\r\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\r\n                Effect: Allow\r\n                Action:\r\n                  - ecr:GetDownloadUrlForLayer\r\n                  - ecr:BatchGetImage\r\n                  - ecr:BatchCheckLayerAvailability\r\n                  - ecr:PutImage\r\n                  - ecr:InitiateLayerUpload\r\n                  - ecr:UploadLayerPart\r\n                  - ecr:CompleteLayerUpload\r\n\r\n  CodePipelineServiceRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: sts:AssumeRole\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource:\r\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\r\n                Effect: Allow\r\n                Action:\r\n                  - s3:PutObject\r\n                  - s3:GetObject\r\n                  - s3:GetObjectVersion\r\n                  - s3:GetBucketVersioning\r\n              - Resource: \"*\"\r\n                Effect: Allow\r\n                Action:\r\n                  - ecs:DescribeServices\r\n                  - ecs:DescribeTaskDefinition\r\n                  - ecs:DescribeTasks\r\n                  - ecs:ListTasks\r\n                  - ecs:RegisterTaskDefinition\r\n                  - ecs:UpdateService\r\n                  - codebuild:StartBuild\r\n                  - codebuild:BatchGetBuilds\r\n                  - iam:PassRole\r\n\r\n\r\n\r\n  CodeBuildProject:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/java:openjdk-8\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: true\r\n        EnvironmentVariables:\r\n          - Name: CF_REPOSITORY_URI\r\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\r\n          - Name: CF_DOCKER_HUB_USERNAME\r\n            Value: !Ref dockerHubUsername\r\n          - Name: CF_DOCKER_HUB_PASSWORD\r\n            Value: !Ref dockerHubPassword\r\n          - Name: CF_DOCKER_CONTAINER_NAME\r\n            Value: !Ref dockerContainerName\r\n          - Name: CF_SPRING_PROFILE\r\n            Value: !Ref springProfile\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n\r\n  Pipeline:\r\n    Type: AWS::CodePipeline::Pipeline\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3BucketName\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: App\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n        - Name: Deploy\r\n          Actions:\r\n            - Name: Deploy\r\n              ActionTypeId:\r\n                Category: Deploy\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: ECS\r\n              Configuration:\r\n                ClusterName: !Ref ecsCluster\r\n                ServiceName: !Ref ecsService\r\n                FileName: imagedefinitions.json\r\n              InputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--player-punchcard-stack" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "player-punchcard-stack"
  template_body      = "Description: Player loyalty punchcard ECS resource\r\n\r\nParameters:\r\n  albListenerId:\r\n    Description: e4f is Dev \u0026 64d is Prod\r\n    Type: String\r\n    AllowedValues:\r\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\r\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\r\n\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ECS cluster\r\n    Default: player\r\n\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ECS service\r\n    Default: punchcard\r\n\r\n  instanceCount:\r\n    Description: How many instances of this task should we run across our cluster?\r\n    Type: Number\r\n    Default: 1\r\n\r\n  rolePrefix:\r\n    Description: String to prefix IAM roles\r\n    Type: String\r\n    Default: cirk\r\n\r\n  serviceSubnets:\r\n    Description: The subnets the service should use (private)\r\n    Type: List<AWS::EC2::Subnet::Id>\r\n  \r\n  loadBalancerArn:\r\n    Description: e4f is Dev \u0026 64d is Prod\r\n    Type: \"String\"\r\n    AllowedValues: \r\n      - \"arn:aws:elasticloadbalancing:us-east-1:627729951075:loadbalancer/app/player/e4f3b568e7501cdc\" #dev\r\n      - \"arn:aws:elasticloadbalancing:us-east-1:799611636099:loadbalancer/app/player/64deb6688dcdede5\" #prod\r\n\r\n  sslCertificateArn:\r\n    Description: 0f6443f8 is Dev \u0026 459af342 is Prod\r\n    Type: \"String\"\r\n    AllowedValues: \r\n      - \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  #dev\r\n      - \"arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\" #prod\r\n\r\n  vpcId:\r\n    Description: The VPC for the ECS Service\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  healthCheckPath:\r\n    Description: The health check path \r\n    Type: String\r\n    Default: /api/lift/snooze/health\r\n\r\n  taskDefinitionImage:\r\n    Type: \"String\"\r\n    Default: player-punchcard\r\n\r\nResources:\r\n  Service:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - ListenerRulePort443\r\n    Properties:\r\n      Cluster: !Ref ecsCluster\r\n      ServiceName: !Ref ecsService\r\n      DesiredCount: !Ref instanceCount\r\n      HealthCheckGracePeriodSeconds: 120\r\n      LaunchType: FARGATE\r\n      TaskDefinition: !Ref TaskDefinition\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: DISABLED\r\n          Subnets: !Ref serviceSubnets\r\n          SecurityGroups:\r\n            - !Ref ServiceSecurityGroup\r\n      LoadBalancers:\r\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\r\n          ContainerPort: 8080\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  ServiceSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupIngress:\r\n        - IpProtocol: tcp\r\n          FromPort: 8080\r\n          ToPort: 8080\r\n          CidrIp: \"0.0.0.0/0\"\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n\r\n  ListenerRulePort443:\r\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\r\n    Properties:\r\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\r\n      Priority: 10\r\n      Conditions:\r\n        - Field: path-pattern\r\n          Values:\r\n            - !Sub /api/lift/*/dynamo/loyalty-punchcards*\r\n      Actions:\r\n        - Type: forward\r\n          TargetGroupArn: !Ref TargetGroup\r\n\r\n  TargetGroup:\r\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n    Properties:\r\n      Name: !Sub $${ecsCluster}-$${ecsService}\r\n      VpcId: !Ref vpcId\r\n      Port: 80\r\n      Protocol: HTTP\r\n      TargetType: ip\r\n      Matcher:\r\n        HttpCode: 200-299\r\n      HealthCheckIntervalSeconds: 10\r\n      HealthCheckPath: !Ref healthCheckPath\r\n      HealthCheckProtocol: HTTP\r\n      HealthCheckTimeoutSeconds: 5\r\n      HealthyThresholdCount: 2\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${ecsCluster}-$${ecsService}\r\n\r\n  TaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    Properties:\r\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      NetworkMode: awsvpc\r\n      Cpu: 1024\r\n      Memory: 2048\r\n      TaskRoleArn: !Ref TaskRole\r\n      ExecutionRoleArn: !Ref TaskRole\r\n      ContainerDefinitions:\r\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\r\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\r\n          Cpu: 1024\r\n          Memory: 2048\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: 8080\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-group: !Ref CloudWatchLogsGroup\r\n              awslogs-region: !Ref AWS::Region\r\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n\r\n  TaskRole:\r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\r\n      AssumeRolePolicyDocument: |\r\n        {\r\n            \"Statement\": [{\r\n                \"Effect\": \"Allow\",\r\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\r\n                \"Action\": [ \"sts:AssumeRole\" ]\r\n            }]\r\n        }\r\n      Policies:\r\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                Effect: Allow\r\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\r\n              - Action:\r\n                  - 'ecr:GetAuthorizationToken'\r\n                  - 'ecr:BatchCheckLayerAvailability'\r\n                  - 'ecr:GetDownloadUrlForLayer'\r\n                  - 'ecr:BatchGetImage'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'dynamodb:BatchGetItem'\r\n                  - 'dynamodb:BatchWriteItem'\r\n                  - 'dynamodb:PutItem'\r\n                  - 'dynamodb:DescribeTable'\r\n                  - 'dynamodb:DeleteItem'\r\n                  - 'dynamodb:GetItem'\r\n                  - 'dynamodb:Scan'\r\n                  - 'dynamodb:Query'\r\n                  - 'dynamodb:UpdateItem'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObject*'\r\n                  - 's3:PutObject'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                  - 'firehose:PutRecord'\r\n                  - 'firehose:PutRecordBatch'\r\n                Effect: Allow\r\n                Resource: '*'  \r\n\r\n  CloudWatchLogsGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n      RetentionInDays: 30\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--portal-api" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "portal-api"
  template_body      = "Description: >\n  Setup ALB and portal-api service on ECS. We are calling it api within AWS, but it is portal-api in git.\n  This same template is also used for the player-api, since it runs the same code in a different cluster.\n  Also, the player uses an internal ALB with an externam NLB (NLB is not created it this template)\n\nParameters:\n  vpcId:\n    Description: The VPC that the ECS cluster is deployed to\n    Type: AWS::EC2::VPC::Id\n\n  ecsCluster:\n    Description: Please provide the ECS Cluster ID that this service should run on\n    Type: String\n    Default: portal\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 2\n\n  rolePrefix:\n    Description: String to prefix the role names\n    Type: String\n    Default: cirk\n\n  serviceName:\n    Description: Name of the service\n    Type: String\n    Default: api \n\n  serviceImage:\n    Description: Docker image for the service\n    Type: String\n    Default: 627729951075.dkr.ecr.us-east-1.amazonaws.com/portal-api:latest\n\n  serviceSubnets:\n    Description: \"The subnets the service should use (private)\"\n    Type: \"List<AWS::EC2::Subnet::Id>\"\n\n  loadbalancerName:\n    Description: The name to use for the load balancer\n    Type: String\n    Default: portal\n\n  loadbalancerScheme:\n    Description: Is the loadbalancer internet-facing or internal\n    Type: String\n    Default: internet-facing\n\n  loadbalancerSubnets:\n    Description: \"The subnets the loadbalancer should use (internet-facing use public / internal use private)\"\n    Type: \"List<AWS::EC2::Subnet::Id>\"\n\n  listenerPath:\n    Description: The path to register with the Application Load Balancer\n    Type: String\n    Default: /api*\n\n  sslCertificateArn:\n    Type: \"String\"\n    Default: \"arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\"  \n\n    # circlekliftdev.com\n    #  - circle k dev cert arn:  arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n\n    # liftck.com\n    #  - ckmarketing cert arn:    arn:aws:acm:us-east-1:713044078609:certificate/e07269dc-c92d-411a-9890-906a726a98e1\n    #  - circle k dev cert arn:   arn:aws:acm:us-east-1:627729951075:certificate/2d487163-01f8-4296-8d32-ea8e4b483273\n    #  - circle k prod cert arn:  arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\n\n  healthCheckPath:\n    Description: The health check path \n    Type: String\n    Default: /api/lift/snooze/health  \n\n\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref serviceName\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration: \n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${serviceName}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${serviceName}\n      GroupDescription: !Sub \"Security Group for ECS service $${serviceName} in cluster $${ecsCluster}\"\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${serviceName}\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsCluster}-$${serviceName}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${serviceName}-container\n          Image: !Ref serviceImage\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${serviceName}\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${serviceName}\n      RetentionInDays: 30\n\n  LoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Name: !Ref loadbalancerName\n      Scheme: !Ref loadbalancerScheme\n      Subnets: !Ref loadbalancerSubnets\n      SecurityGroups:\n        - !Ref ALBSecurityGroup\n      Tags:\n        - Key: Name\n          Value: !Ref loadbalancerName\n\n  ALBSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub alb-$${loadbalancerName}\n      GroupDescription: !Sub \"Security Group for the $${loadbalancerName} ALB\"\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: \"0.0.0.0/0\"\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: \"0.0.0.0/0\"  \n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub alb-$${loadbalancerName}\n\n  ALBListenerPort80:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      LoadBalancerArn: !Ref LoadBalancer\n      Port: 80\n      Protocol: HTTP\n      DefaultActions:\n        - Type: redirect\n          RedirectConfig: \n              Host: \"#{host}\"\n              Path: \"/#{path}\"\n              Port: 443\n              Protocol: \"HTTPS\"\n              Query: \"#{query}\"\n              StatusCode: HTTP_302\n\n  ALBListenerPort443:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      LoadBalancerArn: !Ref LoadBalancer\n      Port: 443\n      Protocol: HTTPS\n      Certificates:\n      - CertificateArn: !Ref sslCertificateArn\n      DefaultActions:\n        - Type: fixed-response\n          FixedResponseConfig:\n            ContentType: \"text/plain\"\n            MessageBody: \"NOT FOUND - ALB DEFAULT MESSAGE\"\n            StatusCode: 404\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Ref ALBListenerPort443\n      Priority: 2\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Ref listenerPath\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${serviceName}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Ref healthCheckPath\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${serviceName}\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${serviceName}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${serviceName}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - 'ecr:GetAuthorizationToken'\n                  - 'ecr:BatchCheckLayerAvailability'\n                  - 'ecr:GetDownloadUrlForLayer'\n                  - 'ecr:BatchGetImage'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                  - 'cloudwatch:PutMetricData'\n                  - 'dynamodb:BatchGetItem'\n                  - 'dynamodb:BatchWriteItem'\n                  - 'dynamodb:PutItem'\n                  - 'dynamodb:DescribeTable'\n                  - 'dynamodb:DeleteItem'\n                  - 'dynamodb:GetItem'\n                  - 'dynamodb:Scan'\n                  - 'dynamodb:Query'\n                  - 'dynamodb:UpdateItem'\n                  - 's3:GetObject'\n                  - 's3:GetObject*'\n                  - 's3:PutObject'\n                  - 's3:ListBucket'\n                  - 's3:ListAllMyBuckets'\n                  - 'firehose:PutRecord'\n                  - 'firehose:PutRecordBatch'\n                  - 'ses:*'\n                Effect: Allow\n                Resource: '*'  \n  "
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--portal-api-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "portal-api-codepipeline"
  template_body      = "Description: >\n  Codepipeline Build and Deployment of ECS Service\n\nParameters:\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\n    Default: RocketPartners\n\n  githubRepo:\n    Type: String\n    Default: liftck_snooze\n    Description: The repo name. (For repo RocketPartners/liftck_snooze this should be liftck_snooze)\n\n  githubBranch:\n    Type: String\n    Default: deploy-portal-api-stage\n    Description: The branch of the repo to continuously deploy. (deploy-portal-api-stage)\n\n  githubToken:\n    Type: String\n    Description: >\n      Token for the user specified above. (https://github.com/settings/tokens) (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\n    NoEcho: true\n\n  s3BucketName:\n    Type: String\n    Description: Name of s3 bucket to use for codepipeline artifacts\n    Default: cirk-dev-codepipeline-artifacts\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ecs cluster\n    Default: portal\n\n  ecsService:\n    Type: String\n    Description: Name of the ecs service\n    Default: api\n\n  ecrRepository:\n    Type: String\n    Description: Name of the ecr repository\n    Default: portal-api\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n  dockerContainerName:\n    Type: String\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\n    Default: portal-api-container\n\n  springProfile:\n    Type: String\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\n    Default: portal-api-stage\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n                  - ses:*\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\n          - Name: CF_DOCKER_HUB_USERNAME\n            Value: !Ref dockerHubUsername\n          - Name: CF_DOCKER_HUB_PASSWORD\n            Value: !Ref dockerHubPassword\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Ref dockerContainerName\n          - Name: CF_SPRING_PROFILE\n            Value: !Ref springProfile\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--portal-webapp" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "portal-webapp"
  template_body      = "Description: |\r\n  Codepipeline Build and Deployment of Lift Portal front end code\r\nParameters:\r\n  githubUser:\r\n    Type: String\r\n    Description: >-\r\n      Your repo owner on GitHub. (For repo RocketPartners/liftck_portal this\r\n      should be RocketPartners)\r\n    Default: RocketPartners\r\n  githubRepo:\r\n    Type: String\r\n    Default: liftck_portal\r\n    Description: >-\r\n      The repo name. (For repo RocketPartners/liftck_portal this should be\r\n      liftck_portal)\r\n  githubBranch:\r\n    Type: String\r\n    Default: dev\r\n    Description: The branch of the repo to continuously deploy. (dev)\r\n  githubToken:\r\n    Type: String\r\n    Description: >\r\n      Token for the user specified above. (https://github.com/settings/tokens)\r\n      (https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-rotate-personal-token-CLI.html)\r\n    NoEcho: true\r\n  s3BucketName:\r\n    Type: String\r\n    Description: Name of s3 bucket to use for codepipeline artifacts\r\n    Default: cirk-dev-codepipeline-artifacts\r\n  webappS3BucketName:\r\n    Type: String\r\n    Description: >-\r\n      Name of s3 bucket that hosts the webapp files (this is where the app will\r\n      be deployed to)\r\n    Default: circlek-dev-portal-webapp\r\n  pipelineName:\r\n    Type: String\r\n    Description: The name to use for the code pipeline and code build\r\n    Default: portal-webapp\r\n  buildSpecFile:\r\n    Type: String\r\n    Description: >-\r\n      The build spec file to use - (should be buildspec.stage.yml or\r\n      buildspec.prod.yml)\r\n    Default: buildspec.stage.yml\r\nResources:\r\n  CodeBuildServiceRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codebuild.amazonaws.com\r\n            Action: 'sts:AssumeRole'\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource: '*'\r\n                Effect: Allow\r\n                Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n              - Resource:\r\n                  - !Sub 'arn:aws:s3:::$${s3BucketName}/*'\r\n                  - !Sub 'arn:aws:s3:::$${s3BucketName}'\r\n                  - !Sub 'arn:aws:s3:::$${webappS3BucketName}/*'\r\n                  - !Sub 'arn:aws:s3:::$${webappS3BucketName}'\r\n                Effect: Allow\r\n                Action:\r\n                  - 's3:PutObject'\r\n                  - 's3:DeleteObject'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObjectVersion'\r\n                  - 's3:GetBucketVersioning'\r\n                  - 's3:ListBucket'\r\n  CodePipelineServiceRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      Path: /\r\n      AssumeRolePolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Principal:\r\n              Service: codepipeline.amazonaws.com\r\n            Action: 'sts:AssumeRole'\r\n      Policies:\r\n        - PolicyName: root\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Resource:\r\n                  - !Sub 'arn:aws:s3:::$${s3BucketName}/*'\r\n                  - !Sub 'arn:aws:s3:::$${s3BucketName}'\r\n                Effect: Allow\r\n                Action:\r\n                  - 's3:PutObject'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObjectVersion'\r\n                  - 's3:GetBucketVersioning'\r\n                  - 's3:ListBucket'\r\n              - Resource: '*'\r\n                Effect: Allow\r\n                Action:\r\n                  - 'codebuild:StartBuild'\r\n                  - 'codebuild:BatchGetBuilds'\r\n                  - 'iam:PassRole'\r\n  CodeBuildProject:\r\n    Type: 'AWS::CodeBuild::Project'\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Source:\r\n        Type: CODEPIPELINE\r\n        BuildSpec: !Ref buildSpecFile\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_MEDIUM\r\n        Image: 'aws/codebuild/nodejs:8.11.0'\r\n        Type: LINUX_CONTAINER\r\n        PrivilegedMode: false\r\n      Name: !Ref pipelineName\r\n      ServiceRole: !Ref CodeBuildServiceRole\r\n  Pipeline:\r\n    Type: 'AWS::CodePipeline::Pipeline'\r\n    Properties:\r\n      Name: !Ref pipelineName\r\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\r\n      ArtifactStore:\r\n        Type: S3\r\n        Location: !Ref s3BucketName\r\n      Stages:\r\n        - Name: Source\r\n          Actions:\r\n            - Name: App\r\n              ActionTypeId:\r\n                Category: Source\r\n                Owner: ThirdParty\r\n                Version: 1\r\n                Provider: GitHub\r\n              Configuration:\r\n                Owner: !Ref githubUser\r\n                Repo: !Ref githubRepo\r\n                Branch: !Ref githubBranch\r\n                OAuthToken: !Ref githubToken\r\n              OutputArtifacts:\r\n                - Name: App\r\n              RunOrder: 1\r\n        - Name: Build\r\n          Actions:\r\n            - Name: Build\r\n              ActionTypeId:\r\n                Category: Build\r\n                Owner: AWS\r\n                Version: 1\r\n                Provider: CodeBuild\r\n              Configuration:\r\n                ProjectName: !Ref CodeBuildProject\r\n              InputArtifacts:\r\n                - Name: App\r\n              OutputArtifacts:\r\n                - Name: BuildOutput\r\n              RunOrder: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--power-bi-reports" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "power-bi-reports"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Query and Upsert functions for PowerBI SQL Server Reporting\"\n\nParameters:\n  serviceSubnets:\n    Description: \"The subnets the lambda should use (private).  Look for us-east-1 cirk private subnets\"\n    Type: \"List<AWS::EC2::Subnet::Id>\"\n\n  lambdaBuildBucket:\n    Type: \"String\"\n    Default: \"circlek-prod-cloudformation-builds\"\n\n  lambdaBuildFileKey:\n    Type: \"String\"\n    Default: \"power-bi-reporting/sql-batch-cloud.zip\"\n\n  resourcePrefix:\n    Type: \"String\"\n    Default: \"power-bi-reports-prod\"\n    Description: \"This will be appended to the beginning of almost all the resources created\"\n\n  s3BucketName:\n    Type: \"String\"\n    Default: \"circlek-prod-bi-reports\"\n\nResources:\n\n## Advertisement Query\n  AdQueryLambda:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n      - AdQueryLambdaLogGroup\n      - AdQueryLambdaRole\n    Properties:\n      Code:\n        S3Bucket: !Ref \"lambdaBuildBucket\"\n        S3Key: !Ref \"lambdaBuildFileKey\"\n      Description: \"Advertisement Query\"\n      FunctionName: !Sub '$${resourcePrefix}-ad-query'\n      # For Spring Boot Lambdas, do not specify the method name.\n      Handler: \"io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudHandler\"\n      MemorySize: 512\n      Role: !GetAtt \"AdQueryLambdaRole.Arn\"\n      Runtime: \"java8\"\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue \"PowerBiReports-SecurityGroupId\"\n        SubnetIds: !Ref serviceSubnets\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          DEBUG: 'false'\n          SPRING_PROFILES_ACTIVE: bi-ad-query\n          # Spring Cloud requires the entrance class to be explicitly defined\n          MAIN_CLASS: io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudApp\n\n  AdQueryLambdaRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub 'lambda-role-$${resourcePrefix}-ad-query'\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - \"sts:AssumeRole\"\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-ad-query:*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\n              - Action:\n                  - 's3:PutObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${s3BucketName}/*'\n              - Action:\n                  - 'cloudwatch:PutMetricData'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:DescribeNetworkInterfaces'\n                  - 'ec2:DeleteNetworkInterface'\n                Effect: Allow\n                Resource: '*'\n\n  AdQueryLambdaLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties:\n      LogGroupName: !Sub '/aws/lambda/$${resourcePrefix}-ad-query'\n      RetentionInDays: 7\n\n  AdQueryLambdaEvent:\n    Type: \"AWS::Events::Rule\"\n    Properties:\n      Name: !Sub '$${resourcePrefix}-ad-query-cron'\n      Description: 'Run the Advertisement Lambda daily at 4am'\n      ScheduleExpression: cron(15 4 * * ? *)\n      Targets:\n        - Id: !Sub '$${resourcePrefix}-ad-query-cron-target'\n          Arn: !GetAtt \"AdQueryLambda.Arn\"\n\n  AdQueryLambdaEventPermission:\n    Type: \"AWS::Lambda::Permission\"\n    Properties:\n      SourceArn: !GetAtt \"AdQueryLambdaEvent.Arn\"\n      FunctionName: !GetAtt \"AdQueryLambda.Arn\"\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n\n\n  ## ADVERTISEMENT UPSERT\n  AdUpsertLambda:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n      - AdUpsertLambdaLogGroup\n      - AdUpsertLambdaRole\n    Properties:\n      Code:\n        S3Bucket: !Ref \"lambdaBuildBucket\"\n        S3Key: !Ref \"lambdaBuildFileKey\"\n      Description: \"Advertisement Upsert\"\n      FunctionName: !Sub '$${resourcePrefix}-ad-upsert'\n      # For Spring Boot Lambdas, do not specify the method name.\n      Handler: \"io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudHandler\"\n      MemorySize: 512\n      Role: !GetAtt \"AdUpsertLambdaRole.Arn\"\n      Runtime: \"java8\"\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue \"PowerBiReports-SecurityGroupId\"\n        SubnetIds: !Ref serviceSubnets\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          DEBUG: 'false'\n          SPRING_PROFILES_ACTIVE: bi-ad-upsert\n          # Spring Cloud requires the entrance class to be explicitly defined\n          MAIN_CLASS: io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudApp\n\n  AdUpsertLambdaRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub 'lambda-role-$${resourcePrefix}-ad-upsert'\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - \"sts:AssumeRole\"\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-ad-upsert:*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${s3BucketName}/*'\n              - Action:\n                  - 'cloudwatch:PutMetricData'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:DescribeNetworkInterfaces'\n                  - 'ec2:DeleteNetworkInterface'\n                Effect: Allow\n                Resource: '*'\n\n  AdUpsertLambdaLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties:\n      LogGroupName: !Sub '/aws/lambda/$${resourcePrefix}-ad-upsert'\n      RetentionInDays: 7\n\n  AdUpsertLambdaEventPermission:\n    Type: \"AWS::Lambda::Permission\"\n    Properties:\n      SourceArn: !Sub \"arn:aws:s3:::$${s3BucketName}\"\n      FunctionName: !GetAtt \"AdUpsertLambda.Arn\"\n      Action: lambda:InvokeFunction\n      Principal: s3.amazonaws.com\n      # SourceAccount: !Ref \"AWS::AccountId\"\n\n\n  ## CASHIER QUERY\n  CashierQueryLambda:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n      - CashierQueryLambdaLogGroup\n      - CashierQueryLambdaRole\n    Properties:\n      Code:\n        S3Bucket: !Ref \"lambdaBuildBucket\"\n        S3Key: !Ref \"lambdaBuildFileKey\"\n      Description: \"Triggered from Cloud Watch Cron, Queries and Stores Last Week's Cashier Report\"\n      FunctionName: !Sub '$${resourcePrefix}-cashier-query'\n      # For Spring Boot Lambdas, do not specify the method name.\n      Handler: \"io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudHandler\"\n      MemorySize: 512\n      Role: !GetAtt \"CashierQueryLambdaRole.Arn\"\n      Runtime: \"java8\"\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue \"PowerBiReports-SecurityGroupId\"\n        SubnetIds: !Ref serviceSubnets\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          DEBUG: 'false'\n          SPRING_PROFILES_ACTIVE: bi-cashier-query\n          # Spring Cloud requires the entrance class to be explicitly defined\n          MAIN_CLASS: io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudApp\n\n  CashierQueryLambdaRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub 'lambda-role-$${resourcePrefix}-cashier-query'\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - \"sts:AssumeRole\"\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-cashier-query:*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource:\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\n              - Action:\n                  - 's3:PutObject'\n                Effect: Allow\n                Resource:\n                  - !Sub 'arn:aws:s3:::$${s3BucketName}/*'\n              - Action:\n                  - 'cloudwatch:PutMetricData'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:DescribeNetworkInterfaces'\n                  - 'ec2:DeleteNetworkInterface'\n                Effect: Allow\n                Resource: '*'\n\n  CashierQueryLambdaLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties:\n      LogGroupName: !Sub '/aws/lambda/$${resourcePrefix}-cashier-query'\n      RetentionInDays: 7\n\n  CashierQueryLambdaEvent:\n    Type: \"AWS::Events::Rule\"\n    Properties:\n      Name: !Sub '$${resourcePrefix}-cashier-query-cron'\n      Description: 'Run the Advertisement Lambda daily at 4am'\n      ScheduleExpression: cron(15 4 * * ? *)\n      Targets:\n        - Id: !Sub '$${resourcePrefix}-cashier-query-cron-target'\n          Arn: !GetAtt \"CashierQueryLambda.Arn\"\n\n  CashierQueryLambdaEventPermission:\n    Type: \"AWS::Lambda::Permission\"\n    Properties:\n      SourceArn: !GetAtt \"CashierQueryLambdaEvent.Arn\"\n      FunctionName: !GetAtt \"CashierQueryLambda.Arn\"\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n\n\n  ## CASHIER UPSERT\n  CashierUpsertLambda:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n      - CashierUpsertLambdaLogGroup\n      - CashierUpsertLambdaRole\n    Properties:\n      Code:\n        S3Bucket: !Ref \"lambdaBuildBucket\"\n        S3Key: !Ref \"lambdaBuildFileKey\"\n      Description: \"Cashier Upsert\"\n      FunctionName: !Sub '$${resourcePrefix}-cashier-upsert'\n      # For Spring Boot Lambdas, do not specify the method name.\n      Handler: \"io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudHandler\"\n      MemorySize: 512\n      Role: !GetAtt \"CashierUpsertLambdaRole.Arn\"\n      Runtime: \"java8\"\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n          - !ImportValue \"PowerBiReports-SecurityGroupId\"\n        SubnetIds: !Ref serviceSubnets\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          DEBUG: 'false'\n          SPRING_PROFILES_ACTIVE: bi-cashier-upsert\n          # Spring Cloud requires the entrance class to be explicitly defined\n          MAIN_CLASS: io.rcktapp.sql.sqlbatch.cloud.SqlBatchCloudApp\n\n  CashierUpsertLambdaRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub 'lambda-role-$${resourcePrefix}-cashier-upsert'\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - \"sts:AssumeRole\"\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-cashier-upsert:*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource: !Sub 'arn:aws:s3:::$${s3BucketName}/*'\n              - Action:\n                  - 'cloudwatch:PutMetricData'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:DescribeNetworkInterfaces'\n                  - 'ec2:DeleteNetworkInterface'\n                Effect: Allow\n                Resource: '*'\n\n  CashierUpsertLambdaLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties:\n      LogGroupName: !Sub '/aws/lambda/$${resourcePrefix}-cashier-upsert'\n      RetentionInDays: 7\n\n  CashierUpsertLambdaEventPermission:\n    Type: \"AWS::Lambda::Permission\"\n    Properties:\n      SourceArn: !Sub \"arn:aws:s3:::$${s3BucketName}\"\n      FunctionName: !GetAtt \"CashierUpsertLambda.Arn\"\n      Action: lambda:InvokeFunction\n      Principal: s3.amazonaws.com\n      # SourceAccount: !Ref \"AWS::AccountId\"\n\n  UpsertLamdbaS3Bucket:\n    Type: \"AWS::S3::Bucket\"\n#    DeletionPolicy: Retain\n    DependsOn:\n      - AdUpsertLambda\n      - AdUpsertLambdaEventPermission\n      - CashierUpsertLambda\n      - CashierUpsertLambdaEventPermission\n    Properties:\n      BucketName: !Sub \"$${s3BucketName}\"\n      NotificationConfiguration:\n        LambdaConfigurations:\n          - Event: 's3:ObjectCreated:Put'\n            Filter:\n              S3Key:\n                Rules:\n                  - Name: prefix\n                    Value: \"batch/ad/\"\n            Function: !GetAtt AdUpsertLambda.Arn\n          - Event: 's3:ObjectCreated:Put'\n            Filter:\n              S3Key:\n                Rules:\n                  - Name: prefix\n                    Value: \"batch/cashier/\"\n            Function: !GetAtt CashierUpsertLambda.Arn\n\nOutputs:\n  AdQueryLambdaArn:\n    Value: !GetAtt \"AdQueryLambda.Arn\"\n\n  AdUpsertLambdaArn:\n    Value: !GetAtt \"AdUpsertLambda.Arn\"\n\n  CashierQueryLambdaArn:\n    Value: !GetAtt \"CashierQueryLambda.Arn\"\n\n  CashierUpsertLambdaArn:\n    Value: !GetAtt \"CashierUpsertLambda.Arn\"\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--power-bi-reports-sg" {
  disable_rollback   = "false"
  name               = "power-bi-reports-sg"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Networking Security Group for PowerBI SQL Server Reporting\"\n\nParameters:\n  vpcId:\n    Description: The VPC that the lambda will utilize.\n    Type: AWS::EC2::VPC::Id\n\n  resourcePrefix:\n    Type: \"String\"\n    Default: \"power-bi-reports-prod\"\n    Description: \"This will be appended to the beginning of almost all the resources created\"\n\nResources:\n\n  PowerBiReportsSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub '$${resourcePrefix}-sg'\n      GroupDescription: !Sub \"Security Group for Power BI Report Lambdas\"\n      VpcId: !Ref vpcId\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub '$${resourcePrefix}-sg'\n\nOutputs:\n  PowerBiReportsSecurityGroupId:\n    Value: !GetAtt \"PowerBiReportsSecurityGroup.GroupId\"\n    Export:\n        Name: PowerBiReports-SecurityGroupId\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--pricebook-indexer-codepipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "pricebook-indexer-codepipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of ECS Service\nParameters:\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_pricebook_indexer\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: pricebook-indexer\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3BucketName:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ecs cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ecs service\n    Default: pricebook-indexer\n\n  ecrRepository:\n    Type: String\n    Description: Name of the ecr repository\n    Default: pricebook-indexer\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n  dockerContainerName:\n    Type: String\n    Description: Name of the docker container. This will also be used as the spring profile. For more information see the buildspec.yml\n    Default: player-pricebook-indexer-container\n\n  springProfile:\n    Type: String\n    Description: The spring profile to use. (Needed so the correct config is used at runtime) For more information see the buildspec.yml\n    Default: dev\n    AllowedValues:\n      - dev\n      - prod\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:PutMetricFilter\n                  - ecr:GetAuthorizationToken\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecrRepository}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecsService}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecrRepository}\n          - Name: CF_DOCKER_HUB_USERNAME\n            Value: !Ref dockerHubUsername\n          - Name: CF_DOCKER_HUB_PASSWORD\n            Value: !Ref dockerHubPassword\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Ref dockerContainerName\n          - Name: CF_SPRING_PROFILE\n            Value: !Ref springProfile\n          - Name: S3_BUCKET\n            Value: !Ref s3BucketName\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsService}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--pricebook-indexer-stack" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "pricebook-indexer-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\r\nDescription: Creates resources the Pricebook Indexer ECS Service\r\nParameters:\r\n  resourcePrefix:\r\n    Description: This will be prepended to many of the resources created\r\n    Type: String\r\n    Default: pricebook-indexer\r\n  ecsCluster:\r\n    Type: String\r\n    Description: Name of the ECS cluster\r\n    Default: player\r\n  ecsService:\r\n    Type: String\r\n    Description: Name of the ECS service\r\n    Default: pricebook-indexer\r\n  instanceCount:\r\n    AllowedValues:\r\n      - 1\r\n    Description: How many instances of this task should we run across our cluster?\r\n    Type: Number\r\n  rolePrefix:\r\n    Description: String to prefix IAM roles\r\n    Type: String\r\n    Default: cirk\r\n  serviceSubnets:\r\n    Description: The subnets the service should use (private)\r\n    Type: List<AWS::EC2::Subnet::Id>\r\n  vpcId:\r\n    Description: The VPC for the ECS Service\r\n    Type: AWS::EC2::VPC::Id\r\n  taskDefinitionImage:\r\n    Type: String\r\n    Default: pricebook-indexer\r\n  metricNamespace:\r\n    Type: String\r\n    Default: Pricebook Indexer Service\r\nResources:\r\n  Service:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - Queue\r\n      - DeadLetterQueue\r\n      - TaskDefinition\r\n    Properties:\r\n      Cluster: !Ref ecsCluster\r\n      ServiceName: !Ref ecsService\r\n      DesiredCount: !Ref instanceCount\r\n      LaunchType: FARGATE\r\n      TaskDefinition: !Ref TaskDefinition\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: DISABLED\r\n          Subnets: !Ref serviceSubnets\r\n          SecurityGroups:\r\n            - !Ref ServiceSecurityGroup\r\n\r\n  ServiceSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\r\n      VpcId: !Ref vpcId\r\n      SecurityGroupEgress:\r\n        - IpProtocol: \"-1\"\r\n          CidrIp: \"0.0.0.0/0\"\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\r\n  TaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - TaskRole\r\n    Properties:\r\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      NetworkMode: awsvpc\r\n      Cpu: 1024\r\n      Memory: 4096\r\n      TaskRoleArn: !GetAtt TaskRole.Arn\r\n      ExecutionRoleArn: !GetAtt TaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\r\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${taskDefinitionImage}:latest\r\n          Cpu: 1024\r\n          Memory: 4096\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: 8080\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-group: !Ref CloudWatchLogsGroup\r\n              awslogs-region: !Ref AWS::Region\r\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n  TaskRole:\r\n    Type: AWS::IAM::Role\r\n    DependsOn:\r\n      - CloudWatchLogsGroup\r\n    Properties:\r\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\r\n      AssumeRolePolicyDocument: |\r\n        {\r\n            \"Statement\": [{\r\n                \"Effect\": \"Allow\",\r\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\r\n                \"Action\": [ \"sts:AssumeRole\" ]\r\n            }]\r\n        }\r\n      Policies:\r\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                Effect: Allow\r\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\r\n              - Action:\r\n                  - 'ecr:GetAuthorizationToken'\r\n                  - 'ecr:BatchCheckLayerAvailability'\r\n                  - 'ecr:GetDownloadUrlForLayer'\r\n                  - 'ecr:BatchGetImage'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 's3:GetObject'\r\n                  - 's3:GetObject*'\r\n                  - 's3:PutObject'\r\n                  - 's3:ListBucket'\r\n                  - 's3:ListAllMyBuckets'\r\n                  - 's3:DeleteObject'\r\n                  - 'firehose:PutRecord'\r\n                  - 'firehose:PutRecordBatch'\r\n                  - 'sqs:*'\r\n                Effect: Allow\r\n                Resource: '*'\r\n  CloudWatchLogsGroup:\r\n    Type: AWS::Logs::LogGroup\r\n    Properties:\r\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\r\n      RetentionInDays: 30\r\n  Queue:\r\n    Type: AWS::SQS::Queue\r\n    Properties:\r\n      DelaySeconds: 0\r\n      MaximumMessageSize: 262144\r\n      MessageRetentionPeriod: 345600\r\n      QueueName: !Sub $${resourcePrefix}-queue\r\n      ReceiveMessageWaitTimeSeconds: 5\r\n      RedrivePolicy:\r\n        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn\r\n        maxReceiveCount: 5\r\n      VisibilityTimeout: 120\r\n  DeadLetterQueue:\r\n    Type: AWS::SQS::Queue\r\n    Properties:\r\n      DelaySeconds: 0\r\n      MessageRetentionPeriod: 345600\r\n      MaximumMessageSize: 262144\r\n      QueueName: !Sub $${resourcePrefix}-deadletter-queue\r\n      ReceiveMessageWaitTimeSeconds: 0\r\n      VisibilityTimeout: 120\r\n  SqsMessageProcessedSuccess:\r\n    Type: AWS::Logs::MetricFilter\r\n    DependsOn:\r\n      - CloudWatchLogsGroup\r\n      - Service\r\n    Properties:\r\n      FilterPattern: METRIC.COUNT.SQS_MESSAGE_SUCCESS\r\n      LogGroupName: !Ref CloudWatchLogsGroup\r\n      MetricTransformations:\r\n        - MetricNamespace: !Ref metricNamespace\r\n          MetricName: MessageSuccess\r\n          MetricValue: 1\r\n  SqsMessageProcessedError:\r\n    Type: AWS::Logs::MetricFilter\r\n    DependsOn:\r\n      - CloudWatchLogsGroup\r\n      - Service\r\n    Properties:\r\n      FilterPattern: METRIC.COUNT.SQS_MESSAGE_ERROR\r\n      LogGroupName: !Ref CloudWatchLogsGroup\r\n      MetricTransformations:\r\n        - MetricNamespace: !Ref metricNamespace\r\n          MetricName: MessageError\r\n          MetricValue: 1\r\n  PricebookIndexerFailure:\r\n    Type: AWS::Logs::MetricFilter\r\n    DependsOn:\r\n      - CloudWatchLogsGroup\r\n      - Service\r\n    Properties:\r\n      FilterPattern: METRIC.COUNT.PRICEBOOK_INDEXER_FAILURE\r\n      LogGroupName: !Ref CloudWatchLogsGroup\r\n      MetricTransformations:\r\n         - MetricNamespace: !Ref metricNamespace\r\n           MetricName: PricebookIndexerFailure\r\n           MetricValue: 1\r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--reports-ecs" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "reports-ecs"
  template_body      = "Description: Build \u0026 ECS resources for Legacy Reports\n\nParameters:\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017\n      - 64deb6688dcdede5/1f54e68e8b044ee4\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: reports\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 2\n\n  loadbalancerSubnets:\n    Description: The subnets the loadbalancer should use be internal/private\n    Type: List<AWS::EC2::Subnet::Id>\n\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n\n  sslCertificateArn:\n    Type: String\n    Default: arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n    Default: vpc-072a71590b8c6a80c\n\nResources:\n  ApplicationLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      IpAddressType: ipv4\n      Name: !Sub $${ecsService}-alb\n      Scheme: internal\n      Subnets: !Ref loadbalancerSubnets\n      SecurityGroups:\n        - !Ref ServiceSecurityGroup\n      Type: application\n\n  ALBListenerPort443:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - ApplicationLoadBalancer\n    Properties:\n      LoadBalancerArn: !Ref ApplicationLoadBalancer\n      Port: 443\n      Protocol: HTTPS\n      Certificates:\n        - CertificateArn: !Ref sslCertificateArn\n      DefaultActions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  ALBListenerPort80:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - ApplicationLoadBalancer\n    Properties:\n      LoadBalancerArn: !Ref ApplicationLoadBalancer\n      Port: 80\n      Protocol: HTTP\n      DefaultActions:\n        - Type: redirect\n          RedirectConfig:\n            Host: \"#{host}\"\n            Path: \"/#{path}\"\n            Port: 443\n            Protocol: \"HTTPS\"\n            Query: \"#{query}\"\n            StatusCode: HTTP_302\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    DependsOn:\n      - ALBListenerPort443\n    Properties:\n      ListenerArn: !Ref ALBListenerPort443\n      Priority: 1\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /$${ecsService}*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub $${ecsService}-group\n      GroupDescription: !Sub Security Group for ECS service $${ecsService}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: \"0.0.0.0/0\"\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: \"0.0.0.0/0\"\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsService}-sg\n\n  Cluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: !Ref ecsService\n\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - Cluster\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsService\n      ServiceName: !Sub $${ecsService}-service\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsService}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsService}\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsService}-tg\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Sub /$${ecsService}/\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - \"logs:CreateLogGroup\"\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - \"ecr:GetAuthorizationToken\"\n                  - \"ecr:BatchCheckLayerAvailability\"\n                  - \"ecr:GetDownloadUrlForLayer\"\n                  - \"ecr:BatchGetImage\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                  - \"cloudwatch:PutMetricData\"\n                  - \"s3:GetObject\"\n                  - \"s3:GetObject*\"\n                  - \"s3:PutObject\"\n                  - \"s3:ListBucket\"\n                  - \"s3:ListAllMyBuckets\"\n                Effect: Allow\n                Resource: \"*\"\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsService}\n      RetentionInDays: 30\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--reports-pipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "reports-pipeline"
  template_body      = "Description: CodePipeline, Build, and Deployment of ECS Service\n\nParameters:\n  ecsServiceCluster:\n    Type: String\n    Description: Name of the ECS service cluster\n    Default: reports\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: reports\n\n  githubBranch:\n    Type: String\n    Description: The branch of the repo to continuously deploy.\n    AllowedValues:\n      - dev\n      - deploy-prod\n\n  githubRepo:\n    Type: String\n    Description: The repo name\n    Default: liftck_gen2_legacy_reports\n\n  githubToken:\n    Type: String\n    NoEcho: true\n\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\n    Default: RocketPartners\n\n  s3BucketName:\n    Type: String\n    Description: Name of S3 bucket to use for codepipeline artifacts\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n\n  dockerHubUsername:\n    Default: rocketpartnersdockerhub\n    Description: Docker Hub username. Used for CodeBuild to login\n    Type: String\n\n  dockerHubPassword:\n    Description: Docker Hub password. Used for CodeBuild to login\n    NoEcho: true\n    Type: String\n\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecsServiceCluster}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Sub $${ecsServiceCluster}-container\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsServiceCluster}\n          - Name: CF_SERVICE\n            Value: !Sub $${ecsServiceCluster}\n          - Name: CF_DOCKERHUB_USERNAME\n            Value: !Sub $${dockerHubUsername}\n          - Name: CF_DOCKERHUB_PASSWORD\n            Value: !Sub $${dockerHubPassword}\n      Name: !Sub $${ecsServiceCluster}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsServiceCluster}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsServiceCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--rocket-etl-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "rocket-etl-pipeline"
  template_body      = "Description: >\n  CodePipeline for the Rocket ETL Lambda\nParameters:\n  environment:\n    Type: String\n    Default: dev\n    AllowedValues:\n      - dev\n      - prod\n    Description: Sets environment for resources.\n\n  githubBranch:\n    Type: String\n    Default: master\n    AllowedValues:\n      - master\n      - develop\n    Description: The branch of the repo to continuously deploy.\n\n  githubRepo:\n    Type: String\n    Default: rocket-etl\n    Description: The repo\n\n  githubToken:\n    Type: String\n    Description: Token for the user specified above.\n    NoEcho: true\n\n  githubUser:\n    Type: String\n    Description: The repo owner on GitHub.\n    Default: RocketPartners\n\n  pipelineName:\n    Type: String\n    Default: rocket-etl-api-pipeline\n    Description: The name of the pipeline.\n\n  resourcePrefix:\n    Type: String\n    Default: rocket-etl\n    Description: This will be appended to the beginning of almost all the resources created\n\n  vpcId:\n    Description: The VPC ID for DB access\n    Type: AWS::EC2::VPC::Id\n\n  subnetIDs:\n    Description: The subnet ID for DB access\n    Type: String\n\n  lambdaS3Bucket:\n    Description: Bucket to put files in\n    Type: String\n\n  s3Bucket:\n    Type: String\n    Default: cirk-dev-codepipeline-artifacts\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - codedeploy:*\n                  - lambda:*\n                  - cloudformation:CreateChangeSet\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - s3:*\n                  - events:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - ec2:*\n                  - ssm:Get*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - s3:*\n                  - cloudformation:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:UpdateStack\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${pipelineName}-build\n      Name: !Sub $${pipelineName}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref pipelineName\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"resourcePrefix\": \"$${resourcePrefix}\", \"envType\": \"$${environment}\", \"vpcId\": \"$${vpcId}\", \"subnetIDs\": \"$${subnetIDs}\", \"lambdaS3Bucket\": \"$${lambdaS3Bucket}\"}'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--rocket-etl-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/rocket-etl-lambda-role"
  name               = "rocket-etl-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: Creates serverless resources for Rocket ETL\nParameters:\n  awsRegion:\n    Default: us-east-1\n    Type: String\n  envType:\n    AllowedValues:\n    - prod\n    - dev\n    Description: The environment for deployment.\n    Type: String\n  lambdaS3Bucket:\n    Description: Bucket to put files in\n    Type: String\n  resourcePrefix:\n    Default: rocket-etl\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\n  subnetIDs:\n    Description: The subnet ID for DB access\n    Type: List<AWS::EC2::Subnet::Id>\n  vpcId:\n    Description: The VPC for DB access\n    Type: AWS::EC2::VPC::Id\nResources:\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\n  LambdaSecurityGroup:\n    Properties:\n      GroupDescription:\n        Fn::Sub: Security Group for the $${resourcePrefix} lambda\n      GroupName:\n        Fn::Sub: sec-grp-$${resourcePrefix}-lambda\n      SecurityGroupEgress:\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: '-1'\n      Tags:\n      - Key: Name\n        Value:\n          Fn::Sub: ec-grp-$${resourcePrefix}-lambda\n      VpcId:\n        Ref: vpcId\n    Type: AWS::EC2::SecurityGroup\n  RocketEtlLambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/rocket-etl-api-pipeline-build/a0dc4220b9c83352c64b20f86bfe47bf\n      Description:\n        Fn::Sub: $${resourcePrefix} API Lambda\n      Environment:\n        Variables:\n          DEBUG: true\n      Events: null\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: io.rocketpartners.etl.lambda.DataExporterImporterLambda::handleRequest\n      MemorySize: 1024\n      Policies:\n      - AWSLambdaExecute\n      - Statement:\n        - Action:\n          - s3:GetObject\n          - s3:PutObject\n          - s3:GetObjectACL\n          Effect: Allow\n          Resource:\n            Ref: lambdaS3Bucket\n        Version: '2012-10-17'\n      - Statement:\n        - Action:\n          - ec2:CreateNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DeleteNetworkInterface\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      - Statement:\n        - Action:\n          - ssm:Get*\n          Effect: Allow\n          Resource: '*'\n        Version: '2012-10-17'\n      ReservedConcurrentExecutions: 1\n      Runtime: java8\n      Timeout: 900\n      VpcConfig:\n        SecurityGroupIds:\n        - Ref: LambdaSecurityGroup\n        SubnetIds:\n          Ref: subnetIDs\n    Type: AWS::Serverless::Function\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--row-copier-items-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "row-copier-items-prod"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Row Copier Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"row_copier/rckt_cron-0.2.0.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"row-copier-x-prod\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n    \r\n  config:\r\n    Type: \"String\"\r\n    Default: \"REPLACE WITH VALID JSON!!!\"\r\n    Description: \"json config for the lambda\"\r\n\r\n\r\nResources:\r\n\r\n\r\n  ##################################  ROW COPIER CRON\r\n  RowCopierCronLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - RowCopierCronLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Triggered from Row Copier Cron, copy rows from one table to another\"\r\n      FunctionName: !Sub $${resourcePrefix}-row-copier-cron\r\n      Handler: \"io.rcktapp.cron.sql.RowCopierLambdaHandler::handleRequest\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"RowCopierCronRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 900\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref LambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          config: !Ref \"config\"\r\n\r\n  RowCopierCronRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}-row-copier-cron\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-row-copier-cron:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              \r\n                \r\n  RowCopierCronLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-row-copier-cron-log\r\n      RetentionInDays: 7\r\n\r\n  RowCopierCronEvent:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-row-copier-cron-event        \r\n      Description: 'Run the RowCopierCron Lambda 8:10am UTC'\r\n      ScheduleExpression: cron(10 8 * * ? *)\r\n      Targets:\r\n        - Id: !Sub $${resourcePrefix}-row-copier-cron-event-target\r\n          Arn: !GetAtt \"RowCopierCronLambda.Arn\"\r\n\r\n  RowCopierCronEventPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      SourceArn: !GetAtt \"RowCopierCronEvent.Arn\"\r\n      FunctionName: !GetAtt \"RowCopierCronLambda.Arn\"\r\n      Action: lambda:InvokeFunction\r\n      Principal: events.amazonaws.com\r\n      \r\n  LambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg \r\n      GroupDescription: !Sub \"Security Group for Lambda\"\r\n      VpcId: !Ref vpcId\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg \r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--row-copier-locationlegacy-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "row-copier-locationlegacy-prod"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Row Copier Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"row_copier/rckt_cron-0.2.0.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"row-copier-x-prod\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n    \r\n  config:\r\n    Type: \"String\"\r\n    Default: \"REPLACE WITH VALID JSON!!!\"\r\n    Description: \"json config for the lambda\"\r\n\r\n\r\nResources:\r\n\r\n\r\n  ##################################  ROW COPIER CRON\r\n  RowCopierCronLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - RowCopierCronLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Triggered from Row Copier Cron, copy rows from one table to another\"\r\n      FunctionName: !Sub $${resourcePrefix}-row-copier-cron\r\n      Handler: \"io.rcktapp.cron.sql.RowCopierLambdaHandler::handleRequest\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"RowCopierCronRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 900\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref LambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          config: !Ref \"config\"\r\n\r\n  RowCopierCronRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}-row-copier-cron\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-row-copier-cron:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              \r\n                \r\n  RowCopierCronLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-row-copier-cron-log\r\n      RetentionInDays: 7\r\n\r\n  RowCopierCronEvent:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-row-copier-cron-event        \r\n      Description: 'Run the RowCopierCron Lambda 8:10am UTC'\r\n      ScheduleExpression: cron(10 8 * * ? *)\r\n      Targets:\r\n        - Id: !Sub $${resourcePrefix}-row-copier-cron-event-target\r\n          Arn: !GetAtt \"RowCopierCronLambda.Arn\"\r\n\r\n  RowCopierCronEventPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      SourceArn: !GetAtt \"RowCopierCronEvent.Arn\"\r\n      FunctionName: !GetAtt \"RowCopierCronLambda.Arn\"\r\n      Action: lambda:InvokeFunction\r\n      Principal: events.amazonaws.com\r\n      \r\n  LambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg \r\n      GroupDescription: !Sub \"Security Group for Lambda\"\r\n      VpcId: !Ref vpcId\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg \r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--row-copier-locations-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "row-copier-locations-prod"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Row Copier Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"row_copier/rckt_cron-0.2.0.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"row-copier-x-prod\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n    \r\n  config:\r\n    Type: \"String\"\r\n    Default: \"REPLACE WITH VALID JSON!!!\"\r\n    Description: \"json config for the lambda\"\r\n\r\n\r\nResources:\r\n\r\n\r\n  ##################################  ROW COPIER CRON\r\n  RowCopierCronLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - RowCopierCronLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Triggered from Row Copier Cron, copy rows from one table to another\"\r\n      FunctionName: !Sub $${resourcePrefix}-row-copier-cron\r\n      Handler: \"io.rcktapp.cron.sql.RowCopierLambdaHandler::handleRequest\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"RowCopierCronRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 900\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref LambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          config: !Ref \"config\"\r\n\r\n  RowCopierCronRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}-row-copier-cron\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-row-copier-cron:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              \r\n                \r\n  RowCopierCronLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-row-copier-cron-log\r\n      RetentionInDays: 7\r\n\r\n  RowCopierCronEvent:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-row-copier-cron-event        \r\n      Description: 'Run the RowCopierCron Lambda 8:10am UTC'\r\n      ScheduleExpression: cron(10 8 * * ? *)\r\n      Targets:\r\n        - Id: !Sub $${resourcePrefix}-row-copier-cron-event-target\r\n          Arn: !GetAtt \"RowCopierCronLambda.Arn\"\r\n\r\n  RowCopierCronEventPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      SourceArn: !GetAtt \"RowCopierCronEvent.Arn\"\r\n      FunctionName: !GetAtt \"RowCopierCronLambda.Arn\"\r\n      Action: lambda:InvokeFunction\r\n      Principal: events.amazonaws.com\r\n      \r\n  LambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg \r\n      GroupDescription: !Sub \"Security Group for Lambda\"\r\n      VpcId: !Ref vpcId\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg \r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--row-copier-playerlegacy-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "row-copier-playerlegacy-prod"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"Row Copier Stack\"\n\nParameters:\n  vpcId:\n    Description: The VPC that the lambda should use\n    Type: AWS::EC2::VPC::Id\n\n  serviceSubnets:\n    Description: \"The subnets the lambda should use (private)\"\n    Type: \"List<AWS::EC2::Subnet::Id>\"\n\n  lambdaBuildBucket:\n    Type: \"String\"\n    Default: \"circlek-prod-cloudformation-builds\"\n\n  lambdaBuildFileKey:\n    Type: \"String\"\n    Default: \"row_copier/rckt_cron-0.2.0.zip\"\n\n  resourcePrefix:\n    Type: \"String\"\n    Default: \"row-copier-x-prod\"\n    Description: \"This will be appended to the beginning of almost all the resources created\"\n    \n  config:\n    Type: \"String\"\n    Default: \"REPLACE WITH VALID JSON!!!\"\n    Description: \"json config for the lambda\"\n\n\nResources:\n\n\n  ##################################  ROW COPIER CRON\n  RowCopierCronLambda:\n    Type: \"AWS::Lambda::Function\"\n    DependsOn:\n      - RowCopierCronLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref \"lambdaBuildBucket\"\n        S3Key: !Ref \"lambdaBuildFileKey\"\n      Description: \"Triggered from Row Copier Cron, copy rows from one table to another\"\n      FunctionName: !Sub $${resourcePrefix}-row-copier-cron\n      Handler: \"io.rcktapp.cron.sql.RowCopierLambdaHandler::handleRequest\"\n      MemorySize: 512\n      Role: !GetAtt \"RowCopierCronRole.Arn\"\n      Runtime: \"java8\"\n      Timeout: 900\n      ReservedConcurrentExecutions: 1\n      VpcConfig:\n        SecurityGroupIds:\n        - !Ref LambdaSecurityGroup\n        SubnetIds: !Ref serviceSubnets\n      Environment:\n        Variables:\n          DEBUG: 'true'\n          config: !Ref \"config\"\n\n  RowCopierCronRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      RoleName: !Sub lambda-role-$${resourcePrefix}-row-copier-cron\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Action:\n              - \"sts:AssumeRole\"\n            Effect: \"Allow\"\n            Principal:\n              Service:\n                - \"lambda.amazonaws.com\"\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Effect: Allow\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-row-copier-cron:*\n              - Action:\n                  - 's3:GetObject'\n                Effect: Allow\n                Resource:\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\n              - Action:\n                  - 'cloudwatch:PutMetricData'\n                  - 'ec2:CreateNetworkInterface'\n                  - 'ec2:DescribeNetworkInterfaces'\n                  - 'ec2:DeleteNetworkInterface'\n                Effect: Allow\n                Resource: '*'\n              \n                \n  RowCopierCronLogGroup:\n    Type: \"AWS::Logs::LogGroup\"\n    Properties:\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-row-copier-cron-log\n      RetentionInDays: 7\n\n  RowCopierCronEvent:\n    Type: \"AWS::Events::Rule\"\n    Properties:\n      Name: !Sub $${resourcePrefix}-row-copier-cron-event        \n      Description: 'Run the RowCopierCron Lambda 8:10am UTC'\n      ScheduleExpression: cron(10 8 * * ? *)\n      Targets:\n        - Id: !Sub $${resourcePrefix}-row-copier-cron-event-target\n          Arn: !GetAtt \"RowCopierCronLambda.Arn\"\n\n  RowCopierCronEventPermission:\n    Type: \"AWS::Lambda::Permission\"\n    Properties:\n      SourceArn: !GetAtt \"RowCopierCronEvent.Arn\"\n      FunctionName: !GetAtt \"RowCopierCronLambda.Arn\"\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n      \n  LambdaSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub $${resourcePrefix}-sg \n      GroupDescription: !Sub \"Security Group for Lambda\"\n      VpcId: !Ref vpcId\n      Tags:\n        - Key: Name\n          Value: !Sub $${resourcePrefix}-sg \n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--row-copier-players-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "row-copier-players-prod"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Row Copier Stack\"\r\n\r\nParameters:\r\n  vpcId:\r\n    Description: The VPC that the lambda should use\r\n    Type: AWS::EC2::VPC::Id\r\n\r\n  serviceSubnets:\r\n    Description: \"The subnets the lambda should use (private)\"\r\n    Type: \"List<AWS::EC2::Subnet::Id>\"\r\n\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"row_copier/rckt_cron-0.2.0.zip\"\r\n\r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"row-copier-x-prod\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"\r\n    \r\n  config:\r\n    Type: \"String\"\r\n    Default: \"REPLACE WITH VALID JSON!!!\"\r\n    Description: \"json config for the lambda\"\r\n\r\n\r\nResources:\r\n\r\n\r\n  ##################################  ROW COPIER CRON\r\n  RowCopierCronLambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - RowCopierCronLogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Triggered from Row Copier Cron, copy rows from one table to another\"\r\n      FunctionName: !Sub $${resourcePrefix}-row-copier-cron\r\n      Handler: \"io.rcktapp.cron.sql.RowCopierLambdaHandler::handleRequest\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"RowCopierCronRole.Arn\"\r\n      Runtime: \"java8\"\r\n      Timeout: 900\r\n      ReservedConcurrentExecutions: 1\r\n      VpcConfig:\r\n        SecurityGroupIds:\r\n        - !Ref LambdaSecurityGroup\r\n        SubnetIds: !Ref serviceSubnets\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n          config: !Ref \"config\"\r\n\r\n  RowCopierCronRole:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}-row-copier-cron\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-row-copier-cron:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                  - 'ec2:CreateNetworkInterface'\r\n                  - 'ec2:DescribeNetworkInterfaces'\r\n                  - 'ec2:DeleteNetworkInterface'\r\n                Effect: Allow\r\n                Resource: '*'\r\n              \r\n                \r\n  RowCopierCronLogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}-row-copier-cron-log\r\n      RetentionInDays: 7\r\n\r\n  RowCopierCronEvent:\r\n    Type: \"AWS::Events::Rule\"\r\n    Properties:\r\n      Name: !Sub $${resourcePrefix}-row-copier-cron-event        \r\n      Description: 'Run the RowCopierCron Lambda 8:10am UTC'\r\n      ScheduleExpression: cron(10 8 * * ? *)\r\n      Targets:\r\n        - Id: !Sub $${resourcePrefix}-row-copier-cron-event-target\r\n          Arn: !GetAtt \"RowCopierCronLambda.Arn\"\r\n\r\n  RowCopierCronEventPermission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      SourceArn: !GetAtt \"RowCopierCronEvent.Arn\"\r\n      FunctionName: !GetAtt \"RowCopierCronLambda.Arn\"\r\n      Action: lambda:InvokeFunction\r\n      Principal: events.amazonaws.com\r\n      \r\n  LambdaSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupName: !Sub $${resourcePrefix}-sg \r\n      GroupDescription: !Sub \"Security Group for Lambda\"\r\n      VpcId: !Ref vpcId\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub $${resourcePrefix}-sg \r\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--screenshot-maker" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "screenshot-maker"
  template_body      = "AWSTemplateFormatVersion: \"2010-09-09\"\r\nDescription: \"Screenshot Lambda/API Gateway\"\r\n\r\nParameters:\r\n  lambdaBuildBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n\r\n  lambdaBuildFileKey:\r\n    Type: \"String\"\r\n    Default: \"screenshot-maker/liftck_screenshot_maker-0.0.1.zip\"\r\n    \r\n  lambdaLayerBucket:\r\n    Type: \"String\"\r\n    Default: \"circlek-prod-cloudformation-builds\"\r\n    \r\n  lambdaLayerFileKey:\r\n    Type: \"String\"\r\n    Default: \"screenshot-maker/chrome-aws-lambda.zip\"\r\n    \r\n  resourcePrefix:\r\n    Type: \"String\"\r\n    Default: \"screenshot-maker\"\r\n    Description: \"This will be appended to the beginning of almost all the resources created\"    \r\n\r\n  apiGatewayStageName:\r\n    Type: \"String\"\r\n    AllowedPattern: \"^[a-z0-9]+$\"\r\n    Default: \"prod\"\r\n\r\n  apiGatewayDomainName:\r\n    Type: \"String\"\r\n    Default: \"screenshot.circleklift.com\"\r\n\r\n  apiGatewayCertificateArn:\r\n    Type: \"String\"\r\n    Default: \"arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\"  \r\n\r\n# ckmarketing cert arn:    arn:aws:acm:us-east-1:713044078609:certificate/e07269dc-c92d-411a-9890-906a726a98e1\r\n# circle k dev cert arn:   arn:aws:acm:us-east-1:627729951075:certificate/2d487163-01f8-4296-8d32-ea8e4b483273\r\n# curcle k prod cert arn:  arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\r\n# circlekliftdev.com cert arn: arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\r\n# circleklift.com cert arn: arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\r\n\r\n\r\nResources:\r\n  Lambda:\r\n    Type: \"AWS::Lambda::Function\"\r\n    DependsOn:\r\n      - LogGroup\r\n    Properties:\r\n      Code:\r\n        S3Bucket: !Ref \"lambdaBuildBucket\"\r\n        S3Key: !Ref \"lambdaBuildFileKey\"\r\n      Description: \"Screenshot Maker Lambda\"\r\n      FunctionName: !Sub $${resourcePrefix}\r\n      Handler: \"index.handler\"\r\n      MemorySize: 512\r\n      Role: !GetAtt \"Role.Arn\"\r\n      Runtime: \"nodejs8.10\"\r\n      Layers: \r\n        - !Ref ChromePuppeteerLayer\r\n      Timeout: 15\r\n      Environment:\r\n        Variables:\r\n          DEBUG: 'true'\r\n\r\n  ChromePuppeteerLayer:\r\n    Type: \"AWS::Lambda::LayerVersion\"\r\n    Properties:\r\n      CompatibleRuntimes:\r\n        - \"nodejs8.10\"\r\n      Content:\r\n        S3Bucket: !Ref \"lambdaLayerBucket\"\r\n        S3Key: !Ref \"lambdaLayerFileKey\"\r\n      Description: \"Headless Chromium and Puppeteer-core\"\r\n      LayerName: \"chrome-aws-lambda_w_puppeteer-core\"\r\n      LicenseInfo: \"MIT\"\r\n      \r\n  Role:\r\n    Type: \"AWS::IAM::Role\"\r\n    Properties:\r\n      RoleName: !Sub lambda-role-$${resourcePrefix}\r\n      AssumeRolePolicyDocument:\r\n        Version: \"2012-10-17\"\r\n        Statement:\r\n          - Action:\r\n              - \"sts:AssumeRole\"\r\n            Effect: \"Allow\"\r\n            Principal:\r\n              Service:\r\n                - \"lambda.amazonaws.com\"\r\n      Policies:\r\n        - PolicyName: lambda\r\n          PolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              - Action:\r\n                  - 'logs:CreateLogGroup'\r\n                  - 'logs:CreateLogStream'\r\n                  - 'logs:PutLogEvents'\r\n                Effect: Allow\r\n                Resource: !Sub arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}:*\r\n              - Action:\r\n                  - 's3:GetObject'\r\n                Effect: Allow\r\n                Resource:\r\n                  - !Sub 'arn:aws:s3:::$${lambdaBuildBucket}/*'\r\n                  - !Sub 'arn:aws:s3:::$${lambdaLayerBucket}/*'\r\n              - Action:\r\n                  - 'cloudwatch:PutMetricData'\r\n                Effect: Allow\r\n                Resource: '*'\r\n\r\n  LogGroup:\r\n    Type: \"AWS::Logs::LogGroup\"\r\n    Properties:\r\n      LogGroupName: !Sub /aws/lambda/$${resourcePrefix}\r\n      RetentionInDays: 7\r\n\r\n  Permission:\r\n    Type: \"AWS::Lambda::Permission\"\r\n    Properties:\r\n      Action: \"lambda:InvokeFunction\"\r\n      FunctionName: !GetAtt \"Lambda.Arn\"\r\n      Principal: \"apigateway.amazonaws.com\"\r\n      SourceArn: !Sub \"arn:aws:execute-api:$${AWS::Region}:$${AWS::AccountId}:$${Gateway}/*/*\"\r\n\r\n  Gateway:\r\n    Type: \"AWS::ApiGateway::RestApi\"\r\n    Properties:\r\n      Name: !Sub \"$${resourcePrefix}-api-gateway\"\r\n      Description: \"Screenshot Maker Api Gateway\"\r\n      BinaryMediaTypes:\r\n        - \"*/*\"\r\n      \r\n\r\n  Resource:\r\n    Type: \"AWS::ApiGateway::Resource\"\r\n    Properties:\r\n      RestApiId: !Ref Gateway\r\n      ParentId: !GetAtt Gateway.RootResourceId\r\n      PathPart: '{proxy+}'\r\n\r\n  Method:\r\n    Type: \"AWS::ApiGateway::Method\"\r\n    Properties:\r\n      AuthorizationType: \"NONE\"\r\n      HttpMethod: \"ANY\"\r\n      Integration:\r\n        IntegrationHttpMethod: \"POST\"\r\n        Type: \"AWS_PROXY\"\r\n        Uri: !Sub\r\n          - \"arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/$${lambdaArn}/invocations\"\r\n          - lambdaArn: !GetAtt \"Lambda.Arn\"\r\n#        IntegrationResponses:\r\n#          ContentHandling: \"CONVERT_TO_BINARY\"\r\n#          StatusCode: \"200\"\r\n      ResourceId: !Ref Resource\r\n      RestApiId: !Ref Gateway\r\n      MethodResponses:\r\n        - StatusCode: \"200\"\r\n\r\n  Deployment:\r\n    Type: \"AWS::ApiGateway::Deployment\"\r\n    DependsOn:\r\n      - \"Method\"\r\n    Properties:\r\n      RestApiId: !Ref Gateway\r\n      StageName: !Ref \"apiGatewayStageName\"\r\n\r\n  Domain:\r\n    Type: 'AWS::ApiGateway::DomainName'\r\n    Properties:\r\n      DomainName: !Ref \"apiGatewayDomainName\"\r\n      EndpointConfiguration:\r\n        Types:\r\n          - REGIONAL\r\n      RegionalCertificateArn: !Ref \"apiGatewayCertificateArn\"\r\n\r\n  DomainMapping:\r\n    Type: 'AWS::ApiGateway::BasePathMapping'\r\n    DependsOn:\r\n      - \"Deployment\"\r\n    Properties:\r\n      DomainName: !Ref Domain\r\n      RestApiId: !Ref Gateway\r\n      BasePath: ''\r\n      Stage: !Ref \"apiGatewayStageName\""
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--sip-and-save-frontend-pipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "sip-and-save-frontend-pipeline"
  template_body      = "Description: CICD for Sip-and-Save Frontend\n\nParameters:\n  distributionId:\n    AllowedValues:\n      - E31S36BUPBU4US\n      - E3KVPGCKOL3QIB\n    Description: CloudFront distribution ID\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Type: String\n    Description: The branch of the repo to continuously deploy. (dev)\n\n  githubRepo:\n    Default: sip-and-save-frontend\n    Type: String\n\n  githubToken:\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Type: String\n\n  resourcePrefix:\n    Default: sip-and-save-frontend\n    Type: String\n\n  s3BucketName:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  s3SourceBucket:\n    AllowedValues:\n      - sip-and-save.circlekoffersdev.com\n      - sip-and-save.circlekoffers.com\n    Type: String\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}/*\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:DeleteObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource:\n                  - !Sub arn:aws:cloudfront::$${AWS::AccountId}:distribution/$${distributionId}\n                Effect: Allow\n                Action:\n                  - cloudfront:CreateInvalidation\n                  - cloudfront:UpdateDistribution\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: buildspec.yml\n      Environment:\n        ComputeType: BUILD_GENERAL1_MEDIUM\n        EnvironmentVariables:\n          - Name: ENVIRONMENT\n            Type: PLAINTEXT\n            Value: !Ref environment\n        Image: aws/codebuild/standard:5.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: false\n      Name: !Sub $${resourcePrefix}-pipeline\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 2\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--sms-opt-in-prod" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "sms-opt-in-prod"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: SMS OptIn Lambda/API Gateway/Dynamo/SQS Stack\n\nParameters:\n  ageVerifyApiKey:\n    NoEcho: true\n    Type: String\n\n  ageVerifyUrl:\n    AllowedValues:\n      - https://age-verification.circlekliftdev.com/api/verify\n      - https://age-verification.circleklift.com/api/verify\n    Type: String\n\n  apiKeys:\n    Type: String\n    NoEcho: true\n    Description: A comma-separated list of API Keys to be used to authenticate incoming API requests\n\n  apiGatewayCertificateArn:\n    Type: String\n    Default: arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\n    Description: 0f6 is for circlekliftdev.com; 459 is for circleklift.com; d3c is for liftck.com\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\n\n  apiGatewayDomainName:\n    Type: String\n    Default: sms-opt-in.liftck.com\n    AllowedValues:\n      - sms-opt-in.circlekliftdev.com\n      - sms-opt-in.liftck.com\n\n  apiGatewayStageName:\n    AllowedPattern: '^[a-z0-9]+$'\n    AllowedValues:\n      - dev\n      - prod\n    Default: prod\n    Type: String\n\n  canSendSms:\n    AllowedValues:\n      - true\n      - false\n    Default: true\n    Type: String\n\n  dynamoTableName:\n    AllowedValues:\n      - sms-opt-in-dev\n      - sms-opt-in-prod\n    Default: sms-opt-in-prod\n    Type: String\n\n  endTime:\n    AllowedValues:\n      - '23:00'\n    Type: String\n\n  firehoseAccessKey:\n    Default: \"\"\n    Description: This is used for dev to write to Redshift. This should be blank in production\n    NoEcho: true\n    Type: String\n\n  firehoseSecretKey:\n    Default: \"\"\n    Description: This is used for dev to write to Redshift. This should be blank in production\n    NoEcho: true\n    Type: String\n\n  firehoseStreamName:\n    AllowedValues:\n      - circleklift-sms-opt-in-dev\n      - circleklift-sms-opt-in\n    Default: circleklift-sms-opt-in\n    Type: String\n\n  lambdaBuildBucket:\n    AllowedValues:\n      - circlek-dev-cloudformation-builds\n      - circlek-prod-cloudformation-builds\n    Default: circlek-prod-cloudformation-builds\n    Type: String\n\n  lambdaBuildFileKey:\n    Default: sms_opt_in/liftck_sms_opt_in-0.0.1.zip\n    Type: String\n\n  maxFailedMessageBeforeInvalid:\n    Default: 3\n    Type: String\n\n  maxSqsRetryCount:\n    Default: 3\n    Type: String\n\n  metricNamespace:\n    Default: SMS Service\n    Type: String\n\n  metricNamespaceErrors:\n    Default: SMS Errors\n    Type: String\n\n  mobivityAuthPassword:\n    NoEcho: true\n    Type: String\n\n  mobivityAuthUsername:\n    AllowedValues:\n      - rocketpartnertestapi\n      - RP253279API\n    Type: String\n\n  mobivityTargetId:\n    AllowedValues:\n      - 4317620\n      - 4318532\n    Description: 4317620 is dev, 4318532 is prod\n    Type: String\n\n  mobivityUrl:\n    AllowedValues:\n      - https://mobivityapihandler.appspot.com/api/v3\n    Type: String\n\n  oniApiKey:\n    Type: String\n    NoEcho: true\n    Description: The API key that is required for all ONI requests\n\n  oniHostUrl:\n    AllowedValues:\n      - https://qa-apm-ap-lift-api-us-e.azure-api.net\n      - https://lift.allpoints.io\n    Default: https://lift.allpoints.io\n    Description: The host URL that is used to update ONI when a user's opt-in status changes\n    Type: String\n\n  oniRetailerGuids:\n    Description: 'Comma-separated string of ONI retailer guids. Example: DDDDDDDD-1111-AAAA-CCCC-7654,99999999-2222-BBBB-CCCC-7654'\n    NoEcho: true\n    Type: String\n\n  resourcePrefix:\n    AllowedValues:\n      - sms-opt-in-dev\n      - sms-opt-in-prod\n    Default: sms-opt-in-prod\n    Description: This will be appended to the beginning of almost all the resources created\n    Type: String\n\n  s3BucketName:\n    AllowedValues:\n      - circlek-dev-sms-opt-in\n      - circlek-prod-sms-opt-in\n    Default: circlek-prod-sms-opt-in\n    Type: String\n\n  serviceSubnets:\n    Description: The subnets the lambda should use (private) (only used for SmsApiLambda)\n    Type: List<AWS::EC2::Subnet::Id>\n\n  shortCode:\n    AllowedValues:\n      - 253279\n    Description: Mobivity - 4317620 is dev, 4318532 is prod. 253279 is the shortcode\n    Type: String\n\n  smsProvider:\n    AllowedValues:\n      - mobivity\n    Type: String\n\n  smsSimulationSleepTime:\n    Default: 0\n    Description: Set to 300 when testing performance in dev\n    Type: String\n\n  snsAlarmDisplayName:\n    AllowedValues:\n      - sms-alarms-dev\n      - sms-alarms\n    Type: String\n\n  sqsOutBoundQueueUrl:\n    AllowedValues:\n      - https://sqs.us-east-1.amazonaws.com/627729951075/sms-opt-in-dev-outbound-sms\n      - https://sqs.us-east-1.amazonaws.com/799611636099/sms-opt-in-prod-outbound-sms\n    Type: String\n\n  sqsOutBoundCampaignQueueUrl:\n    AllowedValues:\n      - https://sqs.us-east-1.amazonaws.com/627729951075/sms-opt-in-dev-outbound-campaign-sms\n      - https://sqs.us-east-1.amazonaws.com/799611636099/sms-opt-in-prod-outbound-campaign-sms\n    Type: String\n\n  startTime:\n    AllowedValues:\n      - '16:00'\n    Type: String\n\n  twilioAccountSid:\n    Description: The Twilio account SID\n    NoEcho: true\n    Type: String\n\n  twilioAuthToken:\n    Description: The auth token used to authenticate incoming Twilio requests\n    NoEcho: true\n    Type: String\n\n  twilioMessagingServiceSid:\n    Description: The Twilio message SID\n    NoEcho: true\n    Type: String\n\n  twilioWebhookUrl:\n    Type: String\n    AllowedValues:\n      - https://sms-opt-in.circlekliftdev.com/sms/twilio-webhook\n      - https://sms-opt-in.circleklift.com/sms/twilio-webhook\n\n  vpcId:\n    Description: The VPC that the lambda should use (only used for SmsApiLambda)\n    Type: AWS::EC2::VPC::Id\n\n  webhookUrl:\n    Type: String\n    AllowedValues:\n      - https://sms-opt-in.circlekliftdev.com/sms/webhook\n      - https://sms-opt-in.circleklift.com/sms/webhook\n\n# ckmarketing cert arn:    arn:aws:acm:us-east-1:713044078609:certificate/e07269dc-c92d-411a-9890-906a726a98e1\n# circle k dev cert arn:   arn:aws:acm:us-east-1:627729951075:certificate/2d487163-01f8-4296-8d32-ea8e4b483273\n# circle k prod cert arn:  arn:aws:acm:us-east-1:799611636099:certificate/d3c937e9-dcf9-4c9e-9b14-a471115ee7dc\n\nMappings:\n  Constants:\n    dynamoToSqs:\n      value: dynamo-to-sqs\n    outboundCampaignSMS:\n      value: outbound-campaign-sms\n    outboundSMS:\n      value: outbound-sms\n    inboundSMS:\n      value: inbound-sms\n    campaignSchedule:\n      value: campaign-schedule\n    campaignWorker:\n      value: campaign-worker\n    followUpCron:\n      value: follow-up-cron\n    pendingMsgCron:\n      value: pending-msg-cron\n    smsApi:\n      value: sms-api\n\nResources:\n  S3Bucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref s3BucketName\n\n  DynamoTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: !Ref dynamoTableName\n      AttributeDefinitions:\n        - AttributeName: pk\n          AttributeType: S\n        - AttributeName: sk\n          AttributeType: S\n        - AttributeName: gspk1\n          AttributeType: S\n        - AttributeName: gssk1\n          AttributeType: S\n      KeySchema:\n        - AttributeName: pk\n          KeyType: HASH\n        - AttributeName: sk\n          KeyType: RANGE\n      BillingMode: PAY_PER_REQUEST\n      StreamSpecification:\n        StreamViewType: NEW_IMAGE\n      GlobalSecondaryIndexes:\n        - IndexName: GSI1\n          KeySchema:\n            - AttributeName: gspk1\n              KeyType: HASH\n            - AttributeName: gssk1\n              KeyType: RANGE\n          Projection:\n            ProjectionType: ALL\n\n  OutboundSmsQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-outbound-sms\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n      RedrivePolicy:\n        deadLetterTargetArn: !GetAtt OutboundSmsDeadLetter.Arn\n        maxReceiveCount: 5\n\n  OutboundSmsDeadLetter:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-outbound-sms-deadletter\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n\n  OutboundCampaignSmsQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-outbound-campaign-sms\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n      RedrivePolicy:\n        deadLetterTargetArn: !GetAtt OutboundCampaignSmsDeadLetter.Arn\n        maxReceiveCount: 5\n\n  OutboundCampaignSmsDeadLetter:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-outbound-campaign-sms-deadletter\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n\n  InboundSmsQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-inbound-sms\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n      RedrivePolicy:\n        deadLetterTargetArn: !GetAtt InboundSmsDeadLetter.Arn\n        maxReceiveCount: 5\n\n  InboundSmsDeadLetter:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-inbound-sms-deadletter\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n\n  ##################################  DYNAMO TO SMS\n  DynamoToSqsLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - OutboundSmsQueue\n      - DynamoToSqsLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Sms Opt In Dynamo Table Stream Events to Sqs queue\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ] }\n      Handler: com.liftck.smsoptin.lambda.DynamoEventToSqsHandler::handleRequest\n      MemorySize: 2048\n      Role: !GetAtt DynamoToSqsRole.Arn\n      Runtime: java8\n      Timeout: 15\n      Environment:\n        Variables:\n          DEBUG: true\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          firehoseAccessKey: !Ref firehoseAccessKey\n          firehoseSecretKey: !Ref firehoseSecretKey\n          firehoseStreamName: !Ref firehoseStreamName\n          smsProvider: !Ref smsProvider\n          SMS_OUTBOUND_QUEUE: !Ref OutboundSmsQueue\n          SMS_OUTBOUND_CAMPAIGN_QUEUE: !Ref OutboundCampaignSmsQueue\n          SMS_INBOUND_QUEUE: !Ref InboundSmsQueue\n\n  DynamoToSqsRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${dynamoToSqs}:*\n                  - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ] }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !GetAtt DynamoTable.StreamArn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - sqs:SendMessage\n                Effect: Allow\n                Resource:\n                  - !GetAtt OutboundSmsQueue.Arn\n                  - !GetAtt OutboundCampaignSmsQueue.Arn\n              - Action:\n                  - sqs:SendMessage\n                Effect: Allow\n                Resource:\n                  - !GetAtt InboundSmsQueue.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n              - Action:\n                  - firehose:PutRecord\n                  - firehose:PutRecordBatch\n                Effect: Allow\n                Resource: !Sub arn:aws:firehose:$${AWS::Region}:$${AWS::AccountId}:deliverystream/circleklift-sms-opt-in\n\n  DynamoToSqsLambdaFirehoseError:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - DynamoToSqsLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.SEND_RECORD_TO_FIREHOSE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: SendToFirehoseError\n          MetricValue: 1\n\n  DynamoToSqsLambdaNumberParseError:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - DynamoToSqsLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.NUMBER_PARSE_ERROR\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: NumberParseError\n          MetricValue: 1\n\n  DynamoToSqsLambdaFirehoseClientBuildError:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - DynamoToSqsLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.FIREHOSE_CLIENT_BUILDER\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: FirehoseClientBuildError\n          MetricValue: 1\n\n  DynamoToSqsLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${dynamoToSqs}\n        - { dynamoToSqs: !FindInMap [ Constants, dynamoToSqs, value ] }\n      RetentionInDays: 7\n\n  DynamoTableStream:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      BatchSize: 100\n      Enabled: True\n      EventSourceArn: !GetAtt DynamoTable.StreamArn\n      FunctionName: !GetAtt DynamoToSqsLambda.Arn\n      MaximumBatchingWindowInSeconds: 3\n      ParallelizationFactor: 3\n      StartingPosition: LATEST\n\n  ##################################  OUTBOUND CAMPAIGN SMS\n  OutboundCampaignSMSLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - OutboundCampaignSmsQueue\n      - OutboundCampaignSMSLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from SQS queue, sends outbound SMS messages\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      Handler: com.liftck.smsoptin.lambda.OutboundSmsSqsHandler::handleRequest\n      MemorySize: 2048\n      Role: !GetAtt OutboundCampaignSMSRole.Arn\n      Runtime: java8\n      Timeout: 15\n      ReservedConcurrentExecutions: 0 # 85\n      Environment:\n        Variables:\n          DEBUG: true\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          apiKeys: !Ref apiKeys\n          canSendSms: !Ref canSendSms\n          dynamoTable: !Ref dynamoTableName\n          maxFailedMessageBeforeInvalid: !Ref maxFailedMessageBeforeInvalid\n          maxSqsRetryCount: !Ref maxSqsRetryCount\n          mobivityAuthPassword: !Ref mobivityAuthPassword\n          mobivityAuthUsername: !Ref mobivityAuthUsername\n          mobivityTargetId: !Ref mobivityTargetId\n          mobivityUrl: !Ref mobivityUrl\n          shortCode: !Ref shortCode\n          smsProvider: !Ref smsProvider\n          smsSimulationSleepTime: !Ref smsSimulationSleepTime\n          sqsOutBoundQueueUrl: !Ref sqsOutBoundCampaignQueueUrl\n          twilioAuthToken: !Ref twilioAuthToken\n          twilioAccountSid: !Ref twilioAccountSid\n          twilioMessagingServiceSid: !Ref twilioMessagingServiceSid\n          twilioWebhookUrl: !Ref twilioWebhookUrl\n          verificationEnabled: true\n          webhookUrl: !Ref webhookUrl\n\n  OutboundCampaignSMSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}:*\n                  - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - sqs:SendMessage\n                  - sqs:ReceiveMessage\n                  - sqs:DeleteMessage\n                  - sqs:GetQueueAttributes\n                Effect: Allow\n                Resource:\n                  - !GetAtt OutboundCampaignSmsQueue.Arn\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  OutboundCampaignSMSLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      RetentionInDays: 7\n\n  OutboundCampaignSMSMetricFilterExpiredSqs:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.EXPIRED_SQS_MESSAGE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignExpiredSqsMessage\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterInvalidNumber:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.INVALID_NUMBER\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignInvalidNumber\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterOptedIn:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_OPTED_IN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutOptedIn\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterPrompt:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_PROMPT\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutPrompt\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterManualSend:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_MANUAL_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutManualSend\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterYes:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_YES\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutYes\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterNo:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_NO\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutNo\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterUnknown:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutUnknown\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterFollowUp:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_FOLLOW_UP\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutFollowUp\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricRetry:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.COUNT.RETRY\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMessageOutRetry\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricErrorDynamoLock:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.DYNAMO_LOCK\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignMessageOutErrorDynamoLock\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricErrorFinalUpdate:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.FINAL_UPDATE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignMessageOutErrorFinalUpdate\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilter3PlusSend:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.24_HOUR_3PLUS_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignDuplicateMessage3PlusSend\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilter10PlusSend:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.24_HOUR_10PLUS_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignDuplicateMessage10PlusSend\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterDuplicateMessage:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.DUPLICATE_MESSAGE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignDuplicateMessage\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricFilterMaxSendAttempt:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.CAMPAIGN_MAX_SEND_ATTEMPT\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: CampaignMaxSendAttempt\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricErrorTwilioFailed:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.TWILIO_FAILED\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignMessageOutErrorTwilioFailed\n          MetricValue: 1\n\n  OutboundCampaignSMSMetricErrorTwilioUnknown:\n    Type: AWS::Logs::MetricFilter\n    DependsOn:\n      - OutboundCampaignSMSLambda\n    Properties:\n      FilterPattern: METRIC.ERROR.TWILIO_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundCampaignSMS}\n        - { outboundCampaignSMS: !FindInMap [ Constants, outboundCampaignSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: CampaignMessageOutErrorTwilioUnknown\n          MetricValue: 1\n\n  OutboundCampaignSMSEventSource:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      BatchSize: 1\n      Enabled: True\n      EventSourceArn: !GetAtt OutboundCampaignSmsQueue.Arn\n      FunctionName: !GetAtt OutboundCampaignSMSLambda.Arn\n\n  ##################################  OUTBOUND SMS\n  OutboundSMSLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - OutboundSmsQueue\n      - OutboundSMSLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from SQS queue, sends outbound SMS messages\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ] }\n      Handler: com.liftck.smsoptin.lambda.OutboundSmsSqsHandler::handleRequest\n      MemorySize: 2048\n      Role: !GetAtt OutboundSMSRole.Arn\n      Runtime: java8\n      Timeout: 15\n      ReservedConcurrentExecutions: 10\n      Environment:\n        Variables:\n          DEBUG: true\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          apiKeys: !Ref apiKeys\n          canSendSms: !Ref canSendSms\n          dynamoTable: !Ref dynamoTableName\n          maxFailedMessageBeforeInvalid: !Ref maxFailedMessageBeforeInvalid\n          maxSqsRetryCount: !Ref maxSqsRetryCount\n          mobivityAuthPassword: !Ref mobivityAuthPassword\n          mobivityTargetId: !Ref mobivityTargetId\n          mobivityAuthUsername: !Ref mobivityAuthUsername\n          mobivityUrl: !Ref mobivityUrl\n          shortCode: !Ref shortCode\n          smsProvider: !Ref smsProvider\n          sqsOutBoundQueueUrl: !Ref sqsOutBoundQueueUrl\n          twilioAccountSid: !Ref twilioAccountSid\n          twilioAuthToken: !Ref twilioAuthToken\n          twilioMessagingServiceSid: !Ref twilioMessagingServiceSid\n          twilioWebhookUrl: !Ref twilioWebhookUrl\n          verificationEnabled: true\n          webhookUrl: !Ref webhookUrl\n\n  OutboundSMSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${outboundSMS}:*\n                  - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ] }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - sqs:SendMessage\n                  - sqs:ReceiveMessage\n                  - sqs:DeleteMessage\n                  - sqs:GetQueueAttributes\n                Effect: Allow\n                Resource:\n                  - !GetAtt OutboundSmsQueue.Arn\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  OutboundSMSLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ] }\n      RetentionInDays: 7\n\n  OutboundSMSMetricFilterExpiredSqs:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.EXPIRED_SQS_MESSAGE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: ExpiredSqsMessage\n          MetricValue: 1\n\n  OutboundSMSMetricFilterInvalidNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.INVALID_NUMBER\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: InvalidNumber\n          MetricValue: 1\n\n  OutboundSMSMetricFilterOptedIn:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_OPTED_IN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutOptedIn\n          MetricValue: 1\n\n  OutboundSMSMetricFilter3PlusSend:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.24_HOUR_3PLUS_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: DuplicateMessage3PlusSend\n          MetricValue: 1\n\n  OutboundSMSMetricFilter10PlusSend:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.24_HOUR_10PLUS_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: DuplicateMessage10PlusSend\n          MetricValue: 1\n\n  OutboundSMSMetricFilterDuplicateMessage:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.DUPLICATE_MESSAGE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: DuplicateMessage\n          MetricValue: 1\n\n  OutboundSMSMetricFilterMaxSendAttempt:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.CAMPAIGN_MAX_SEND_ATTEMPT\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MaxSendAttempt\n          MetricValue: 1\n\n  OutboundSMSMetricFilterPrompt:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_PROMPT\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - {\n          outboundSMS:\n            !FindInMap [ Constants, outboundSMS, value ],\n        }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutPrompt\n          MetricValue: 1\n\n  OutboundSMSMetricFilterManualSend:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_MANUAL_SEND\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutManualSend\n          MetricValue: 1\n\n  OutboundSMSMetricFilterYes:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_YES\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutYes\n          MetricValue: 1\n\n  OutboundSMSMetricFilterNo:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_NO\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutNo\n          MetricValue: 1\n\n  OutboundSMSMetricFilterUnknown:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutUnknown\n          MetricValue: 1\n\n  OutboundSMSMetricFilterFollowUp:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.MESSAGE_OUT_FOLLOW_UP\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutFollowUp\n          MetricValue: 1\n\n  OutboundSMSMetricRetry:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.RETRY\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: MessageOutRetry\n          MetricValue: 1\n\n  OutboundSMSMetricErrorDynamoLock:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.DYNAMO_LOCK\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: MessageOutErrorDynamoLock\n          MetricValue: 1\n\n  OutboundSMSMetricErrorFinalUpdate:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.FINAL_UPDATE\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: MessageOutErrorFinalUpdate\n          MetricValue: 1\n\n  OutboundSMSMetricErrorTwilioFailed:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.TWILIO_FAILED\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: MessageOutErrorTwilioFailed\n          MetricValue: 1\n\n  OutboundSMSMetricErrorTwilioUnknown:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.ERROR.TWILIO_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespaceErrors\n          MetricName: MessageOutErrorTwilioUnknown\n          MetricValue: 1\n\n  OutboundSMSMetricValidatePhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.VALIDATE_PHONE_NUMBER\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: ValidatePhoneNumber\n          MetricValue: 1\n\n  OutboundSMSMetricValidPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_VALID\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: ValidPhoneNumber\n          MetricValue: 1\n\n  OutboundSMSMetricInvalidPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_INVALID\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: InvalidPhoneNumber\n          MetricValue: 1\n\n  OutboundSMSMetricUnknownPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${outboundSMS}\n        - { outboundSMS: !FindInMap [ Constants, outboundSMS, value ], }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: UnknownPhoneNumber\n          MetricValue: 1\n\n  OutboundSMSEventSource:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      BatchSize: 1\n      Enabled: True\n      EventSourceArn: !GetAtt OutboundSmsQueue.Arn\n      FunctionName: !GetAtt OutboundSMSLambda.Arn\n\n  ##################################  INBOUND SMS\n  InboundSMSLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - InboundSmsQueue\n      - InboundSMSLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from SQS queue, handles incoming SMS message received from Twilio webhook\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${inboundSMS}\n        - { inboundSMS: !FindInMap [ Constants, inboundSMS, value ] }\n      Handler: com.liftck.smsoptin.lambda.InboundSmsSqsHandler::handleRequest\n      MemorySize: 512\n      Role: !GetAtt InboundSMSRole.Arn\n      Runtime: java8\n      Timeout: 15\n      VpcConfig:\n        SecurityGroupIds:\n          - !Ref InboundSMSSecurityGroup\n        SubnetIds: !Ref serviceSubnets\n      Environment:\n        Variables:\n          DEBUG: true\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          oniHostUrl: !Ref oniHostUrl\n          oniApiKey: !Ref oniApiKey\n          oniRetailerGuids: !Ref oniRetailerGuids\n          smsProvider: !Ref smsProvider\n          twilioAuthToken: !Ref twilioAuthToken\n          twilioAccountSid: !Ref twilioAccountSid\n          twilioMessagingServiceSid: !Ref twilioMessagingServiceSid\n\n  InboundSMSSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub\n        - $${resourcePrefix}-$${smsApi}-sg\n        - { smsApi: !FindInMap [ Constants, inboundSMS, value ] }\n      GroupDescription: !Sub Security Group for Inbound SMS Lambda\n      VpcId: !Ref vpcId\n      SecurityGroupEgress:\n        - IpProtocol: -1\n          CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: Name\n          Value: !Sub\n            - $${resourcePrefix}-$${smsApi}-sg\n            - { smsApi: !FindInMap [ Constants, inboundSMS, value ] }\n\n  InboundSMSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${inboundSMS}\n        - { inboundSMS: !FindInMap [ Constants, inboundSMS, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${inboundSMS}:*\n                  - { inboundSMS: !FindInMap [ Constants, inboundSMS, value ] }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - sqs:ReceiveMessage\n                  - sqs:DeleteMessage\n                  - sqs:GetQueueAttributes\n                Effect: Allow\n                Resource:\n                  - !GetAtt InboundSmsQueue.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                  - ec2:CreateNetworkInterface\n                  - ec2:DescribeNetworkInterfaces\n                  - ec2:DeleteNetworkInterface\n                Effect: Allow\n                Resource: '*'\n\n  InboundSMSLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${inboundSMS}\n        - { inboundSMS: !FindInMap [ Constants, inboundSMS, value ] }\n      RetentionInDays: 7\n\n  InboundSMSEventSource:\n    Type: AWS::Lambda::EventSourceMapping\n    Properties:\n      BatchSize: 1\n      Enabled: True\n      EventSourceArn: !GetAtt InboundSmsQueue.Arn\n      FunctionName: !GetAtt InboundSMSLambda.Arn\n\n  ##################################  CAMPAIGN WORKER\n  CampaignWorkerLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - CampaignWorkerLogGroup\n      - CampaignWorkerDeadLetter\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from the CampaignScheduleHandler to process split files to send records\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${campaignWorker}\n        - { campaignWorker: !FindInMap [ Constants, campaignWorker, value ] }\n      Handler: com.liftck.smsoptin.lambda.CampaignWorkerHandler::handleRequest\n      MemorySize: 2048\n      Role: !GetAtt CampaignWorkerRole.Arn\n      Runtime: java8\n      Timeout: 900\n      DeadLetterConfig:\n        TargetArn: !GetAtt CampaignWorkerDeadLetter.Arn\n      Environment:\n        Variables:\n          DEBUG: true\n          DYNAMO_TABLE: !Ref dynamoTableName\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          smsProvider: !Ref smsProvider\n\n  CampaignWorkerRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${campaignWorker}\n        - { campaignWorker: !FindInMap [ Constants, campaignWorker, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${campaignWorker}:*\n                  - {\n                    campaignWorker:\n                      !FindInMap [ Constants, campaignWorker, value ],\n                  }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - sqs:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt CampaignWorkerDeadLetter.Arn\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt S3Bucket.Arn\n                  - !Sub\n                    - $${s3Arn}/*\n                    - s3Arn: !GetAtt S3Bucket.Arn\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  CampaignWorkerLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${campaignWorker}\n        - { campaignWorker: !FindInMap [ Constants, campaignWorker, value ] }\n      RetentionInDays: 7\n\n  CampaignWorkerDeadLetter:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub $${resourcePrefix}-campaign-worker-sms-deadletter\n      VisibilityTimeout: 120\n      MessageRetentionPeriod: 345600\n      DelaySeconds: 0\n      ReceiveMessageWaitTimeSeconds: 0\n      MaximumMessageSize: 262144\n\n  ##################################  CAMPAIGN SCHEDULE\n  CampaignScheduleLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - CampaignScheduleLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from Cloud Watch Cron, creates send records in dynamo\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${campaignSchedule}\n        - { campaignSchedule: !FindInMap [ Constants, campaignSchedule, value ] }\n      Handler: com.liftck.smsoptin.lambda.CampaignScheduleHandler::handleRequest\n      MemorySize: 2048\n      Role: !GetAtt CampaignScheduleRole.Arn\n      Runtime: java8\n      Timeout: 900\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          smsProvider: !Ref smsProvider\n          DEBUG: true\n          BUCKET: !Ref s3BucketName\n          DYNAMO_TABLE: !Ref dynamoTableName\n          START_TIME: !Ref startTime\n          END_TIME: !Ref endTime\n          MAX_BYTES_PER_FILE: 30000\n          ROWS_PER_FILE: 2000\n          WORKER_LAMBDA_FUNCTION_NAME: !Sub\n            - $${resourcePrefix}-$${campaignWorker}\n            - { campaignWorker: !FindInMap [ Constants, campaignWorker, value ] }\n\n  CampaignScheduleRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${campaignSchedule}\n        - { campaignSchedule: !FindInMap [ Constants, campaignSchedule, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${campaignSchedule}:*\n                  - {\n                    campaignSchedule:\n                      !FindInMap [ Constants, campaignSchedule, value ],\n                  }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - s3:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt S3Bucket.Arn\n                  - !Sub\n                    - $${s3Arn}/*\n                    - s3Arn: !GetAtt S3Bucket.Arn\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - lambda:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt CampaignWorkerLambda.Arn\n                  - !Sub\n                    - $${campaignWorkerLambdaArn}/*\n                    - campaignWorkerLambdaArn: !GetAtt CampaignWorkerLambda.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  CampaignScheduleLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${campaignSchedule}\n        - { campaignSchedule: !FindInMap [ Constants, campaignSchedule, value ] }\n      RetentionInDays: 7\n\n  CampaignScheduleEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub\n        - $${resourcePrefix}-$${campaignSchedule}-cron\n        - { campaignSchedule: !FindInMap [ Constants, campaignSchedule, value ] }\n      Description: Run the SMS Opt-In CampaignSchedule Lambda every 15 mins - every day - 11am-6pm EST\n      ScheduleExpression: cron(5/15 15-23 ? * * *)\n      Targets:\n        - Id: !Sub\n            - $${resourcePrefix}-$${campaignSchedule}-cron-target\n            - {\n              campaignSchedule:\n                !FindInMap [ Constants, campaignSchedule, value ],\n            }\n          Arn: !GetAtt CampaignScheduleLambda.Arn\n\n  CampaignScheduleEventPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      SourceArn: !GetAtt CampaignScheduleEvent.Arn\n      FunctionName: !GetAtt CampaignScheduleLambda.Arn\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n\n  ##################################  FOLLOW UP CRON\n  FollowUpCronLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - FollowUpCronLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from Cloud Watch Cron, send follow-up prompt messages as needed\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${followUpCron}\n        - { followUpCron: !FindInMap [ Constants, followUpCron, value ] }\n      Handler: com.liftck.smsoptin.lambda.FollowUpPromptCron::handleRequest\n      MemorySize: 512\n      Role: !GetAtt FollowUpCronRole.Arn\n      Runtime: java8\n      Timeout: 900\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          smsProvider: !Ref smsProvider\n          DEBUG: true\n          DYNAMO_TABLE: !Ref dynamoTableName\n          START_TIME: !Ref startTime\n          END_TIME: !Ref endTime\n\n  FollowUpCronRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${followUpCron}\n        - { followUpCron: !FindInMap [ Constants, followUpCron, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${followUpCron}:*\n                  - {\n                    followUpCron: !FindInMap [ Constants, followUpCron, value ],\n                  }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  FollowUpCronLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${followUpCron}\n        - { followUpCron: !FindInMap [ Constants, followUpCron, value ] }\n      RetentionInDays: 7\n\n  FollowUpCronEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub\n        - $${resourcePrefix}-$${followUpCron}-cron\n        - { followUpCron: !FindInMap [ Constants, followUpCron, value ] }\n      Description: Run the SMS Opt-In FollowUpCron Lambda every 20 mins - 11am-9pm EST\n      ScheduleExpression: cron(0/20 15-1 ? * * *)\n      Targets:\n        - Id: !Sub\n            - $${resourcePrefix}-$${followUpCron}-cron-target\n            - { followUpCron: !FindInMap [ Constants, followUpCron, value ] }\n          Arn: !GetAtt FollowUpCronLambda.Arn\n\n  FollowUpCronEventPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      SourceArn: !GetAtt FollowUpCronEvent.Arn\n      FunctionName: !GetAtt FollowUpCronLambda.Arn\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n\n  ##################################  PENDING MESSAGE CRON\n  PendingMsgCronLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - PendingMsgCronLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: Triggered from Cloud Watch Cron, update pending out messages to sending status\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${pendingMsgCron}\n        - { pendingMsgCron: !FindInMap [ Constants, pendingMsgCron, value ] }\n      Handler: com.liftck.smsoptin.lambda.PendingMessagesCron::handleRequest\n      MemorySize: 512\n      Role: !GetAtt PendingMsgCronRole.Arn\n      Runtime: java8\n      Timeout: 900\n      ReservedConcurrentExecutions: 1\n      Environment:\n        Variables:\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          smsProvider: !Ref smsProvider\n          DEBUG: true\n          DYNAMO_TABLE: !Ref dynamoTableName\n\n  PendingMsgCronRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${pendingMsgCron}\n        - { pendingMsgCron: !FindInMap [ Constants, pendingMsgCron, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${pendingMsgCron}:*\n                  - {\n                    pendingMsgCron:\n                      !FindInMap [ Constants, pendingMsgCron, value ],\n                  }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                Effect: Allow\n                Resource: '*'\n\n  PendingMsgCronLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${pendingMsgCron}\n        - { pendingMsgCron: !FindInMap [ Constants, pendingMsgCron, value ] }\n      RetentionInDays: 7\n\n  PendingMsgCronEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub\n        - $${resourcePrefix}-$${pendingMsgCron}-cron\n        - { pendingMsgCron: !FindInMap [ Constants, pendingMsgCron, value ] }\n      Description: Run the Pending Message Cron Lambda every 20 mins - 10am-10pm EST\n      ScheduleExpression: cron(15/20 14-2 ? * * *)\n      Targets:\n        - Id: !Sub\n            - $${resourcePrefix}-$${pendingMsgCron}-cron-target\n            - { pendingMsgCron: !FindInMap [ Constants, pendingMsgCron, value ] }\n          Arn: !GetAtt PendingMsgCronLambda.Arn\n\n  PendingMsgCronEventPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      SourceArn: !GetAtt PendingMsgCronEvent.Arn\n      FunctionName: !GetAtt PendingMsgCronLambda.Arn\n      Action: lambda:InvokeFunction\n      Principal: events.amazonaws.com\n\n  ##################################  SMS API\n  SmsApiLambda:\n    Type: AWS::Lambda::Function\n    DependsOn:\n      - SmsApiLogGroup\n    Properties:\n      Code:\n        S3Bucket: !Ref lambdaBuildBucket\n        S3Key: !Ref lambdaBuildFileKey\n      Description: SMS Opt-in Api\n      FunctionName: !Sub\n        - $${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      Handler: com.liftck.smsoptin.lambda.SmsOptInLambdaHandler::handleRequest\n      MemorySize: 768\n      Role: !GetAtt SmsApiRole.Arn\n      Runtime: java8\n      Timeout: 180\n      VpcConfig:\n        SecurityGroupIds:\n          - !Ref SmsApiSecurityGroup\n        SubnetIds: !Ref serviceSubnets\n      Environment:\n        Variables:\n          DEBUG: true\n          ageVerifyApiKey: !Ref ageVerifyApiKey\n          ageVerifyUrl: !Ref ageVerifyUrl\n          apiKeys: !Ref apiKeys\n          dynamoTable: !Ref dynamoTableName\n          mobivityAuthPassword: !Ref mobivityAuthPassword\n          mobivityTargetId: !Ref mobivityTargetId\n          mobivityAuthUsername: !Ref mobivityAuthUsername\n          mobivityUrl: !Ref mobivityUrl\n          shortCode: !Ref shortCode\n          smsProvider: !Ref smsProvider\n          twilioAccountSid: !Ref twilioAccountSid\n          twilioAuthToken: !Ref twilioAuthToken\n          twilioMessagingServiceSid: !Ref twilioMessagingServiceSid\n          twilioWebhookUrl: !Ref twilioWebhookUrl\n          webhookUrl: !Ref webhookUrl\n\n  SmsApiSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub\n        - $${resourcePrefix}-$${smsApi}-sg\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      GroupDescription: !Sub Security Group for SMS API Lambda\n      VpcId: !Ref vpcId\n      SecurityGroupEgress:\n        - IpProtocol: -1\n          CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: Name\n          Value: !Sub\n            - $${resourcePrefix}-$${smsApi}-sg\n            - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n\n  SmsApiRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub\n        - lambda-role-$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      Policies:\n        - PolicyName: lambda\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Effect: Allow\n                Resource: !Sub\n                  - arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:log-group:/aws/lambda/$${resourcePrefix}-$${smsApi}:*\n                  - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n              - Action:\n                  - s3:GetObject\n                Effect: Allow\n                Resource:\n                  - !Sub arn:aws:s3:::$${lambdaBuildBucket}/*\n              - Action:\n                  - dynamodb:*\n                Effect: Allow\n                Resource:\n                  - !GetAtt DynamoTable.Arn\n                  - !Sub\n                    - $${dynamoArn}/*\n                    - dynamoArn: !GetAtt DynamoTable.Arn\n              - Action:\n                  - cloudwatch:PutMetricData\n                  - ec2:CreateNetworkInterface\n                  - ec2:DescribeNetworkInterfaces\n                  - ec2:DeleteNetworkInterface\n                Effect: Allow\n                Resource: '*'\n\n  SmsApiLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      RetentionInDays: 7\n\n  SmsApiPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt SmsApiLambda.Arn\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Sub arn:aws:execute-api:$${AWS::Region}:$${AWS::AccountId}:$${SmsApiGateway}/*/*\n\n  SmsApiMetricValidatePhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.VALIDATE_PHONE_NUMBER\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: ValidatePhoneNumber\n          MetricValue: 1\n\n  SmsApiMetricValidPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_VALID\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: ValidPhoneNumber\n          MetricValue: 1\n\n\n  SmsApiMetricInvalidPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_INVALID\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: InvalidPhoneNumber\n          MetricValue: 1\n\n\n  SmsApiMetricUnknownPhoneNumber:\n    Type: AWS::Logs::MetricFilter\n    Properties:\n      FilterPattern: METRIC.COUNT.PHONE_VALIDATION_UNKNOWN\n      LogGroupName: !Sub\n        - /aws/lambda/$${resourcePrefix}-$${smsApi}\n        - { smsApi: !FindInMap [ Constants, smsApi, value ] }\n      MetricTransformations:\n        - MetricNamespace: !Ref metricNamespace\n          MetricName: UnknownPhoneNumber\n          MetricValue: 1\n\n  SmsApiGateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub $${resourcePrefix}-sms-api-gateway\n      Description: SMS Opt-In Api Gateway\n\n  SmsApiResource:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref SmsApiGateway\n      ParentId: !GetAtt SmsApiGateway.RootResourceId\n      PathPart: '{proxy+}'\n\n  SmsApiMethod:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      AuthorizationType: NONE\n      HttpMethod: ANY\n      Integration:\n        IntegrationHttpMethod: POST\n        Type: AWS_PROXY\n        Uri: !Sub\n          - arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/$${lambdaArn}/invocations\n          - lambdaArn: !GetAtt SmsApiLambda.Arn\n      ResourceId: !Ref SmsApiResource\n      RestApiId: !Ref SmsApiGateway\n\n  SmsApiDeployment:\n    Type: AWS::ApiGateway::Deployment\n    DependsOn:\n      - SmsApiMethod\n    Properties:\n      RestApiId: !Ref SmsApiGateway\n      StageName: !Ref apiGatewayStageName\n\n  SmsApiDomain:\n    Type: AWS::ApiGateway::DomainName\n    Properties:\n      DomainName: !Ref apiGatewayDomainName\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      RegionalCertificateArn: !Ref apiGatewayCertificateArn\n\n  SmsApiDomainMapping:\n    Type: AWS::ApiGateway::BasePathMapping\n    DependsOn:\n      - SmsApiDeployment\n    Properties:\n      DomainName: !Ref SmsApiDomain\n      RestApiId: !Ref SmsApiGateway\n      BasePath: ''\n      Stage: !Ref apiGatewayStageName\n\n  CloudWatchAlarm3PlusSend:\n    Type: AWS::CloudWatch::Alarm\n    DependsOn:\n      - SnsCloudwatchAlarmTopic\n    Properties:\n      AlarmActions:\n        - !Ref SnsCloudwatchAlarmTopic\n      AlarmDescription: Triggered when we send a customer a message of the same campaign and message type in a 24 hour period\n      AlarmName: sms-service-3Plus-send\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 1\n      MetricName: DuplicateMessage3PlusSend\n      Namespace: !Ref metricNamespaceErrors\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      TreatMissingData: notBreaching\n      Unit: None\n\n  CloudWatchAlarm10PlusSend:\n    Type: AWS::CloudWatch::Alarm\n    DependsOn:\n      - SnsCloudwatchAlarmTopic\n    Properties:\n      AlarmActions:\n        - !Ref SnsCloudwatchAlarmTopic\n      AlarmDescription: Triggered when we send a customer a message of the same campaign and message type in a 24 hour period\n      AlarmName: sms-service-10Plus-send\n      ComparisonOperator: GreaterThanThreshold\n      EvaluationPeriods: 1\n      MetricName: DuplicateMessage10PlusSend\n      Namespace: !Ref metricNamespaceErrors\n      Period: 60\n      Statistic: Sum\n      Threshold: 0\n      TreatMissingData: notBreaching\n      Unit: None\n\n  SnsCloudwatchAlarmTopic:\n    Type: AWS::SNS::Topic\n    Properties:\n      DisplayName: !Ref snsAlarmDisplayName\n      Subscription:\n        - Endpoint: brett@rocketpartners.io\n          Protocol: email\n      TopicName: sms-alarms\n\nOutputs:\n  DynamoToSqsLambdaArn:\n    Value: !GetAtt DynamoToSqsLambda.Arn\n\n  OutboundSMSLambdaArn:\n    Value: !GetAtt OutboundSMSLambda.Arn\n\n  CampaignScheduleLambdaArn:\n    Value: !GetAtt CampaignScheduleLambda.Arn\n\n  SmsApiLambda:\n    Value: !GetAtt SmsApiLambda.Arn\n\n  testURL:\n    Value: !Sub https://$${apiGatewayDomainName}/sms/test?apiKeys=123456789\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--sms-pipeline-stack" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "sms-pipeline-stack"
  template_body      = "Description: >\n  CodePipeline for the SMS Service\nParameters:\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch of the repo to continuously deploy.\n    Type: String\n\n  githubRepo:\n    Default: liftck_sms_opt_in\n    Description: The repo\n    Type: String\n\n  githubToken:\n    Description: Token for the GitHub user\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: The repo owner on GitHub.\n    Type: String\n\n  resourcePrefix:\n    Default: liftck-sms-opt-in\n    Description: This will be appended to the beginning of almost all the resources created\n    Type: String\n\n  s3ArtifactsBucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts.\n    Type: String\n\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\nResources:\n  PipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - codedeploy:*\n                  - lambda:*\n                  - cloudformation:CreateChangeSet\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - s3:*\n                  - events:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                Resource: '*'\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - lambda:UpdateFunctionCode\n                  - ecr:GetAuthorizationToken\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:ListBucket\n                  - s3:PutObject\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        EnvironmentVariables:\n          - Name: CF_ENVIRONMENT\n            Value: !Ref environment\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n      Name: !Sub $${resourcePrefix}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: '*'\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - s3:*\n                  - cloudformation:*\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeStacks\n                  - cloudformation:UpdateStack\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: '*'\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref resourcePrefix\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3ArtifactsBucket\n      Stages:\n        - Name: GitHubTrigger\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: CodeBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n\n  SlackChannelChatbotRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: deployment-chatbot-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: chatbot.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - cloudwatch:Describe*\n                  - cloudwatch:Get*\n                  - cloudwatch:List*\n                Resource: '*'\n                Effect: Allow\n\n  SlackChannelChatbot:\n    Type: AWS::Chatbot::SlackChannelConfiguration\n    DependsOn:\n      - SlackChannelChatbotRole\n    Properties:\n      ConfigurationName: deployment-chatbot\n      IamRoleArn: !GetAtt SlackChannelChatbotRole.Arn\n      LoggingLevel: ERROR\n      SlackChannelId: !Ref slackChannelId\n      SlackWorkspaceId: T1JG4Q73J\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    DependsOn:\n      - SlackChannelChatbot\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !GetAtt SlackChannelChatbot.Arn\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    DependsOn:\n      - SlackChannelChatbot\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !GetAtt SlackChannelChatbot.Arn\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--tobacco-deals-pipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "tobacco-deals-pipeline"
  template_body      = "Description: CICD for Tobacco Deals website\n\nParameters:\n  distributionId:\n    AllowedValues:\n      - E1I8OYZZ8TSYP3\n      - EULHRLCLOCQJA\n    Description: CloudFront distribution ID\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Type: String\n    Description: The branch of the repo to continuously deploy. (dev)\n\n  githubRepo:\n    Default: liftck_tobacco_deals\n    Type: String\n\n  githubToken:\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Type: String\n\n  resourcePrefix:\n    Default: tobacco-deals\n    Type: String\n\n  s3BucketName:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  s3SourceBucket:\n    AllowedValues:\n      - tobacco-deals.circlekliftdev.com\n      - tobacco-deals.circleklift.com\n    Type: String\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}/*\n                  - !Sub arn:aws:s3:::$${s3SourceBucket}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:DeleteObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource:\n                  - !Sub arn:aws:cloudfront::$${AWS::AccountId}:distribution/$${distributionId}\n                Effect: Allow\n                Action:\n                  - cloudfront:CreateInvalidation\n                  - cloudfront:UpdateDistribution\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                  - !Sub arn:aws:s3:::$${s3BucketName}\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n                  - s3:ListBucket\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: buildspec.yml\n      Environment:\n        ComputeType: BUILD_GENERAL1_MEDIUM\n        EnvironmentVariables:\n          - Name: ENVIRONMENT\n            Type: PLAINTEXT\n            Value: !Ref environment\n        Image: aws/codebuild/standard:4.0\n        Type: LINUX_CONTAINER\n        PrivilegedMode: false\n      Name: !Sub $${resourcePrefix}-pipeline\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 2\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--token-tracker-dynamo-ecs" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "token-tracker-dynamo-ecs"
  template_body      = "Description: Build Dynamo, ECR, ECS resources for Token Tracker service\n\nParameters:\n  albListenerId:\n    Description: e4f is Dev \u0026 64d is Prod\n    Type: String\n    AllowedValues:\n      - e4f3b568e7501cdc/9e877e4d1324c017 # Dev\n      - 64deb6688dcdede5/1f54e68e8b044ee4 # Prod\n\n  dynamoTtlAttribute:\n    Type: String\n    Default: EXPIRETIME\n\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: token-tracker\n\n  instanceCount:\n    Description: How many instances of this task should we run across our cluster?\n    Type: Number\n    Default: 2\n\n  rolePrefix:\n    Description: String to prefix IAM roles\n    Type: String\n    Default: cirk\n\n  serviceSubnets:\n    Description: The subnets the service should use (private)\n    Type: List<AWS::EC2::Subnet::Id>\n\n  vpcId:\n    Description: The VPC for the ECS Service\n    Type: AWS::EC2::VPC::Id\n\nResources:\n  Service:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ListenerRulePort443\n    Properties:\n      Cluster: !Ref ecsCluster\n      ServiceName: !Ref ecsService\n      DesiredCount: !Ref instanceCount\n      HealthCheckGracePeriodSeconds: 120\n      LaunchType: FARGATE\n      TaskDefinition: !Ref TaskDefinition\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: DISABLED\n          Subnets: !Ref serviceSubnets\n          SecurityGroups:\n            - !Ref ServiceSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub $${ecsCluster}-$${ecsService}-container\n          ContainerPort: 8080\n          TargetGroupArn: !Ref TargetGroup\n\n  ListenerRulePort443:\n    Type: AWS::ElasticLoadBalancingV2::ListenerRule\n    Properties:\n      ListenerArn: !Sub arn:aws:elasticloadbalancing:$${AWS::Region}:$${AWS::AccountId}:listener/app/$${ecsCluster}/$${albListenerId}\n      Priority: 3\n      Conditions:\n        - Field: path-pattern\n          Values:\n            - !Sub /$${ecsService}*\n      Actions:\n        - Type: forward\n          TargetGroupArn: !Ref TargetGroup\n\n  ServiceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: !Sub ecs-$${ecsCluster}-$${ecsService}\n      GroupDescription: !Sub Security Group for ECS service $${ecsService} in cluster $${ecsCluster}\n      VpcId: !Ref vpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 8080\n          ToPort: 8080\n          CidrIp: \"0.0.0.0/0\"\n      SecurityGroupEgress:\n        - IpProtocol: \"-1\"\n          CidrIp: \"0.0.0.0/0\"\n      Tags:\n        - Key: Name\n          Value: !Sub ecs-$${ecsCluster}-$${ecsService}\n\n  TargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Name: !Sub $${ecsCluster}-$${ecsService}\n      VpcId: !Ref vpcId\n      Port: 80\n      Protocol: HTTP\n      TargetType: ip\n      Matcher:\n        HttpCode: 200-299\n      HealthCheckIntervalSeconds: 10\n      HealthCheckPath: !Sub /$${ecsService}/health\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Tags:\n        - Key: Name\n          Value: !Sub $${ecsCluster}-$${ecsService}\n\n  TaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: !Sub $${ecsCluster}-$${ecsService}-task\n      RequiresCompatibilities:\n        - FARGATE\n      NetworkMode: awsvpc\n      Cpu: 1024\n      Memory: 2048\n      TaskRoleArn: !Ref TaskRole\n      ExecutionRoleArn: !Ref TaskRole\n      ContainerDefinitions:\n        - Name: !Sub $${ecsCluster}-$${ecsService}-container\n          Image: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsService}:latest\n          Cpu: 1024\n          Memory: 2048\n          Essential: true\n          PortMappings:\n            - ContainerPort: 8080\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Ref CloudWatchLogsGroup\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: !Sub /ecs/$${ecsCluster}/$${ecsService}\n\n  TaskRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role\n      AssumeRolePolicyDocument: |\n        {\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Principal\": { \"Service\": [ \"ecs-tasks.amazonaws.com\" ]},\n                \"Action\": [ \"sts:AssumeRole\" ]\n            }]\n        }\n      Policies:\n        - PolicyName: !Sub $${rolePrefix}-$${ecsCluster}-$${ecsService}-task-role-policy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - \"logs:CreateLogGroup\"\n                Effect: Allow\n                Resource: !GetAtt CloudWatchLogsGroup.Arn\n              - Action:\n                  - \"ecr:GetAuthorizationToken\"\n                  - \"ecr:BatchCheckLayerAvailability\"\n                  - \"ecr:GetDownloadUrlForLayer\"\n                  - \"ecr:BatchGetImage\"\n                  - \"logs:CreateLogStream\"\n                  - \"logs:PutLogEvents\"\n                  - \"cloudwatch:PutMetricData\"\n                  - \"dynamodb:BatchGetItem\"\n                  - \"dynamodb:BatchWriteItem\"\n                  - \"dynamodb:PutItem\"\n                  - \"dynamodb:DescribeTable\"\n                  - \"dynamodb:DeleteItem\"\n                  - \"dynamodb:GetItem\"\n                  - \"dynamodb:Scan\"\n                  - \"dynamodb:Query\"\n                  - \"dynamodb:UpdateItem\"\n                  - \"s3:GetObject\"\n                  - \"s3:GetObject*\"\n                  - \"s3:PutObject\"\n                  - \"s3:ListBucket\"\n                  - \"s3:ListAllMyBuckets\"\n                Effect: Allow\n                Resource: \"*\"\n\n  CloudWatchLogsGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /ecs/$${ecsCluster}/$${ecsService}\n      RetentionInDays: 30\n\n  AdSegmentationTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: ad-segmentation\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: MOBILENUMBER\n          AttributeType: N\n        - AttributeName: CAMPAIGNCODE\n          AttributeType: S\n      KeySchema:\n        - AttributeName: MOBILENUMBER\n          KeyType: HASH\n        - AttributeName: CAMPAIGNCODE\n          KeyType: RANGE\n\n  LoyaltyTrackerTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: loyalty-tracker\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: MOBILENUMBER\n          AttributeType: S\n        - AttributeName: CAMPAIGNCODE\n          AttributeType: S\n      KeySchema:\n        - AttributeName: MOBILENUMBER\n          KeyType: HASH\n        - AttributeName: CAMPAIGNCODE\n          KeyType: RANGE\n      TimeToLiveSpecification:\n        AttributeName: !Ref dynamoTtlAttribute\n        Enabled: true\n\n  QuickExpireTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: quick-expire\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: CAMPAIGNCODE\n          AttributeType: S\n        - AttributeName: MOBILENUMBER\n          AttributeType: N\n      KeySchema:\n        - AttributeName: CAMPAIGNCODE\n          KeyType: HASH\n        - AttributeName: MOBILENUMBER\n          KeyType: RANGE\n\n  TokenTrackerTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: token-tracker\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: USERID\n          AttributeType: S\n        - AttributeName: CREATED\n          AttributeType: S\n      KeySchema:\n        - AttributeName: USERID\n          KeyType: HASH\n        - AttributeName: CREATED\n          KeyType: RANGE\n      TimeToLiveSpecification:\n        AttributeName: !Ref dynamoTtlAttribute\n        Enabled: true\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--token-tracker-pipeline" {
  capabilities       = ["CAPABILITY_IAM"]
  disable_rollback   = "false"
  name               = "token-tracker-pipeline"
  template_body      = "Description: Codepipeline Build and Deployment of ECS Service\n\nParameters:\n  ecsCluster:\n    Type: String\n    Description: Name of the ECS cluster\n    Default: player\n\n  ecsService:\n    Type: String\n    Description: Name of the ECS service\n    Default: token-tracker\n\n  githubBranch:\n    Type: String\n    Description: The branch of the repo to continuously deploy.\n    AllowedValues:\n      - dev\n      - master\n      - deploy-prod\n\n  githubRepo:\n    Type: String\n    Description: The repo name\n    Default: liftck_token_tracker\n\n  githubToken:\n    Type: String\n    NoEcho: true\n\n  githubUser:\n    Type: String\n    Description: Your repo owner on GitHub. (For repo RocketPartners/liftck_snooze this should be RocketPartners)\n    Default: RocketPartners\n\n  s3BucketName:\n    Type: String\n    Description: Name of S3 bucket to use for codepipeline artifacts\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n\nResources:\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - ecr:GetAuthorizationToken\n              - Resource: !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n              - Resource: !Sub arn:aws:ecr:$${AWS::Region}:$${AWS::AccountId}:repository/$${ecsService}\n                Effect: Allow\n                Action:\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:PutImage\n                  - ecr:InitiateLayerUpload\n                  - ecr:UploadLayerPart\n                  - ecr:CompleteLayerUpload\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource:\n                  - !Sub arn:aws:s3:::$${s3BucketName}/*\n                Effect: Allow\n                Action:\n                  - s3:PutObject\n                  - s3:GetObject\n                  - s3:GetObjectVersion\n                  - s3:GetBucketVersioning\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - ecs:DescribeServices\n                  - ecs:DescribeTaskDefinition\n                  - ecs:DescribeTasks\n                  - ecs:ListTasks\n                  - ecs:RegisterTaskDefinition\n                  - ecs:UpdateService\n                  - codebuild:StartBuild\n                  - codebuild:BatchGetBuilds\n                  - iam:PassRole\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: CF_DOCKER_CONTAINER_NAME\n            Value: !Sub $${ecsCluster}-$${ecsService}-container\n          - Name: CF_REPOSITORY_URI\n            Value: !Sub $${AWS::AccountId}.dkr.ecr.$${AWS::Region}.amazonaws.com/$${ecsService}\n          - Name: CF_SERVICE\n            Value: !Sub $${ecsService}\n      Name: !Sub $${ecsService}-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${ecsService}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3BucketName\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: App\n              RunOrder: 1\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: App\n              OutputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n        - Name: Deploy\n          Actions:\n            - Name: Deploy\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: ECS\n              Configuration:\n                ClusterName: !Ref ecsCluster\n                ServiceName: !Ref ecsService\n                FileName: imagedefinitions.json\n              InputArtifacts:\n                - Name: BuildOutput\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--url-shortener-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "url-shortener-pipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  apiKeys:\n    AllowedValues:\n      - dev123\n      - 23e6bd75-1a64-4fa4-a9d1-c6793a7b650f\n    Type: String\n\n  certificateArn:\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n      - arn:aws:acm:us-east-1:799611636099:certificate/6e4c5e1a-bdb2-4b69-8c4c-8796937d1979\n    Description: 0f6 == circlekliftdev.com; 459 == circleklift.com; 6e4 == myck.site\n    Type: String\n\n  domainName:\n    AllowedValues:\n      - circlekliftdev.com\n      - circleklift.com\n      - myck.site\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_url_shortener\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: url-shortener\n    Description: This will be appended to the beginning of almost all the resources created\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\n  slackChannelId:\n    AllowedValues:\n      - C01GYHGPM2S\n      - C01GYHH8RE2\n    Description: ID of the deploy-dev (C01GYHGPM2S) and deploy-prod (C01GYHH8RE2) Slack channels\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - dynamodb:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutMetricFilter\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: '*'\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: '*'\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:PutMetricFilter\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: '*'\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: '*'\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: '*'\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"apiKeys\": \"$${apiKeys}\", \"certificateArn\": \"$${certificateArn}\", \"domainName\": \"$${domainName}\", \"environment\": \"$${environment}\", \"resourcePrefix\": \"$${resourcePrefix}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n\n  BuildNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codebuild-project-build-state-failed\n        - codebuild-project-build-state-succeeded\n      Name: !Sub $${resourcePrefix}-build-notification\n      Resource: !Sub arn:aws:codebuild:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline-build\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n\n  PipelineNotifications:\n    Type: AWS::CodeStarNotifications::NotificationRule\n    Properties:\n      DetailType: FULL\n      EventTypeIds:\n        - codepipeline-pipeline-stage-execution-started\n        - codepipeline-pipeline-stage-execution-succeeded\n        - codepipeline-pipeline-stage-execution-failed\n        - codepipeline-pipeline-pipeline-execution-failed\n        - codepipeline-pipeline-pipeline-execution-canceled\n        - codepipeline-pipeline-pipeline-execution-started\n        - codepipeline-pipeline-pipeline-execution-resumed\n        - codepipeline-pipeline-pipeline-execution-succeeded\n        - codepipeline-pipeline-pipeline-execution-superseded\n      Name: !Sub $${resourcePrefix}-pipeline-notification\n      Resource: !Sub arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${resourcePrefix}-pipeline\n      Status: ENABLED\n      Targets:\n        - TargetAddress: !Sub arn:aws:chatbot::$${AWS::AccountId}:chat-configuration/slack-channel/deployment-chatbot\n          TargetType: AWSChatbotSlack\n"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--url-shortener-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/url-shortener-lambda-role"
  name               = "url-shortener-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nConditions:\n  DevResource:\n    Fn::Equals:\n    - Ref: environment\n    - dev\n  ProdResource:\n    Fn::Equals:\n    - Ref: environment\n    - prod\nDescription: Creates serverless resources for Verification Code\nParameters:\n  apiKeys:\n    Type: String\n  certificateArn:\n    Type: String\n  domainName:\n    Type: String\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  metricNamespace:\n    Default: URL Shortener\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\nResources:\n  ApiBasePathMappingDev:\n    Condition: DevResource\n    DependsOn:\n    - ApiDomainNameDev\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainNameDev\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n    Type: AWS::ApiGateway::BasePathMapping\n  ApiBasePathMappingProd:\n    Condition: ProdResource\n    DependsOn:\n    - ApiDomainNameProd\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainNameProd\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n    Type: AWS::ApiGateway::BasePathMapping\n  ApiDomainNameDev:\n    Condition: DevResource\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Fn::Sub: $${resourcePrefix}.$${domainName}\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n    Type: AWS::ApiGateway::DomainName\n  ApiDomainNameProd:\n    Condition: ProdResource\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Ref: domainName\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n    Type: AWS::ApiGateway::DomainName\n  ApiGateway:\n    Properties:\n      Name:\n        Fn::Sub: $${resourcePrefix}-api\n      StageName:\n        Ref: environment\n    Type: AWS::Serverless::Api\n  CreateShortUrlMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.CREATE_SHORT_URL\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: CreateShortUrl\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  FailedRedirectMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.ERROR.REDIRECT\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: FailedRedirect\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  FailedShortUrlMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.ERROR.FAILED_SHORTEN_FOR_URL\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: FailedCreateShortUrl\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\n  Lambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/url-shortener-pipeline-build/b2dedfd13e1e0939999f7539d9c1fb81\n      Description: URL Shortener Lambda\n      Environment:\n        Variables:\n          API_KEYS:\n            Ref: apiKeys\n          DEBUG: true\n      Events:\n        ApiGateway:\n          Properties:\n            Method: any\n            Path: /{proxy+}\n            RestApiId:\n              Ref: ApiGateway\n          Type: Api\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: com.liftck.shortener.LambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - logs:*\n          Effect: Allow\n          Resource:\n          - '*'\n        - Action:\n          - dynamodb:BatchGetItem\n          - dynamodb:BatchWriteItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Query\n          - dynamodb:UpdateItem\n          Effect: Allow\n          Resource:\n            Fn::Join:\n            - ''\n            - - 'arn:aws:dynamodb:'\n              - Ref: AWS::Region\n              - ':'\n              - Ref: AWS::AccountId\n              - :table/\n              - Ref: resourcePrefix\n        Version: 2012-10-17\n      Runtime: java8\n      Timeout: 15\n    Type: AWS::Serverless::Function\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\n  RedirectMetricFilter:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      FilterPattern: METRIC.COUNT.REDIRECT\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      MetricTransformations:\n      - MetricName: Redirect\n        MetricNamespace:\n          Ref: metricNamespace\n        MetricValue: 1\n    Type: AWS::Logs::MetricFilter\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--verification-codes-stack" {
  capabilities       = ["CAPABILITY_AUTO_EXPAND", "CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  iam_role_arn       = "arn:aws:iam::799611636099:role/verification-codes-lambda-role"
  name               = "verification-codes-stack"
  template_body      = "AWSTemplateFormatVersion: 2010-09-09\nDescription: Creates serverless resources for Verification Code\nParameters:\n  apiKeys:\n    Type: String\n  certificateArn:\n    Type: String\n  domainName:\n    Type: String\n  environment:\n    Description: Can be used to alter resources depending on environment\n    Type: String\n  resourcePrefix:\n    Description: This will be appended to the beginning of almost all the resources\n      created\n    Type: String\n  smsApiKey:\n    Type: String\n  smsUri:\n    Type: String\nResources:\n  ApiBasePathMapping:\n    DependsOn:\n    - ApiDomainName\n    Properties:\n      BasePath: ''\n      DomainName:\n        Ref: ApiDomainName\n      RestApiId:\n        Ref: ApiGateway\n      Stage:\n        Ref: environment\n    Type: AWS::ApiGateway::BasePathMapping\n  ApiDomainName:\n    DependsOn:\n    - ApiGateway\n    Properties:\n      DomainName:\n        Fn::Sub: $${resourcePrefix}.$${domainName}\n      EndpointConfiguration:\n        Types:\n        - REGIONAL\n      RegionalCertificateArn:\n        Ref: certificateArn\n    Type: AWS::ApiGateway::DomainName\n  ApiGateway:\n    Properties:\n      Name:\n        Fn::Sub: $${resourcePrefix}-api\n      StageName:\n        Ref: environment\n    Type: AWS::Serverless::Api\n  Lambda:\n    DependsOn:\n    - LambdaLogGroup\n    Properties:\n      CodeUri: s3://circlek-prod-codepipeline-artifacts/verification-codes-pipeline-build/428c85d81d1519e692bcbdcc55082ac8\n      Description: Verification Code Service Api\n      Environment:\n        Variables:\n          API_KEYS:\n            Ref: apiKeys\n          SMS_API_KEY:\n            Ref: smsApiKey\n          SMS_URI:\n            Ref: smsUri\n      Events:\n        ApiGateway:\n          Properties:\n            Method: any\n            Path: /{proxy+}\n            RestApiId:\n              Ref: ApiGateway\n          Type: Api\n      FunctionName:\n        Fn::Sub: $${resourcePrefix}-lambda\n      Handler: com.liftck.verificationcode.LambdaHandler::handleRequest\n      MemorySize: 1024\n      Policies:\n      - Statement:\n        - Action:\n          - dynamodb:BatchGetItem\n          - dynamodb:BatchWriteItem\n          - dynamodb:DeleteItem\n          - dynamodb:DescribeTable\n          - dynamodb:GetItem\n          - dynamodb:PutItem\n          - dynamodb:Query\n          - dynamodb:UpdateItem\n          Effect: Allow\n          Resource:\n            Fn::Join:\n            - ''\n            - - 'arn:aws:dynamodb:'\n              - Ref: AWS::Region\n              - ':'\n              - Ref: AWS::AccountId\n              - :table/\n              - Ref: resourcePrefix\n        Version: 2012-10-17\n      Runtime: java8\n      Timeout: 15\n    Type: AWS::Serverless::Function\n  LambdaLogGroup:\n    Properties:\n      LogGroupName:\n        Fn::Sub: /aws/lambda/$${resourcePrefix}-lambda\n      RetentionInDays: 7\n    Type: AWS::Logs::LogGroup\nTransform: AWS::Serverless-2016-10-31"
  timeout_in_minutes = "0"
}

resource "aws_cloudformation_stack" "tfer--verification-passcode-pipeline" {
  capabilities       = ["CAPABILITY_NAMED_IAM"]
  disable_rollback   = "false"
  name               = "verification-passcode-pipeline"
  template_body      = "Description: >\n  Pipeline, Build, and Deployment of Lambda Service\nParameters:\n  apiKeys:\n    AllowedValues:\n      - dev123\n      - 23e6bd75-1a64-4fa4-a9d1-c6793a7b650f\n    Type: String\n\n  certificateArn:\n    AllowedValues:\n      - arn:aws:acm:us-east-1:627729951075:certificate/0f6443f8-5fd3-42f6-9a1c-41646932d980\n      - arn:aws:acm:us-east-1:799611636099:certificate/459af342-88df-4c7f-aa12-7a17dad4417c\n    Type: String\n\n  domainName:\n    AllowedValues:\n      - circlekliftdev.com\n      - circleklift.com\n    Type: String\n\n  environment:\n    AllowedValues:\n      - dev\n      - prod\n    Description: Can be used to alter resources depending on environment\n    Type: String\n\n  githubBranch:\n    AllowedValues:\n      - deploy-dev\n      - deploy-prod\n    Description: The branch that triggers CodeBuild\n    Type: String\n\n  githubRepo:\n    Default: liftck_verification_code\n    Description: The repo name\n    Type: String\n\n  githubToken:\n    Description: Token for the user specified above\n    NoEcho: true\n    Type: String\n\n  githubUser:\n    Default: RocketPartners\n    Description: Your repo owner on GitHub\n    Type: String\n\n  resourcePrefix:\n    Type: String\n    Default: verification-codes\n    Description: This will be appended to the beginning of almost all the resources created\n\n  smsApiKey:\n    AllowedValues:\n      - 1234abcd\n      - liftverifcode-g8f9m6bef85q86cacbf53x13a9\n    Type: String\n\n  smsUri:\n    AllowedValues:\n      - https://sms-opt-in.circlekliftdev.com/sms/manual-send\n      - https://sms-opt-in.circleklift.com/sms/manual-send\n    Type: String\n\n  s3Bucket:\n    AllowedValues:\n      - cirk-dev-codepipeline-artifacts\n      - circlek-prod-codepipeline-artifacts\n    Description: Name of s3Bucket to use for codepipeline artifacts\n    Type: String\n\nResources:\n  LambdaPipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub $${resourcePrefix}-lambda-role\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - apigateway:*\n                  - codedeploy:*\n                  - cloudformation:CreateChangeSet\n                  - dynamodb:*\n                  - events:*\n                  - ec2:*\n                  - iam:GetRole\n                  - iam:CreateRole\n                  - iam:DeleteRole\n                  - iam:PutRolePolicy\n                  - iam:AttachRolePolicy\n                  - iam:DeleteRolePolicy\n                  - iam:DetachRolePolicy\n                  - iam:PassRole\n                  - lambda:*\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - logs:DescribeLogGroups\n                  - logs:PutRetentionPolicy\n                  - logs:DeleteLogGroup\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n\n  CodeBuildServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codebuild.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Resource: \"*\"\n                Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                  - s3:GetObject\n                  - s3:PutObject\n                  - s3:GetObjectVersion\n\n  CodePipelineServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      Path: /\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: root\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - iam:PassRole\n                Resource: \"*\"\n                Effect: Allow\n                Condition:\n                  StringEqualsIfExists:\n                    iam:PassedToService:\n                      - cloudformation.amazonaws.com\n              - Action:\n                  - codedeploy:CreateDeployment\n                  - codedeploy:GetApplication\n                  - codedeploy:GetApplicationRevision\n                  - codedeploy:GetDeployment\n                  - codedeploy:GetDeploymentConfig\n                  - codedeploy:RegisterApplicationRevision\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudwatch:*\n                  - cloudformation:*\n                  - s3:*\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - lambda:InvokeFunction\n                  - lambda:ListFunctions\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - cloudformation:CreateChangeSet\n                  - cloudformation:CreateStack\n                  - cloudformation:DeleteChangeSet\n                  - cloudformation:DeleteStack\n                  - cloudformation:DescribeChangeSet\n                  - cloudformation:DescribeStacks\n                  - cloudformation:ExecuteChangeSet\n                  - cloudformation:UpdateStack\n                  - cloudformation:SetStackPolicy\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n                Effect: Allow\n              - Action:\n                  - codebuild:BatchGetBuilds\n                  - codebuild:StartBuild\n                Resource: \"*\"\n                Effect: Allow\n              - Effect: Allow\n                Action:\n                  - cloudformation:ValidateTemplate\n                Resource: \"*\"\n\n  CodeBuildProject:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Source:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/java:openjdk-8\n        Type: LINUX_CONTAINER\n        PrivilegedMode: true\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref s3Bucket\n          - Name: S3_BUCKETPREFIX\n            Value: !Sub $${resourcePrefix}-pipeline-build\n      Name: !Sub $${resourcePrefix}-pipeline-build\n      ServiceRole: !Ref CodeBuildServiceRole\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Sub $${resourcePrefix}-pipeline\n      RoleArn: !GetAtt CodePipelineServiceRole.Arn\n      ArtifactStore:\n        Type: S3\n        Location: !Ref s3Bucket\n      Stages:\n        - Name: LambdaSource\n          Actions:\n            - Name: App\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Version: 1\n                Provider: GitHub\n              Configuration:\n                Owner: !Ref githubUser\n                Repo: !Ref githubRepo\n                Branch: !Ref githubBranch\n                OAuthToken: !Ref githubToken\n              OutputArtifacts:\n                - Name: SourceArtifact\n              RunOrder: 1\n        - Name: LambdaBuild\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              Configuration:\n                ProjectName: !Ref CodeBuildProject\n              InputArtifacts:\n                - Name: SourceArtifact\n              OutputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n        - Name: LambdaDeploy\n          Actions:\n            - Name: CreateUpdateLambda\n              ActionTypeId:\n                Category: Deploy\n                Owner: AWS\n                Version: 1\n                Provider: CloudFormation\n              Configuration:\n                ActionMode: CREATE_UPDATE\n                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM\n                RoleArn: !GetAtt LambdaPipelineRole.Arn\n                StackName: !Sub $${resourcePrefix}-stack\n                ChangeSetName: !Sub $${resourcePrefix}-changeset\n                TemplatePath: BuildArtifact::outputtemplate.yaml\n                ParameterOverrides: !Sub '{\"apiKeys\": \"$${apiKeys}\", \"certificateArn\": \"$${certificateArn}\", \"domainName\": \"$${domainName}\", \"environment\": \"$${environment}\", \"resourcePrefix\": \"$${resourcePrefix}\", \"smsApiKey\": \"$${smsApiKey}\", \"smsUri\": \"$${smsUri}\" }'\n              InputArtifacts:\n                - Name: BuildArtifact\n              RunOrder: 1\n"
  timeout_in_minutes = "0"
}
